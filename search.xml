<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Rust类型之间的转换</title>
      <link href="/post/eb2b1172.html"/>
      <url>/post/eb2b1172.html</url>
      
        <content type="html"><![CDATA[<h1 id="Rust类型之间的转换">Rust类型之间的转换</h1><div class="note info modern"><blockquote><p>Rust由于其严格的编译器检查，其语法转换较为繁杂</p></blockquote></div><h2 id="String-和-Vec-的转换">String 和 Vec&lt;&gt;的转换</h2><h3 id="String和Vec-i32-的转换">String和Vec<i32>的转换</h3><ul><li>string转换为vec<i32></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">vec_i32</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = string.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">map</span>(|c| c.<span class="title function_ invoke__">to_digit</span>(<span class="number">10</span>).<span class="title function_ invoke__">unwrap</span>() <span class="keyword">as</span> <span class="type">i32</span>).<span class="title function_ invoke__">collect</span>();</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">vec_i32</span> = input_string.<span class="title function_ invoke__">split</span>(&#x27;&#x27;).<span class="title function_ invoke__">map</span>(|s| s.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>()).<span class="title function_ invoke__">collect</span>()</span><br></pre></td></tr></table></figure><ul><li>vec<i32>转换为string</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">string</span>: <span class="type">String</span> = vec_i32.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(<span class="built_in">ToString</span>::to_string).<span class="title function_ invoke__">collect</span>();</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">string</span> = vec_i32.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|i| i.<span class="title function_ invoke__">to_string</span>()).collect::&lt;<span class="type">String</span>&gt;();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust在windows下的配置</title>
      <link href="/post/1f4805cc.html"/>
      <url>/post/1f4805cc.html</url>
      
        <content type="html"><![CDATA[<h1 id="windows下Rust的配置">windows下Rust的配置</h1><p>microsoft比较喜欢rust编程语言，在它的官网之上，有针对rust的配置说明.<br><img src="https://learn.microsoft.com/zh-cn/windows/dev-environment/rust/setup" alt="配置说明"></p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust网络编程</title>
      <link href="/post/f746986d.html"/>
      <url>/post/f746986d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Rust网络编程">Rust网络编程</h1><h2 id="Rust中TCP协议">Rust中TCP协议</h2><div class="note info modern"><p>TCP协议是网络编程中的一个重要概念，深入了解TCP协议，对网络开发有重要的作用。<br>TCP连接包括有三次握手和四次挥手，在Rust标准库的net模块中，实现了TCP协议。<br><a class="btn-beautify green larger" href="https://doc.rust-lang.org/std/net/index.html"   title="NET模块"><i class="far fa-hand-point-right"></i><span>NET模块</span></a></p></div><h3 id="Rust中TCP协议的server端实现">Rust中TCP协议的server端实现</h3><div class="note default modern"><p>Rust中TCP协议的server端主要由接收<mark class="hl-label blue">TCPListener</mark> 和<mark class="hl-label purple">TCPStream</mark> 构成，其中使用<br><code>thread::spawn</code>创建线程来处理到来的stream,使用<code>handle_client</code>方法实现。</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::net::&#123;TcpListener, TcpStream&#125;;</span><br><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::time;</span><br><span class="line"><span class="keyword">use</span> std::io::&#123;<span class="keyword">self</span>, Read, Write&#125;;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">handle_client</span>(<span class="keyword">mut</span> stream: TcpStream) <span class="punctuation">-&gt;</span> io::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">buf</span> = [<span class="number">0</span>; <span class="number">512</span>];</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">1000</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">bytes_read</span> = stream.<span class="title function_ invoke__">read</span>(&amp;<span class="keyword">mut</span> buf)?;</span><br><span class="line">        <span class="keyword">if</span> bytes_read == <span class="number">0</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        stream.<span class="title function_ invoke__">write</span>(&amp;buf[..bytes_read])?;</span><br><span class="line">        thread::<span class="title function_ invoke__">sleep</span>(time::Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> io::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">listener</span> = TcpListener::<span class="title function_ invoke__">bind</span>(<span class="string">&quot;127.0.0.1:8595&quot;</span>)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">thread_vec</span>: <span class="type">Vec</span>&lt;thread::JoinHandle&lt;()&gt;&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">stream</span> <span class="keyword">in</span> listener.<span class="title function_ invoke__">incoming</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">stream</span> = stream.<span class="title function_ invoke__">expect</span>(<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">handle</span> = thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">            <span class="title function_ invoke__">handle_client</span>(stream).</span><br><span class="line">            <span class="title function_ invoke__">unwrap_or_else</span>(</span><br><span class="line">                |error| eprintln!(<span class="string">&quot;&#123;:?&#125;&quot;</span>, error)</span><br><span class="line">            )</span><br><span class="line">        &#125;);</span><br><span class="line">        thread_vec.<span class="title function_ invoke__">push</span>(handle);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> <span class="variable">handle</span> <span class="keyword">in</span> thread_vec &#123;</span><br><span class="line">        handle.<span class="title function_ invoke__">join</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust网络编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络</title>
      <link href="/post/e255a10a.html"/>
      <url>/post/e255a10a.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络">计算机网络</h1><p>计算机网络是计算机科学的一个重大分支，经过数十年，如今的计算机网络蓬勃发展。学习计算机网络是一个持续的过程…</p><a class="btn-beautify green larger" href="https://www.runoob.com/w3cnote/summary-of-network.html"   title="菜鸟教程"><i class="far fa-hand-point-right"></i><span>菜鸟教程</span></a><p>子网掩码计算,来自冷血之心的博客</p><a class="btn-beautify green larger" href="https://blog.csdn.net/qq_25827845/article/details/70946041"   title="子网掩码计算"><i class="far fa-hand-point-right"></i><span>子网掩码计算</span></a>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytorch的基本使用方法</title>
      <link href="/post/a78b5d8a.html"/>
      <url>/post/a78b5d8a.html</url>
      
        <content type="html"><![CDATA[<h1 id="pytorch">pytorch</h1><div class="note default modern"><p><mark class="hl-label yellow">pytorch</mark> 是一个python的开源项目，旨在解决python中的机器学习、数学应用等问题。</p><p>本文的目的是介绍<mark class="hl-label blue">pytorch</mark> 的常用方法与其在机器学习中的应用，但是对于详细的pytorch应用，应当自行搜索<a class="btn-beautify green larger" href="https://pytorch.org/docs/stable/index.html"   title="Pytorch官方文档库"><i class="far fa-hand-point-right"></i><span>Pytorch官方文档库</span></a></p></div><h2 id="torch-reshape">torch.reshape()</h2><div class="note info modern"><p><code>torch.reshape()</code>是一种改变矩阵排列的方法，reshape中比较特殊的是-1这个关键字。</p></div><ul><li>当存在一个张量tensor,reshape(-1,1)就是随着第二个参数的确定，-1会将剩余参数依次排列。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">t = torch.tensor([</span><br><span class="line">  [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>],</span><br><span class="line">], dtype = torch.float32)</span><br><span class="line">t2 = t.reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>result:<br><img src="/myimg/pytorch1/reshape1.png" alt=""></p><ul><li>当输出格式为(2,-1)时:</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t2 = t.reshape(<span class="number">2</span>,-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>result:<br><img src="/myimg/pytorch1/reshape2.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基本用法总结</title>
      <link href="/post/970e601.html"/>
      <url>/post/970e601.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python基本用法总结">Python基本用法总结</h1>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode38--外观数列</title>
      <link href="/post/6c51cb4e.html"/>
      <url>/post/6c51cb4e.html</url>
      
        <content type="html"><![CDATA[<h1 id="外观数列">外观数列</h1><p>针对外观数列问题，主要需要解决其中的每个字符串出现的次数如何统计。</p><h2 id="第一种-直接循环构建">第一种:直接循环构建</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">count_and_say</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(<span class="number">1</span> &lt;&lt; <span class="number">12</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">b</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(<span class="number">1</span> &lt;&lt; <span class="number">12</span>);</span><br><span class="line">        a.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">1</span>..n &#123;</span><br><span class="line">            b.<span class="title function_ invoke__">clear</span>();</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">lst</span> = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">//上一个字符</span></span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">cnt</span> = <span class="number">0</span>; <span class="comment">//连续相同字符的数量</span></span><br><span class="line">            <span class="keyword">for</span> &amp;c <span class="keyword">in</span> a.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">                <span class="keyword">if</span> lst != c &#123;</span><br><span class="line">                    <span class="keyword">if</span> cnt &gt; <span class="number">0</span> &#123;</span><br><span class="line">                        b.<span class="title function_ invoke__">extend</span>(cnt.<span class="title function_ invoke__">to_string</span>().<span class="title function_ invoke__">chars</span>());</span><br><span class="line">                        b.<span class="title function_ invoke__">push</span>(lst);</span><br><span class="line">                    &#125;</span><br><span class="line">                    lst = c;</span><br><span class="line">                    cnt = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;cnt += <span class="number">1</span>&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            b.<span class="title function_ invoke__">extend</span>(cnt.<span class="title function_ invoke__">to_string</span>().<span class="title function_ invoke__">chars</span>());</span><br><span class="line">            b.<span class="title function_ invoke__">push</span>(lst);</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">t</span> = a;</span><br><span class="line">            a = b;</span><br><span class="line">            b = t;</span><br><span class="line">        &#125;</span><br><span class="line">        a.<span class="title function_ invoke__">into_iter</span>().<span class="title function_ invoke__">collect</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二种：递归实现">第二种：递归实现</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">count_and_say</span>(n: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">1</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;1&quot;</span>.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">prev</span> = Solution::<span class="title function_ invoke__">count_and_say</span>(n - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">count</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">chars</span>: <span class="type">Vec</span>&lt;<span class="type">char</span>&gt; = prev.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..chars.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">            <span class="keyword">if</span> chars[i] == chars[i - <span class="number">1</span>] &#123;</span><br><span class="line">                count += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                result.<span class="title function_ invoke__">push_str</span>(&amp;count.<span class="title function_ invoke__">to_string</span>());</span><br><span class="line">                result.<span class="title function_ invoke__">push</span>(chars[i - <span class="number">1</span>]);</span><br><span class="line">                count = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        result.<span class="title function_ invoke__">push_str</span>(&amp;count.<span class="title function_ invoke__">to_string</span>());</span><br><span class="line">        result.<span class="title function_ invoke__">push</span>(chars[chars.<span class="title function_ invoke__">len</span>() - <span class="number">1</span>]);</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust位运算的使用技巧整理</title>
      <link href="/post/1d730b02.html"/>
      <url>/post/1d730b02.html</url>
      
        <content type="html"><![CDATA[<h1 id="Rust位运算的方法整理">Rust位运算的方法整理</h1><div class="note info modern"><ol><li>Rust中位运算主要使用在需要使用倍数关系的情况之中，下面是一个Rust位运算的示例。</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">with_capacity</span>(<span class="number">1</span> &lt;&lt; <span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>这里创建了一个Rust位运算的方法，使用左移运算符创建了一个$2^{12}$大小的Vec向量。</p></div>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode37--解数独</title>
      <link href="/post/c439951a.html"/>
      <url>/post/c439951a.html</url>
      
        <content type="html"><![CDATA[<h1 id="解数独的原理">解数独的原理</h1><ol><li>首先需要对应每一行出现的元素<font clolor = Red>line</font>，每一列出现的元素<font color = Red>column</font>，对每一个<br>3x3格子的区域也需要进行运算，构建了line、column和block三个vec向量。<br><img src="/myimg/leetcode37.gif" alt=""></li><li>紧接着，使用最原始的dfs（深度优先搜索算法），使用递归即可完成。</li></ol><h1 id="解数独的代码实现过程">解数独的代码实现过程</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">solve_sudoku</span>(board: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">char</span>&gt;&gt;) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">line</span> = <span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="literal">false</span>;<span class="number">9</span>]; <span class="number">9</span>];</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">column</span> = <span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="literal">false</span>;<span class="number">9</span>]; <span class="number">9</span>];</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">block</span> = <span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="built_in">vec!</span>[<span class="literal">false</span>;<span class="number">9</span>];<span class="number">3</span>];<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">space</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">        (<span class="number">0</span>..<span class="number">9</span>).<span class="title function_ invoke__">for_each</span>(|i| &#123;</span><br><span class="line">            (<span class="number">0</span>..<span class="number">9</span>).<span class="title function_ invoke__">for_each</span>(|j| &#123;</span><br><span class="line">                <span class="keyword">if</span> board[i][j] == <span class="string">&#x27;.&#x27;</span> &#123;</span><br><span class="line">                    space.<span class="title function_ invoke__">push</span>((i,j));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> <span class="variable">digit</span> = board[i][j].<span class="title function_ invoke__">to_digit</span>(<span class="number">10</span>).<span class="title function_ invoke__">unwrap</span>() <span class="keyword">as</span> <span class="type">usize</span> -<span class="number">1</span>;</span><br><span class="line">                    line[i][digit] = <span class="literal">true</span>;</span><br><span class="line">                    column[j][digit] = <span class="literal">true</span>;</span><br><span class="line">                    block[i/<span class="number">3</span>][j/<span class="number">3</span>][digit] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">dfs</span>(board: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">char</span>&gt;&gt;, </span><br><span class="line">           space: &amp;<span class="type">Vec</span>&lt;(<span class="type">usize</span>,<span class="type">usize</span>)&gt;, </span><br><span class="line">           line: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">bool</span>&gt;&gt;, </span><br><span class="line">           column: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">bool</span>&gt;&gt;, </span><br><span class="line">           block: &amp;<span class="keyword">mut</span> <span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">Vec</span>&lt;<span class="type">bool</span>&gt;&gt;&gt;,</span><br><span class="line">           pos: <span class="type">usize</span>) <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> pos == space.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">                   <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">let</span> (i,j) = space[pos];</span><br><span class="line">               <span class="keyword">for</span> <span class="variable">digit</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">9</span> &#123;</span><br><span class="line">                   <span class="keyword">if</span> !line[i][digit] &amp;&amp; !column[j][digit] &amp;&amp; !block[i/<span class="number">3</span>][j/<span class="number">3</span>][digit] &#123;</span><br><span class="line">                        line[i][digit] = <span class="literal">true</span>;</span><br><span class="line">                        column[j][digit] = <span class="literal">true</span>;</span><br><span class="line">                        block[i/<span class="number">3</span>][j/<span class="number">3</span>][digit] = <span class="literal">true</span>;</span><br><span class="line">                        board[i][j] = (digit <span class="keyword">as</span> <span class="type">u8</span> + <span class="string">b&#x27;1&#x27;</span>) <span class="keyword">as</span> <span class="type">char</span>;</span><br><span class="line">                        <span class="keyword">if</span> <span class="title function_ invoke__">dfs</span>(board, space, line, column, block, pos + <span class="number">1</span>) &#123;</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        line[i][digit] = <span class="literal">false</span>;</span><br><span class="line">                        column[j][digit] = <span class="literal">false</span>;</span><br><span class="line">                        block[i/<span class="number">3</span>][j/<span class="number">3</span>][digit] = <span class="literal">false</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">    <span class="title function_ invoke__">dfs</span>(board, &amp;<span class="keyword">mut</span> space, &amp;<span class="keyword">mut</span> line, &amp;<span class="keyword">mut</span> column, &amp;<span class="keyword">mut</span> block, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[if(!self.define){let e,t={};const o=(o,n)=>(o=new URL(o+".js",n).href,t[o]||new Promise((t=>{if("document"in self){const e=document.createElement("script");e.src=o,e.onload=t,document.head.appendChild(e)}else e=o,importScripts(o),t()})).then((()=>{let e=t[o];if(!e)throw new Error(`Module ${o} didn’t register its module`);return e})));self.define=(n,r)=>{const s=e||("document"in self?document.currentScript.src:"")||location.href;if(t[s])return;let i={};const c=e=>o(e,s),l={module:{uri:s},exports:i,require:c};t[s]=Promise.all(n.map((e=>l[e]||c(e)))).then((e=>(r(...e),i)))}}define(["./workbox-0c72451b"],(function(e){"use strict";self.skipWaiting(),e.clientsClaim(),e.registerRoute(/^https:\/\/cdn\.example\.com\/.*/,new e.CacheFirst,"GET")}));//# sourceMappingURL=service-worker.js.map]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[define(["exports"],(function(t){"use strict";try{self["workbox:core:6.5.3"]&&_()}catch(t){}const e=(t,...e)=>{let s=t;return e.length>0&&(s+=` :: ${JSON.stringify(e)}`),s};class s extends Error{constructor(t,s){super(e(t,s)),this.name=t,this.details=s}}try{self["workbox:routing:6.5.3"]&&_()}catch(t){}const r=t=>t&&"object"==typeof t?t:{handle:t};class n{constructor(t,e,s="GET"){this.handler=r(e),this.match=t,this.method=s}setCatchHandler(t){this.catchHandler=r(t)}}class i extends n{constructor(t,e,s){super((({url:e})=>{const s=t.exec(e.href);if(s&&(e.origin===location.origin||0===s.index))return s.slice(1)}),e,s)}}class o{constructor(){this.t=new Map,this.i=new Map}get routes(){return this.t}addFetchListener(){self.addEventListener("fetch",(t=>{const{request:e}=t,s=this.handleRequest({request:e,event:t});s&&t.respondWith(s)}))}addCacheListener(){self.addEventListener("message",(t=>{if(t.data&&"CACHE_URLS"===t.data.type){const{payload:e}=t.data,s=Promise.all(e.urlsToCache.map((e=>{"string"==typeof e&&(e=[e]);const s=new Request(...e);return this.handleRequest({request:s,event:t})})));t.waitUntil(s),t.ports&&t.ports[0]&&s.then((()=>t.ports[0].postMessage(!0)))}}))}handleRequest({request:t,event:e}){const s=new URL(t.url,location.href);if(!s.protocol.startsWith("http"))return;const r=s.origin===location.origin,{params:n,route:i}=this.findMatchingRoute({event:e,request:t,sameOrigin:r,url:s});let o=i&&i.handler;const a=t.method;if(!o&&this.i.has(a)&&(o=this.i.get(a)),!o)return;let c;try{c=o.handle({url:s,request:t,event:e,params:n})}catch(t){c=Promise.reject(t)}const h=i&&i.catchHandler;return c instanceof Promise&&(this.o||h)&&(c=c.catch((async r=>{if(h)try{return await h.handle({url:s,request:t,event:e,params:n})}catch(t){t instanceof Error&&(r=t)}if(this.o)return this.o.handle({url:s,request:t,event:e});throw r}))),c}findMatchingRoute({url:t,sameOrigin:e,request:s,event:r}){const n=this.t.get(s.method)||[];for(const i of n){let n;const o=i.match({url:t,sameOrigin:e,request:s,event:r});if(o)return n=o,(Array.isArray(n)&&0===n.length||o.constructor===Object&&0===Object.keys(o).length||"boolean"==typeof o)&&(n=void 0),{route:i,params:n}}return{}}setDefaultHandler(t,e="GET"){this.i.set(e,r(t))}setCatchHandler(t){this.o=r(t)}registerRoute(t){this.t.has(t.method)||this.t.set(t.method,[]),this.t.get(t.method).push(t)}unregisterRoute(t){if(!this.t.has(t.method))throw new s("unregister-route-but-not-found-with-method",{method:t.method});const e=this.t.get(t.method).indexOf(t);if(!(e>-1))throw new s("unregister-route-route-not-registered");this.t.get(t.method).splice(e,1)}}let a;const c=()=>(a||(a=new o,a.addFetchListener(),a.addCacheListener()),a);const h={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:"undefined"!=typeof registration?registration.scope:""},u=t=>[h.prefix,t,h.suffix].filter((t=>t&&t.length>0)).join("-"),f=t=>t||u(h.runtime);function l(t,e){const s=new URL(t);for(const t of e)s.searchParams.delete(t);return s.href}class w{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}const d=new Set;try{self["workbox:strategies:6.5.3"]&&_()}catch(t){}function p(t){return"string"==typeof t?new Request(t):t}class y{constructor(t,e){this.h={},Object.assign(this,e),this.event=e.event,this.u=t,this.l=new w,this.p=[],this.v=[...t.plugins],this.m=new Map;for(const t of this.v)this.m.set(t,{});this.event.waitUntil(this.l.promise)}async fetch(t){const{event:e}=this;let r=p(t);if("navigate"===r.mode&&e instanceof FetchEvent&&e.preloadResponse){const t=await e.preloadResponse;if(t)return t}const n=this.hasCallback("fetchDidFail")?r.clone():null;try{for(const t of this.iterateCallbacks("requestWillFetch"))r=await t({request:r.clone(),event:e})}catch(t){if(t instanceof Error)throw new s("plugin-error-request-will-fetch",{thrownErrorMessage:t.message})}const i=r.clone();try{let t;t=await fetch(r,"navigate"===r.mode?void 0:this.u.fetchOptions);for(const s of this.iterateCallbacks("fetchDidSucceed"))t=await s({event:e,request:i,response:t});return t}catch(t){throw n&&await this.runCallbacks("fetchDidFail",{error:t,event:e,originalRequest:n.clone(),request:i.clone()}),t}}async fetchAndCachePut(t){const e=await this.fetch(t),s=e.clone();return this.waitUntil(this.cachePut(t,s)),e}async cacheMatch(t){const e=p(t);let s;const{cacheName:r,matchOptions:n}=this.u,i=await this.getCacheKey(e,"read"),o=Object.assign(Object.assign({},n),{cacheName:r});s=await caches.match(i,o);for(const t of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await t({cacheName:r,matchOptions:n,cachedResponse:s,request:i,event:this.event})||void 0;return s}async cachePut(t,e){const r=p(t);var n;await(n=0,new Promise((t=>setTimeout(t,n))));const i=await this.getCacheKey(r,"write");if(!e)throw new s("cache-put-with-no-response",{url:(o=i.url,new URL(String(o),location.href).href.replace(new RegExp(`^${location.origin}`),""))});var o;const a=await this.g(e);if(!a)return!1;const{cacheName:c,matchOptions:h}=this.u,u=await self.caches.open(c),f=this.hasCallback("cacheDidUpdate"),w=f?await async function(t,e,s,r){const n=l(e.url,s);if(e.url===n)return t.match(e,r);const i=Object.assign(Object.assign({},r),{ignoreSearch:!0}),o=await t.keys(e,i);for(const e of o)if(n===l(e.url,s))return t.match(e,r)}(u,i.clone(),["__WB_REVISION__"],h):null;try{await u.put(i,f?a.clone():a)}catch(t){if(t instanceof Error)throw"QuotaExceededError"===t.name&&await async function(){for(const t of d)await t()}(),t}for(const t of this.iterateCallbacks("cacheDidUpdate"))await t({cacheName:c,oldResponse:w,newResponse:a.clone(),request:i,event:this.event});return!0}async getCacheKey(t,e){const s=`${t.url} | ${e}`;if(!this.h[s]){let r=t;for(const t of this.iterateCallbacks("cacheKeyWillBeUsed"))r=p(await t({mode:e,request:r,event:this.event,params:this.params}));this.h[s]=r}return this.h[s]}hasCallback(t){for(const e of this.u.plugins)if(t in e)return!0;return!1}async runCallbacks(t,e){for(const s of this.iterateCallbacks(t))await s(e)}*iterateCallbacks(t){for(const e of this.u.plugins)if("function"==typeof e[t]){const s=this.m.get(e),r=r=>{const n=Object.assign(Object.assign({},r),{state:s});return e[t](n)};yield r}}waitUntil(t){return this.p.push(t),t}async doneWaiting(){let t;for(;t=this.p.shift();)await t}destroy(){this.l.resolve(null)}async g(t){let e=t,s=!1;for(const t of this.iterateCallbacks("cacheWillUpdate"))if(e=await t({request:this.request,response:e,event:this.event})||void 0,s=!0,!e)break;return s||e&&200!==e.status&&(e=void 0),e}}class v{constructor(t={}){this.cacheName=f(t.cacheName),this.plugins=t.plugins||[],this.fetchOptions=t.fetchOptions,this.matchOptions=t.matchOptions}handle(t){const[e]=this.handleAll(t);return e}handleAll(t){t instanceof FetchEvent&&(t={event:t,request:t.request});const e=t.event,s="string"==typeof t.request?new Request(t.request):t.request,r="params"in t?t.params:void 0,n=new y(this,{event:e,request:s,params:r}),i=this.q(n,s,e);return[i,this.R(i,n,s,e)]}async q(t,e,r){let n;await t.runCallbacks("handlerWillStart",{event:r,request:e});try{if(n=await this.O(e,t),!n||"error"===n.type)throw new s("no-response",{url:e.url})}catch(s){if(s instanceof Error)for(const i of t.iterateCallbacks("handlerDidError"))if(n=await i({error:s,event:r,request:e}),n)break;if(!n)throw s}for(const s of t.iterateCallbacks("handlerWillRespond"))n=await s({event:r,request:e,response:n});return n}async R(t,e,s,r){let n,i;try{n=await t}catch(i){}try{await e.runCallbacks("handlerDidRespond",{event:r,request:s,response:n}),await e.doneWaiting()}catch(t){t instanceof Error&&(i=t)}if(await e.runCallbacks("handlerDidComplete",{event:r,request:s,response:n,error:i}),e.destroy(),i)throw i}}t.CacheFirst=class extends v{async O(t,e){let r,n=await e.cacheMatch(t);if(!n)try{n=await e.fetchAndCachePut(t)}catch(t){t instanceof Error&&(r=t)}if(!n)throw new s("no-response",{url:t.url,error:r});return n}},t.clientsClaim=function(){self.addEventListener("activate",(()=>self.clients.claim()))},t.registerRoute=function(t,e,r){let o;if("string"==typeof t){const s=new URL(t,location.href);o=new n((({url:t})=>t.href===s.href),e,r)}else if(t instanceof RegExp)o=new i(t,e,r);else if("function"==typeof t)o=new n(t,e,r);else{if(!(t instanceof n))throw new s("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});o=t}return c().registerRoute(o),o}}));//# sourceMappingURL=workbox-0c72451b.js.map]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nvim配置系列(二)：neovim的配置</title>
      <link href="/post/cec58763.html"/>
      <url>/post/cec58763.html</url>
      
        <content type="html"><![CDATA[<h2 id="neovim的配置">neovim的配置</h2><a class="btn-beautify orange block right outline larger" href="/categories/neovim/"   title="当前neovim系列，neovim的配置"><i class="far fa-hand-point-right"></i><span>当前neovim系列，neovim的配置</span></a><h1 id="neovim的配置-2">neovim的配置</h1><hr><h2 id="neovim的配置文件夹">neovim的配置文件夹</h2><ul><li>前提，使用<mark class="hl-label red">linux系统</mark> 或者<mark class="hl-label default">wsl子系统red</mark> ,并且有足够版本的neovim</li><li>一般来说，如果想要升级到最新的neovim，linux内核需要更新；一些发行版本是可以满足这个条件的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.config/nvim</span><br><span class="line">nvim ~/.config/nvim/init.vim</span><br></pre></td></tr></table></figure><ul><li>相较于vim，neovim的配置文件略有不同，同时，在home的用户下面创建新的neovim配置文件，会<mark class="hl-label blue">覆盖</mark> 原来的文件夹。</li></ul><hr><h2 id="neovim的插件配置方法-vim-plug">neovim的插件配置方法:vim-plug</h2><ul><li>相较于传统的vundle，vim-plug现在还有人在进行维护，用它来管理vim插件较为方便。</li><li>vimplug插件可以在<a href="https://vimawesome.com/">vimawesome</a>中找到。</li></ul><h3 id="vim-plug的安装">vim-plug的安装</h3><ol><li>首先安装前提，安装neovim，安装git，安装curl</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S neovim</span><br><span class="line">sudo pacman -S git curl</span><br></pre></td></tr></table></figure><ol start="2"><li>进入github网站，下载<a href="https://github.com/junegunn/vim-plug">vim-plug插件管理器</a>。</li><li>在github页面中，通过curl方法下载vim-plug:</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.var/app/io.neovim.nvim/data/nvim/site/autoload/plug.vim --create-dirs \</span><br><span class="line">    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><h3 id="vim-plug的使用方法">vim-plug的使用方法</h3><ul><li>进入vim配置文件中，<mark class="hl-label yellow">neovim的配置文件夹</mark> 这一步骤中有明确的表述。</li><li>使用我们新的neovim打开这个文件夹：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvim ~/.config/nvim/init.vim</span><br></pre></td></tr></table></figure><ul><li>在这个文件末尾添加:</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line"></span><br><span class="line">Plug <span class="string">&#x27;你想要的vim插件&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><ul><li>安装完成之后保存，然后用neovim打开任意文档，使用<mark class="hl-label default">:</mark> ，然后输入：</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PlugInstall</span><br></pre></td></tr></table></figure><ul><li>等待即可完成安装，但是如果网络不好，就絮要自己添加路径了。</li></ul><hr><h2 id="coc-nvim配置">coc.nvim配置</h2><div class="flink"><div class="flink-name">coc.nvim</div><div class="flink-desc">github中的一些插件</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://github.com/neoclide/coc.nvim/" title="coc.nvim" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://pic4.zhimg.com/v2-727b3bea45122a2b1fae138279b35b89_720w.jpg?source=172ae18b" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="coc.nvim" />              </div>              <div class="flink-item-name">coc.nvim</div>               <div class="flink-item-desc" title="coc插件">coc插件</div>            </a>          </div></div></div><ul><li><a href="https://github.com/neoclide/coc.nvim">coc官方文档</a>,这里有比较全面的coc命令详解。</li></ul><h3 id="coc-nvim安装">coc.nvim安装</h3><ul><li><a href="https://vimawesome.com/plugin/coc-nvim">coc</a>是一个可以替代<a href="https://vimawesome.com/plugin/youcompleteme">youcompleteme</a>的补全插件，当然，如果你可以直接访问github，那么可以直接安装<mark class="hl-label green">youcompleteme</mark> </li><li><mark class="hl-label blue">coc.nvim</mark> 有自己的插件市场，他是一个可以安装自己的插件的插件，^-^有点套娃了,但是他确实很强大。</li><li>安装方法，直接在neovim配置文件夹中使用vim-plug进行安装：</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line">Plug <span class="string">&#x27;neoclide/coc.nvim&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><ul><li>这一步安装完成之后，还需要进行配置你所需要的程序语言类型，才能为你提供相应的插件补全。</li><li>安装方法:</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:CocInstall coc-json</span><br></pre></td></tr></table></figure><h3 id="coc现存扩展">coc现存扩展</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:CocList extensions</span><br></pre></td></tr></table></figure><ul><li>通过这个命令可以查看已经安装的插件。</li><li>查看是否存在某个函数：</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:<span class="keyword">echo</span> <span class="built_in">exists</span>(<span class="string">&#x27;*complete_info&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="coc自身插件商店">coc自身插件商店</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:CocList marketplace</span><br></pre></td></tr></table></figure><h3 id="coc其他命令">coc其他命令</h3><ul><li>coc自身本身的插件指令，这一部分可以直接查看coc官方文档。</li></ul><h3 id="coc扩展帮助">coc扩展帮助</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:h 插件名称</span><br></pre></td></tr></table></figure><hr><h3 id="通过init-vim来管理coc-nvim">通过init.vim来管理coc.nvim</h3><ul><li>直接对照官方文档,在init.vim中预留位置来进行配置。</li></ul><h3 id="coc-settings-json配置coc参数">coc-settings.json配置coc参数</h3><blockquote><p>官方的描述是这样的：The user configuration is named as coc-settings.json and placed inside<br>the folder $XDG_CONFIG_HOME/nvim or $HOME/.config/nvim by default (or<br>$HOME/.vim for vim). Run the command :CocConfig to open your user<br>configuration file.</p></blockquote><ul><li>打开方式是：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvim ~/.config/nvim/coc-setting.json</span><br></pre></td></tr></table></figure><p>或者使用：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:CocConfig</span><br></pre></td></tr></table></figure><hr><h3 id="coc-snippets">coc-snippets</h3><ul><li>关于这部分比较麻烦，可以查看<a href="https://www.bilibili.com/video/BV1Ka4y1E7AM/?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click&amp;vd_source=d02dd0fde21b411f687d002e2c338b20">大佬的视频</a></li></ul><hr><h2 id="NerdTree">NerdTree</h2><ul><li>关于NerdTree，在github中可以找到比较完善的介绍。</li><li>我这里仅仅设置了使用F4进行设置打开和关闭。</li><li>安装方法也是在vim-plug中进行安装。</li></ul><hr><h2 id="目前配置">目前配置</h2><ul><li><img src="/myimg/nvim.png" alt=""></li><li>最后是我当前的配置，有一些是关于主题设置，还有其他小插件，喜欢的可以直接拿去</li><li>操作步骤在上一篇文章中有过解释。</li><li>建议不要复制关于tab的一些操作，可以修改为其他按键，因为绑定以后就只能使用空格打制表符。</li></ul><h3 id="init-nvim">init.nvim</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:loaded_perl_provider</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;use the jsonc as configure file for coc.nvim</span></span><br><span class="line"><span class="keyword">autocmd</span> FileType json <span class="keyword">syntax</span> <span class="keyword">match</span> Comment +\/\/.\+$+</span><br><span class="line"><span class="comment">&quot;##########################################################</span></span><br><span class="line"><span class="comment">&quot;##########################################################</span></span><br><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;use the dart skim</span></span><br><span class="line">Plug <span class="string">&#x27;dart-lang/dart-vim-plugin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;use the vim-snippets</span></span><br><span class="line">Plug <span class="string">&#x27;honza/vim-snippets&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;use the complete&quot;</span>[,(,&#123;<span class="comment">&quot; and delete double</span></span><br><span class="line">Plug <span class="string">&#x27;jiangmiao/auto-pairs&#x27;</span></span><br><span class="line"><span class="comment">&quot;use the theme tools</span></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line">Plug <span class="string">&#x27;vim-airline/vim-airline-themes&#x27;</span></span><br><span class="line"><span class="comment">&quot;use the theme tools</span></span><br><span class="line">Plug <span class="string">&#x27;morhetz/gruvbox&#x27;</span></span><br><span class="line"><span class="comment">&quot;use the completion tools</span></span><br><span class="line">Plug <span class="string">&#x27;neoclide/coc.nvim&#x27;</span>, &#123;<span class="string">&#x27;branch&#x27;</span>: <span class="string">&#x27;release&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;use NerdTree</span></span><br><span class="line">Plug <span class="string">&#x27;preservim/nerdtree&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;##########################################################</span></span><br><span class="line"><span class="comment">&quot;use the theme</span></span><br><span class="line"><span class="keyword">set</span> bg=light</span><br><span class="line"><span class="comment">&quot; colorscheme one</span></span><br><span class="line"><span class="keyword">autocmd</span> vimenter * ++nested <span class="keyword">colorscheme</span> gruvbox</span><br><span class="line"><span class="comment">&quot;###########################################################</span></span><br><span class="line"><span class="comment">&quot;use vim-airline_theme</span></span><br><span class="line"><span class="keyword">set</span> laststatus=<span class="number">2</span>  <span class="comment">&quot;永远显示状态栏</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_powerline_fonts</span> = <span class="number">1</span>  <span class="comment">&quot; 支持 powerline 字体</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_solarized_bg</span>=<span class="string">&#x27;light&#x27;</span></span><br><span class="line"><span class="comment">&quot; solarized light,other theme are in Screenshots,first</span></span><br><span class="line"><span class="comment">&quot; use the :ArilineTheme solarized</span></span><br><span class="line"><span class="keyword">if</span> !exists(<span class="string">&#x27;g:airline_symbols&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_symbols</span> = &#123;&#125;</span><br><span class="line"><span class="keyword">endif</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_left_sep</span> = <span class="string">&#x27;▶&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_left_alt_sep</span> = <span class="string">&#x27;❯&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_right_sep</span> = <span class="string">&#x27;◀&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_right_alt_sep</span> = <span class="string">&#x27;❮&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_symbols</span>.linenr = <span class="string">&#x27;¶&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_symbols</span>.branch = <span class="string">&#x27;⎇&#x27;</span></span><br><span class="line"><span class="comment">&quot;###########################################################</span></span><br><span class="line"><span class="comment">&quot;-------------------------------------------------------</span></span><br><span class="line"><span class="comment">&quot;##########################################################</span></span><br><span class="line"><span class="comment">&quot;use the auto-pairs</span></span><br><span class="line"><span class="keyword">au</span> Filetype FILETYPE <span class="keyword">let</span> <span class="variable">b:AutoPairs</span> = &#123;<span class="string">&quot;(&quot;</span>: <span class="string">&quot;)&quot;</span>&#125;</span><br><span class="line"><span class="keyword">au</span> FileType php      <span class="keyword">let</span> <span class="variable">b:AutoPairs</span> = AutoPairsDefine(&#123;<span class="string">&#x27;&lt;?&#x27;</span> : <span class="string">&#x27;?&gt;&#x27;</span>, <span class="string">&#x27;&lt;?php&#x27;</span>: <span class="string">&#x27;?&gt;&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;###########################################################</span></span><br><span class="line"><span class="comment">&quot;</span></span><br><span class="line"><span class="comment">&quot;use NerdTree </span></span><br><span class="line"><span class="keyword">map</span> <span class="symbol">&lt;F4&gt;</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="comment">&quot;###########################################################</span></span><br><span class="line"><span class="comment">&quot;coc.nvim</span></span><br><span class="line"><span class="comment">&quot;coc-vimlsp is a tool to use in vim,not_like </span></span><br><span class="line"><span class="comment">&quot;other language</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:coc_global_extensions</span> = [</span><br><span class="line">\<span class="string">&#x27;coc-rust-analyzer&#x27;</span>,</span><br><span class="line">\<span class="string">&#x27;coc-rome&#x27;</span>,</span><br><span class="line">\<span class="string">&#x27;coc-python&#x27;</span>,</span><br><span class="line">\<span class="string">&#x27;coc-clangd&#x27;</span>,</span><br><span class="line">\<span class="string">&#x27;coc-marketplace&#x27;</span>,</span><br><span class="line">\<span class="string">&#x27;coc-vimlsp&#x27;</span>,</span><br><span class="line">\<span class="string">&#x27;coc-json&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;set cache</span></span><br><span class="line"><span class="keyword">set</span> hidden</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;set updatetime</span></span><br><span class="line"><span class="keyword">set</span> updatetime=<span class="number">100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;set merge signcolumn</span></span><br><span class="line"><span class="keyword">set</span> signcolumn=<span class="keyword">number</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;set don&#x27;t pass message to |ins-completion-menu|</span></span><br><span class="line"><span class="keyword">set</span> shortmess+=<span class="keyword">c</span></span><br><span class="line"><span class="comment">&quot;set tab can do the completion</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;TAB&gt;</span></span><br><span class="line">      \ <span class="built_in">pumvisible</span>() ? <span class="string">&quot;\&lt;C-n&gt;&quot;</span> :</span><br><span class="line">      \ <span class="symbol">&lt;SID&gt;</span>check_back_space() ? <span class="string">&quot;\TAB&quot;</span> :</span><br><span class="line">      \ coc#refresh()</span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span><span class="symbol">&lt;S-TAB&gt;</span> <span class="built_in">pumvisible</span>() ? <span class="string">&quot;\&lt;C-p&gt;&quot;</span> : <span class="string">&quot;\&lt;C-h&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function!</span> <span class="title">s</span>:check_back_space<span class="params">()</span> abort</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">col</span> = <span class="keyword">col</span>(<span class="string">&#x27;.&#x27;</span>) - <span class="number">1</span></span><br><span class="line"><span class="keyword">return</span> !col || <span class="built_in">getline</span>(<span class="string">&#x27;.&#x27;</span>)[<span class="keyword">col</span> - <span class="number">1</span>] =~# <span class="string">&#x27;\s&#x27;</span></span><br><span class="line"><span class="keyword">endfunction</span></span><br><span class="line"><span class="comment">&quot;set trigger can open the completion,only use in insert</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;silent&gt;</span><span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;c-l&gt;</span> coc#refresh()</span><br><span class="line"><span class="comment">&quot;set enter to complete the completion</span></span><br><span class="line"><span class="keyword">inoremap</span> <span class="symbol">&lt;expr&gt;</span> <span class="symbol">&lt;cr&gt;</span> complete_info()[<span class="string">&quot;selected&quot;</span>] != <span class="string">&quot;-1&quot;</span> ? <span class="string">&quot;\&lt;C-y&gt;&quot;</span> :<span class="string">&quot;\&lt;C-g&gt;u\&lt;CR&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;use &quot;</span>g[<span class="string">&quot; and &quot;</span>]g<span class="comment">&quot;check the error of code</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> [g <span class="symbol">&lt;Plug&gt;</span>(coc-diagnostic-<span class="keyword">prev</span>)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> ]g <span class="symbol">&lt;Plug&gt;</span>(coc-diagnostic-<span class="keyword">next</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">&quot; GoTo code navigation.use gd to navigate and use ctrl+o back</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> gd <span class="symbol">&lt;Plug&gt;</span>(coc-definition)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> gy <span class="symbol">&lt;Plug&gt;</span>(coc-<span class="built_in">type</span>-definition)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> gi <span class="symbol">&lt;Plug&gt;</span>(coc-implementation)</span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;silent&gt;</span> <span class="keyword">gr</span> <span class="symbol">&lt;Plug&gt;</span>(coc-references)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;use &quot;</span>\<span class="comment">&quot;+h to find the document of functions</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;silent&gt;</span> <span class="symbol">&lt;LEADER&gt;</span>h :<span class="keyword">call</span> <span class="symbol">&lt;SID&gt;</span>show_documentation()<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&quot;use rename fuction</span></span><br><span class="line"><span class="keyword">nmap</span> <span class="symbol">&lt;leader&gt;</span>r <span class="symbol">&lt;Plug&gt;</span>(coc-<span class="built_in">rename</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="coc-setting-json">coc-setting.json</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;clangd.path&quot;</span>: <span class="string">&quot;~/.config/coc/extensions/coc-clangd-data/install/15.0.3/clangd_15.0.3/bin/clangd&quot;</span>,</span><br><span class="line"><span class="string">&quot;coc.preferences.extensionUpdateCheck&quot;</span>: <span class="string">&quot;daily&quot;</span>,</span><br><span class="line"><span class="string">&quot;suggest.noselect&quot;</span>: true,</span><br><span class="line"><span class="string">&quot;suggest.enablePreselect&quot;</span>: false,</span><br><span class="line"><span class="string">&quot;codeLens.enable&quot;</span>: true,</span><br><span class="line"><span class="string">&quot;coc.preferences.formatOnSaveFiletypes&quot;</span>: [</span><br><span class="line"><span class="string">&quot;json&quot;</span>,</span><br><span class="line"><span class="string">&quot;rust-analyzer&quot;</span>,</span><br><span class="line"><span class="string">&quot;rust&quot;</span>,</span><br><span class="line"><span class="string">&quot;clangd&quot;</span></span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;suggest.completionItemKindLabels&quot;</span>: &#123;</span><br><span class="line"><span class="string">&quot;class&quot;</span>: <span class="string">&quot;\uf0e8&quot;</span>,</span><br><span class="line"><span class="string">&quot;color&quot;</span>: <span class="string">&quot;\ue22b&quot;</span>,</span><br><span class="line"><span class="string">&quot;constant&quot;</span>: <span class="string">&quot;\uf8fe&quot;</span>,</span><br><span class="line"><span class="string">&quot;default&quot;</span>: <span class="string">&quot;\uf29c&quot;</span>,</span><br><span class="line"><span class="string">&quot;enum&quot;</span>: <span class="string">&quot;\uf435&quot;</span>,</span><br><span class="line"><span class="string">&quot;enumMember&quot;</span>: <span class="string">&quot;\uf02b&quot;</span>,</span><br><span class="line"><span class="string">&quot;event&quot;</span>: <span class="string">&quot;\ufacd&quot;</span>,</span><br><span class="line"><span class="string">&quot;field&quot;</span>: <span class="string">&quot;\uf93d&quot;</span>,</span><br><span class="line"><span class="string">&quot;file&quot;</span>: <span class="string">&quot;\uf723&quot;</span>,</span><br><span class="line"><span class="string">&quot;folder&quot;</span>: <span class="string">&quot;\uf115&quot;</span>,</span><br><span class="line"><span class="string">&quot;function&quot;</span>: <span class="string">&quot;\u0192&quot;</span>,</span><br><span class="line"><span class="string">&quot;interface&quot;</span>: <span class="string">&quot;\uf417&quot;</span>,</span><br><span class="line"><span class="string">&quot;keyword&quot;</span>: <span class="string">&quot;\uf1de&quot;</span>,</span><br><span class="line"><span class="string">&quot;method&quot;</span>: <span class="string">&quot;\uf6a6&quot;</span>,</span><br><span class="line"><span class="string">&quot;module&quot;</span>: <span class="string">&quot;\uf40d&quot;</span>,</span><br><span class="line"><span class="string">&quot;operator&quot;</span>: <span class="string">&quot;\uf915&quot;</span>,</span><br><span class="line"><span class="string">&quot;property&quot;</span>: <span class="string">&quot;\ue624&quot;</span>,</span><br><span class="line"><span class="string">&quot;reference&quot;</span>: <span class="string">&quot;\ufa46&quot;</span>,</span><br><span class="line"><span class="string">&quot;snippet&quot;</span>: <span class="string">&quot;\ue60b&quot;</span>,</span><br><span class="line"><span class="string">&quot;struct&quot;</span>: <span class="string">&quot;\ufb44&quot;</span>,</span><br><span class="line"><span class="string">&quot;text&quot;</span>: <span class="string">&quot;\ue612&quot;</span>,</span><br><span class="line"><span class="string">&quot;typeParameter&quot;</span>: <span class="string">&quot;\uf728&quot;</span>,</span><br><span class="line"><span class="string">&quot;unit&quot;</span>: <span class="string">&quot;\uf475&quot;</span>,</span><br><span class="line"><span class="string">&quot;value&quot;</span>: <span class="string">&quot;\uf89f&quot;</span>,</span><br><span class="line"><span class="string">&quot;variable&quot;</span>: <span class="string">&quot;\ue71b&quot;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">&quot;diagnostic.errorSign&quot;</span>: <span class="string">&quot;\uf467&quot;</span>,</span><br><span class="line"><span class="string">&quot;diagnostic.warningSign&quot;</span>: <span class="string">&quot;\uf071&quot;</span>,</span><br><span class="line"><span class="string">&quot;diagnostic.infoSign&quot;</span>: <span class="string">&quot;\uf129&quot;</span>,</span><br><span class="line"><span class="string">&quot;diagnostic.hintSign&quot;</span>: <span class="string">&quot;\uf864&quot;</span>,</span><br><span class="line"><span class="string">&quot;diagnostic.displayByAle&quot;</span>: false,</span><br><span class="line"><span class="string">&quot;diagnostic.refreshOnInsertMode&quot;</span>: false,</span><br><span class="line"><span class="string">&quot;diagnostic.checkCurrentLine&quot;</span>: true,</span><br><span class="line"><span class="string">&quot;diagnostic.virtualTextPrefix&quot;</span>: <span class="string">&quot; ❯❯❯ &quot;</span>,</span><br><span class="line"><span class="string">&quot;diagnostic.virtualText&quot;</span>: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> neovim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust21-集合类型</title>
      <link href="/post/97eea1fa.html"/>
      <url>/post/97eea1fa.html</url>
      
        <content type="html"><![CDATA[<h1 id="Rust集合类型">Rust集合类型</h1><div class="note info modern"><p>Rust集合类型是由标量类型和复合类型构造的,分为线性和非线性。<br>线性集合类型有: <mark class="hl-label blue">String</mark> 、<mark class="hl-label blue">Vec</mark> 、<mark class="hl-label blue">VecDeque</mark> 、<mark class="hl-label blue">LinkedList</mark> 。<br>非线性集合类型有：<mark class="hl-label blue">BTreeMap</mark> 、<mark class="hl-label blue">Hashset</mark> 、<mark class="hl-label blue">BTreeSet</mark> 、<mark class="hl-label blue">BinaryHeap</mark> 、<mark class="hl-label blue">HashMap</mark> 。</p></div>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客配置hexo-admin实现实时编写</title>
      <link href="/post/24cfb02c.html"/>
      <url>/post/24cfb02c.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo博客实现实时编写">hexo博客实现实时编写</h1><ul><li>hexo中有一个插件叫作hexo-admin,在你的博客目录之下安装这个插件，</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-admin</span><br></pre></td></tr></table></figure><ul><li>在hexo博客目录中使用<code>hexo s</code>进行博客本地部署，使用</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">localhost</span>:<span class="number">4000</span>/admin</span><br></pre></td></tr></table></figure><p>即可修改博客。</p><ul><li>建议不要修改settings,自己添加博客的tag和categories即可，这个hexo-admin插件不会上传到云端。</li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客添加数学公式</title>
      <link href="/post/52c23b86.html"/>
      <url>/post/52c23b86.html</url>
      
        <content type="html"><![CDATA[<h2 id="hexo博客添加数学公式">hexo博客添加数学公式</h2><p>本人试过butterfly官方文档中的katex操作，但以博客生成报错结尾。😭,本教程适用于butterfly主题，请不要乱操作搞坏博客。<br>本教程根据<a href="https://www.nickxu.top/2022/04/17/Hexo-Butterfly-%E5%BB%BA%E7%AB%99%E6%8C%87%E5%8D%97%EF%BC%88%E5%85%AB%EF%BC%89%E4%BD%BF%E7%94%A8-KaTeX-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/">NX的博客</a>和<a href="https://butterfly.js.org/posts/ceeb73f/">butterfly官方博客</a>完成。</p><p>按照下面方法可能有用</p><h3 id="卸载原始文档中的render引擎-并安装新引擎">卸载原始文档中的render引擎,并安装新引擎</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save </span><br><span class="line">npm un hexo-renderer-kramed --save </span><br><span class="line"></span><br><span class="line">npm i hexo-renderer-markdown-it --save</span><br><span class="line">npm install katex @renbaoshuo/markdown-it-katex</span><br><span class="line">npm i hexo-renderer-markdown-it-katex</span><br></pre></td></tr></table></figure><h3 id="在hexo配置文件-config-yml中设置如下">在hexo配置文件<code>_config.yml</code>中设置如下</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="在hexo博客的主题配置文件中打开katex">在hexo博客的主题配置文件中打开katex</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">katex:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># true 表示每一頁都加載katex.js</span></span><br><span class="line">  <span class="comment"># false 需要時加載，須在使用的Markdown Front-matter 加上 katex: true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hide_scrollbar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="示例">示例</h3><p>$$F=ma$$</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pythondoc</title>
      <link href="/post/625fe2b6.html"/>
      <url>/post/625fe2b6.html</url>
      
        <content type="html"><![CDATA[<h2 id="Pythondoc">Pythondoc</h2><p>网络上有许多Python的文档说明,其中最权威的仍然是pythondoc,那么，在命令行<br>环境中如何使用pythondoc呢，这就需要你运行以下命令即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m pythondoc random <span class="comment">#需要查看的模块</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch遇到prepare</title>
      <link href="/post/8a138f6.html"/>
      <url>/post/8a138f6.html</url>
      
        <content type="html"><![CDATA[<h2 id="Arch遇到prepare">Arch遇到prepare</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syu base-devel</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间序列分析差分方程</title>
      <link href="/post/d4477ab4.html"/>
      <url>/post/d4477ab4.html</url>
      
        <content type="html"><![CDATA[<h1 id="时间序列分析差分方程的整体框架">时间序列分析差分方程的整体框架</h1><p><img src="/myimg/%E5%B7%AE%E5%88%86%E6%96%B9%E7%A8%8B.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> TimeSeries </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TimeSeries </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust库整理</title>
      <link href="/post/3942a23e.html"/>
      <url>/post/3942a23e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Rust库整理">Rust库整理</h1><div class="note info modern"><p>本文档是用来整理作者所遇到的Rust官方库、第三方库和这些库的作用，旨在学习和帮助其他正在使用Rust的小伙伴。</p><p>作者会根据自己编写代码的实际情况,将遇到的库列出来,这个更新过程是不定期的。</p></div><h2 id="Anyhow库">Anyhow库</h2><p>anyhow库是以一种更友善的方式输出错误命令的第三方库。</p><a class="btn-beautify blue larger" href="https://docs.rs/anyhow/latest/anyhow/"   title="anyhow的官方文档"><i class="far fa-hand-point-right"></i><span>anyhow的官方文档</span></a><h2 id="Clap库">Clap库</h2><p>如果你正在使用rust编辑命令行程序，那么clap库是你不可多得的好帮手。它能够帮助你分割开每个命令行参数、省略命令并且能够撰写优秀的帮助文档</p><a class="btn-beautify green larger" href="https://docs.rs/clap/latest/clap/"   title="clap的官方文档"><i class="far fa-hand-point-right"></i><span>clap的官方文档</span></a>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust在arch中运行plotters的先决条件</title>
      <link href="/post/b3d49c39.html"/>
      <url>/post/b3d49c39.html</url>
      
        <content type="html"><![CDATA[<h1 id="先决条件">先决条件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S cmake make git fontconfig pkgconf glibc llvm clang freetype2 expat</span><br></pre></td></tr></table></figure><h1 id="在cargo工作环境中添加images文件夹">在cargo工作环境中添加images文件夹</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /cargo工作环境</span></span><br><span class="line"><span class="built_in">mkdir</span> images</span><br><span class="line">cargo run</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git2.git的下载和简单使用</title>
      <link href="/post/aae27c1a.html"/>
      <url>/post/aae27c1a.html</url>
      
        <content type="html"><![CDATA[<h2 id="git的下载">git的下载</h2><p><a href="https://git-scm.com/">😘git官网地址链接😘</a><br>使用arch linux可以直接使用以下命令安装:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S git</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git1.简单介绍</title>
      <link href="/post/19a06495.html"/>
      <url>/post/19a06495.html</url>
      
        <content type="html"><![CDATA[<h1 id="版本控制系统">版本控制系统</h1><p>git是一种版本控制系统，当你撤回版本，发布新版本时会有很大的便捷性和逻辑性</p><h2 id="VCS版本控制系统">VCS版本控制系统</h2><h3 id="工作方式">工作方式</h3><div class="note info modern"><p>一个团队中有三个人，这三个人需要在服务器端的git仓库中提交代码，</p><ol><li>首先由主要负责人搭建框架，然后在框架中修改，</li><li>其余两个人分别完成部分项目，三个人并行开发。</li><li>三个人提交的方式都是:<br>(1) 从中央仓库提取代码<br>(2) 写完功能提交仓库<br>(3) 其他人提交到中央仓库的内容及时保存</li></ol></div><h2 id="DVCS">DVCS</h2><div class="note info modern"><p>git应用这种控制系统<br>每个成员不仅仅在服务器端有仓库,同时需要在自己的机器上有本地仓库，本地仓库中包含<br>了众多历史版本，你需要在本地仓库中交互，而不需要直接在中央仓库中交互。<br>工作方式:<br>(1) 工程师将框架搭建，然后将代码提交到本地仓库.<br>(2) 工程师在服务器中创建中央仓库,将本地仓库中内容提交到中央仓库<br>(3) 其他人将中央仓库中内容复制到本地仓库<br>(4) 每个人独立开发部分内容，完成后，在本地仓库中提交到中央仓库<br>(5) 其他人将新提交的内容复制到本地仓库完成合并</p></div><h2 id="区别">区别</h2><h3 id="DVCS的优点">DVCS的优点:</h3><ol><li>DVCS的操作可以在本地进行，所以速度更快，无需联网也似地提交代码更加方便</li><li>可以分步提交，而不是直接提交很多代码，导致难以回溯</li></ol><h3 id="DVCS的缺点">DVCS的缺点</h3><ol><li>由于每个机器有完整本地仓库，所以初次获取时间较长</li><li>本地占用内存较大</li></ol><h2 id="使用场景">使用场景</h2><p>DVCS一般使用在项目大多为文本代码的时候使用DVCS，而在进行游戏开发(存在大量的影音视频和建模)，<br>所以经常使用VCS</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-42.宏</title>
      <link href="/post/689729f6.html"/>
      <url>/post/689729f6.html</url>
      
        <content type="html"><![CDATA[<h2 id="Rust中的宏">Rust中的宏</h2><div class="note info modern"><ol><li><p>Rust中的宏主要有两种，一种是使用macro_rules!的声明宏，一种是过程宏，过程宏又<br>分成三种:<br>(1) 自定义宏#[derive],在结构体、枚举等上指定通过derive属性添加代码<br>(2) 类属性宏，定义可以用于任意项的自定义属性<br>(3) 类函数宏,看起来像是函数，但是作用于作为参数传递的Token</p></li><li><p>宏和函数<br>(1) 宏是一种为写其他代码而写代码的方式，对于减少大量编写代码和维护代码非常有用<br>(2) 一个函数标签必须声明函数参数的个数和类型，宏只接受可变参数<br>(3) 宏的定义比函数定义更加复杂<br>(4) 调用宏之前，必须定义并且将其引入作用域，函数但是可以在任何地方调用和定义</p></li></ol></div><h2 id="声明宏">声明宏</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br></pre></td></tr></table></figure><h3 id="创建自己的声明宏">创建自己的声明宏</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> learn</span><br><span class="line"><span class="built_in">cd</span> learn</span><br><span class="line">vim Cargo.toml</span><br></pre></td></tr></table></figure><ul><li>之后，进行设置</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//learn/Cargo.toml</span></span><br><span class="line">[workspace]</span><br><span class="line">members = [</span><br><span class="line">  <span class="string">&quot;mac&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>创建mac lib</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cargo new mac --lib</span><br><span class="line"><span class="built_in">cd</span> mac</span><br><span class="line">vim src/lib.rs</span><br></pre></td></tr></table></figure><ul><li>设置mac lib</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[macro_export]</span></span><br><span class="line"><span class="built_in">macro_rules!</span> my_vec &#123;<span class="comment">//*代表对这个表达式匹配有0个或者多个,模仿vec!</span></span><br><span class="line">  ($($x: expr), *) =&gt; &#123;</span><br><span class="line">    &#123;<span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">temp_vec</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">      $(</span><br><span class="line">          temp_vec.<span class="title function_ invoke__">push</span>($x);</span><br><span class="line">       )*<span class="comment">//使用$()*这个语法来捕捉0个或者多个相同的语法</span></span><br><span class="line">        temp_vec</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建main</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /learn</span></span><br><span class="line">cargo new main</span><br><span class="line"><span class="built_in">cd</span> main</span><br><span class="line">vim Cargo.toml</span><br></pre></td></tr></table></figure><ul><li>修改main</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[dependencies] </span><br><span class="line">mac = &#123;path = <span class="string">&quot;../mac&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>写主函数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim src/main.rs</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># learn/main/src/main.rs</span><br><span class="line"><span class="keyword">use</span> mac;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span> = mac::my_vec![<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="comment">//等价于</span></span><br><span class="line">    <span class="comment">//let mut temp_vec = Vec::new();</span></span><br><span class="line">    <span class="comment">//temp_vec.push(1);</span></span><br><span class="line">    <span class="comment">//temp_vec.push(2);</span></span><br><span class="line">    <span class="comment">//temp_vec.push(3);</span></span><br><span class="line">    <span class="comment">//temp_vec</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;v = &#123;:?&#125;&quot;</span>,v);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="过程宏">过程宏</h2><div class="note info modern"><p>过程宏接受Rust代码作为输入，在代码上操作，产生另一些代码作为输出，非像声明宏那样<br>匹配对应的模式，然后以另一部分代码替换当前代码</p><p>定义过程宏函数接受一个TokenStream作为输入并产生一个TokenStream作为输出，也就是宏<br>的核心，宏所处理的源代码组成了输入TokenStream，同时宏生成的代码是输出TokenStream,<br>如下:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> proc_macro;</span><br><span class="line"><span class="meta">#[some_attribute]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">some_name</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span> <span class="comment">//过程宏当中的derive宏,fmt::Display trait</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    a: <span class="type">i32</span>,</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h3 id="自定义derive宏">自定义derive宏</h3><div class="note warning modern"><p>名称必须为some some_derive这种,与例子相同</p></div><ul><li>首先创建hello_macro</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cargo new hello_macro --lib</span><br><span class="line"><span class="built_in">cd</span> hello_macro</span><br><span class="line">vim src/lib.rs</span><br></pre></td></tr></table></figure><ul><li>之后进行编辑</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">HelloMacro</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">hello_macro</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>之后在这个文件夹中新建</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置:hello_macro/</span></span><br><span class="line">cargo new hello_macro_derive --lib</span><br><span class="line"><span class="built_in">cd</span> hello_macro_derive</span><br><span class="line">vim Cargo.toml</span><br></pre></td></tr></table></figure><ul><li>填写:</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[lib]</span><br><span class="line">proc-<span class="keyword">macro</span> = <span class="literal">true</span></span><br><span class="line">[dependencies]</span><br><span class="line">syn = <span class="string">&quot;0.14.4&quot;</span></span><br><span class="line">quote = <span class="string">&quot;0.6.3&quot;</span></span><br></pre></td></tr></table></figure><ul><li>实现代码填写</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> proc_macro;</span><br><span class="line"><span class="keyword">use</span> crate::proc_macro::TokenStream;</span><br><span class="line"><span class="keyword">use</span> quote::quote;</span><br><span class="line"><span class="keyword">use</span> syn;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">impl_hello_macro</span>（ast: &amp;syn::DeriveInput) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">name</span> = &amp;ast.indent;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">gen</span> = quote! &#123;</span><br><span class="line">        <span class="keyword">impl</span> <span class="title class_">HelloMacro</span> <span class="keyword">for</span> #name &#123;</span><br><span class="line">            <span class="keyword">fn</span> <span class="title function_">hello_macro</span>() &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;Hello,in my name is &#123;&#125;&quot;</span>,<span class="built_in">stringify!</span>(#name));</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      gen.<span class="title function_ invoke__">into</span>()</span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#[proc_macro_derive(HelloMacro)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">hello_macro_derive</span>(input: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ast</span> = syn::<span class="title function_ invoke__">parse</span>(input).<span class="title function_ invoke__">unwrap</span>();<span class="comment">//将其解析成结构体,叫做DeriveInput</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="title function_ invoke__">impl_hello_macro</span>(&amp;ast);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>使用宏的代码</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ..</span><br><span class="line"><span class="comment"># /</span></span><br><span class="line">cargo new main</span><br><span class="line"><span class="built_in">cd</span> main</span><br><span class="line">vim Cargo.toml</span><br></pre></td></tr></table></figure><ul><li>编写依赖</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">hello_macro = &#123;path = <span class="string">&quot;../hello_macro&quot;</span>&#125;</span><br><span class="line">hello_macro_derive = &#123;path = <span class="string">&quot;../hello_macro_derive&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>编写代码</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main/src/main.rs</span></span><br><span class="line"><span class="keyword">use</span> hello_macro::HelloMacro;</span><br><span class="line"><span class="keyword">use</span> hello_macro_derive::HelloMacro;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(HelloMacro)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Main</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    Main::<span class="title function_ invoke__">hello_macro</span>(); <span class="comment">//调用实现的hello_macro特征</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="类属性宏">类属性宏</h2><div class="note info modern"><p>类属性宏和derive宏类似，但是不同于为derive属性生成代码，允许创建新的属性,通过接受输入的<br>标记替换为新的标记,派生宏则是接受输入的TokenTree,然后追加新的标记树</p><ol><li>例子:<br>创建一个名为route的属性用于注解web应用程序框架(web application framework)的函数:</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[route(GET,<span class="string">&quot;/&quot;</span>)]</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">index</span>() &#123;</span><br></pre></td></tr></table></figure><p>(1) route属性将由框架本身定义为一个过程宏，宏定义签名函数:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[proc_macro_attribute]</span> </span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">route</span>(attr: TokenStream,item: TokenStream) <span class="punctuation">-&gt;</span> TokenStream &#123;</span><br></pre></td></tr></table></figure><p>属性宏接受两个参数，一个是attr,类似<code>#[allow(unused)]</code>中的unused,另一个是item,是被属性<br>修饰的item，如结构体的定义</p><p>(2) 类属性工作宏和自定义derive宏工作方式相同</p></div><h2 id="类函数宏">类函数宏</h2>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cargo镜像的修改</title>
      <link href="/post/837498bc.html"/>
      <url>/post/837498bc.html</url>
      
        <content type="html"><![CDATA[<h2 id="修改cargo镜像">修改cargo镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.cargo</span><br><span class="line">vim config</span><br></pre></td></tr></table></figure><ul><li>之后在这个文件中输入以下源信息:</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[source.crates-io]</span><br><span class="line">registry = <span class="string">&quot;https://github.com/rust-lang/crates.io-index&quot;</span></span><br><span class="line">replace-with = <span class="symbol">&#x27;ustc</span>&#x27;</span><br><span class="line">[source.ustc]</span><br><span class="line">registry = <span class="string">&quot;git://mirrors.ustc.edu.cn/crates.io-index&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> cargo镜像修改 </tag>
            
            <tag> cargo下载速度问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-41.高级函数和闭包</title>
      <link href="/post/b5a81783.html"/>
      <url>/post/b5a81783.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数指针">函数指针</h2><div class="note info modern"><ol><li>函数指针被允许使用函数作为另一个函数的参数，函数的类型是fn，fn就是一种函数指针，<br>指定参数为函数指针的语法类似闭包</li><li>函数指针实现了闭包的三个特征:Fn、FnMut、FnOnce,因此，可以在闭包中调用函数指针</li></ol></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">add_one</span>(x: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">  x + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">do_twice</span>(f: <span class="title function_ invoke__">fn</span>(<span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>,val: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;<span class="comment">//第一个参数是一个函数指针，类型是</span></span><br><span class="line">                                                <span class="comment">//参数为i32,返回值为i32的函数</span></span><br><span class="line">  <span class="title function_ invoke__">f</span>(val)+ <span class="title function_ invoke__">f</span>(val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">wapper_func</span>&lt;T&gt;(t: T,v: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> </span><br><span class="line"><span class="keyword">where</span> T: <span class="title function_ invoke__">Fn</span>(<span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;<span class="comment">//T类型必须实现Fn特征</span></span><br><span class="line">  <span class="title function_ invoke__">t</span>(v)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">fnc</span>(v: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    v + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">r</span> = <span class="title function_ invoke__">do_twice</span>(add_one,<span class="number">5</span>); <span class="comment">//12</span></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;r = &#123;&#125;&quot;</span>,r);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//+++++++++++</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">a</span> = <span class="title function_ invoke__">wapper_func</span>(|x| x+<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;a = &#123;&#125;&quot;</span>,a);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">b</span> = <span class="title function_ invoke__">wapper_func</span>(fnc,<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;b = &#123;&#125;&quot;</span>,b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数参数返回闭包">函数参数返回闭包</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fn return_clo() -&gt; Fn(i32) -&gt; i32 &#123;//大小未知,使用指针,返回特征对象</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">return_clo</span>() <span class="punctuation">-&gt;</span> <span class="type">Box</span>&lt;<span class="keyword">dyn</span> <span class="built_in">Fn</span>&lt;<span class="type">i32</span>&gt;<span class="punctuation">-&gt;</span><span class="type">i32</span>&gt; &#123;</span><br><span class="line">   <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(|x| x+<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">c</span> = <span class="title function_ invoke__">return_clo</span>();</span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;1 + 1 =&#123;&#125;&quot;</span>,<span class="title function_ invoke__">c</span>(<span class="number">1</span>));</span><br><span class="line">   <span class="comment">//等价于</span></span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;1+ 1 = &#123;&#125;&quot;</span>,(*c)(<span class="number">1</span>));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-40.高级类型</title>
      <link href="/post/362c4a66.html"/>
      <url>/post/362c4a66.html</url>
      
        <content type="html"><![CDATA[<h1 id="高级类型">高级类型</h1><h2 id="类型别名">类型别名</h2><div class="note info modern"><p>类型别名的作用:</p><ol><li>减少重复<br>(1) 例如如下的代码(trait 对象):<br><code>Box&lt;dyn Fn() + Send + 'static&gt;</code></li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">f</span>: <span class="type">Box</span>&lt;<span class="keyword">dyn</span> <span class="title function_ invoke__">Fn</span>() + <span class="built_in">Send</span> + <span class="symbol">&#x27;static</span>&gt; = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(|| <span class="built_in">println!</span>(<span class="string">&quot;hi&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">takes_long_type</span>(f: <span class="type">Box</span>&lt;<span class="keyword">dyn</span> <span class="title function_ invoke__">Fn</span>() + <span class="built_in">Send</span> + <span class="symbol">&#x27;static</span>&gt;) &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">returns_long_type</span> (f: <span class="type">Box</span>&lt;<span class="keyword">dyn</span> <span class="title function_ invoke__">Fn</span>() + <span class="built_in">Send</span> + <span class="symbol">&#x27;static</span>&gt;) &#123;&#125;</span><br></pre></td></tr></table></figure><p>修改为别名</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Trunk</span> = <span class="type">Box</span>&lt;<span class="keyword">dyn</span> <span class="title function_ invoke__">Fn</span>() + <span class="built_in">Send</span> + <span class="symbol">&#x27;static</span>&gt;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">f</span>: Trunk = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(|| <span class="built_in">println!</span>(<span class="string">&quot;hi&quot;</span>));</span><br></pre></td></tr></table></figure><p>(2) 例子2</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io::Error;<span class="comment">//标准库中是std::io::Error代表了所有可能的I/O错误</span></span><br><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Write</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">write</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>,buf :&amp;[<span class="type">u8</span>]) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">usize</span>,Error&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">flush</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(),Error&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">write_all</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>,buf: &amp;[<span class="type">u8</span>]) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(),Error&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">write_fmt</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>,fmt: fmt::Arguments) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;(),Error&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span>&lt;T&gt; = std::result::<span class="type">Result</span>&lt;T,std::io::Error&gt;;<span class="comment">//result&lt;T,E&gt;中的E放入了</span></span><br><span class="line"><span class="comment">//std::io::Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//代码更新为:</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Write</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">write</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>,buf:&amp;[<span class="type">u8</span>]) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">usize</span>&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">flush</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">write_all</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>,buf: &amp;[<span class="type">u8</span>]) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt;;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">write_fmt</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>,fmt: Arguments) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;()&gt;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><ul><li>例子</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Kilometers</span> = <span class="type">i32</span>; <span class="comment">//别名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> : <span class="type">i32</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span>: Kilometers = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r</span>: <span class="type">i32</span> = x + y;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x + y = &#123;&#125;&quot;</span>,r);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="从不返回Never-type">从不返回Never type</h2><div class="note info modern"><p>!是一种特殊类型，被称为empty type,因为没有值</p><p>这种又叫做never type,在函数不返回的时候充当返回值</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">bar</span>() <span class="punctuation">-&gt;</span> ! &#123;</span><br><span class="line">    <span class="keyword">loop</span>&#123;&#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>例子1<br>猜谜游戏使用了这个参数,其中continue的值是never type</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">guess</span>: <span class="type">u32</span> = <span class="keyword">match</span> guess.<span class="title function_ invoke__">trim</span>().<span class="title function_ invoke__">parse</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(num) =&gt; num,</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(_) =&gt; <span class="keyword">continue</span>,<span class="comment">//！,会直接跳过，没有返回值</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/SQZXR/article/details/126451312">猜谜游戏解释链接😘</a></p><ul><li>例子2</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Option&lt;T&gt; 上的unwrap代码</span></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; <span class="type">Option</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">unwrap</span>(<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> T &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(val) =&gt; val,</span><br><span class="line">            <span class="literal">None</span> =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;called &#x27;option:;unwrap()&#x27;on a &#x27;None&#x27; value&quot;</span>),<span class="comment">//never type</span></span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="动态大小类型和Sized-trait">动态大小类型和Sized trait</h2><div class="note info modern"><p>动态大小类型就是在运行过程中才能够知道大小的类型(dynamically sized types)DST<br>使用规则:</p><ol><li>必须将动态大小类型的值置于某种指针之后,如Box<str>\Rc<str></li></ol></div><h3 id="典型的-1-str">典型的(1)str</h3><div class="note info modern"><p>&amp;str有两个值: str的地址和str的长度,大小在编译过程中可知,长度为2*usize</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">s1</span> : &amp;<span class="type">str</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">s2</span> : &amp;<span class="type">str</span> = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    <span class="comment">//不知道编译过程中的大小</span></span><br><span class="line">   <span class="comment">// let s1: str = &quot;Hello&quot;;</span></span><br><span class="line">   <span class="comment">// let s2: str = &quot;world&quot;;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="通过特征名称引用的动态大小类型">通过特征名称引用的动态大小类型</h3><div class="note info modern"><p>为了使用trait对象，将其放入指针之后,如&amp;trait 或者 Box<trait></p></div><h3 id="Sized-trait">Sized trait</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Rust使用Sized trait决定一个类型的大小是否在编译过程中可知</span></span><br><span class="line"><span class="comment">//trait为编译器在编译过程中实现大小</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">generic</span>&lt;T&gt;(t: T) &#123;<span class="comment">//T是编译过程中知道大小的类型</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">generic</span>&lt;T: <span class="built_in">Sized</span>&gt;(t: T) &#123;<span class="comment">//T为编译过程中知道大小的值</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了放宽限制，使用:</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">generic</span>&lt;T: ?<span class="built_in">Sized</span>&gt;(t: &amp;T) &#123;<span class="comment">//T可能是sized，也可能不是</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-39.高级特征</title>
      <link href="/post/fbb3947e.html"/>
      <url>/post/fbb3947e.html</url>
      
        <content type="html"><![CDATA[<h1 id="高级特征">高级特征</h1><h2 id="关联类型">关联类型</h2><div class="note info modern"><p>之前的例子中出现过Item这个占位符</p><ol><li>关联类型在trait中指定占位符类型<br>(1) 关联类型是一个将类型占位符与trait相关联的方式<br>(2) trait的实现者会针对特定的实现在这个类型的位置指定相应的具体类型,可以通过这样使用多种类型的trait</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Item</span>;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="keyword">Self</span>::Item&gt;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><ul><li>泛型和关联类型的区别</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Iterator1</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;T&gt;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    value: <span class="type">i32</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Iterator1</span>&lt;<span class="type">i32</span>&gt; <span class="keyword">for</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;in i32&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.value &gt; <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.value += <span class="number">1</span>;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(<span class="keyword">self</span>.value)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="literal">None</span></span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Iterator1</span>&lt;<span class="type">String</span>&gt; <span class="keyword">for</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">String</span>&gt; &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;in string&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.value &gt; <span class="number">3</span> &#123;</span><br><span class="line">            <span class="keyword">self</span>.value += <span class="number">1</span>;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(<span class="string">&quot;hello&quot;</span>.<span class="title function_ invoke__">to_string</span>())</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="literal">None</span></span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">//a.next(); //报错，编译器推导不出具体的类型,因为实现了两个不同的类型</span></span><br><span class="line">    <span class="comment">//使用完全限定语法可以执行</span></span><br><span class="line">    &lt;A <span class="keyword">as</span> Iterator1&lt;<span class="type">i32</span>&gt;&gt;::<span class="title function_ invoke__">next</span>(&amp;<span class="keyword">mut</span> a);<span class="comment">//类似强制转换</span></span><br><span class="line">    &lt;A <span class="keyword">as</span> Iterator1&lt;<span class="type">String</span>&gt;&gt;::<span class="title function_ invoke__">next</span>(&amp;<span class="keyword">mut</span> a);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>这种写法比较烦锁，使用自定义迭代器中的关联类型较为好些:<br><a href="http://supbjt.top/post/6a62dd98.html">😘自定义迭代器</a></p><h2 id="默认泛型类型参数和运算符重载">默认泛型类型参数和运算符重载</h2><div class="note info modern"><ol><li>使用泛型类型参数时，可以为泛型指定一个默认的具体操作</li><li>运算符重载指在特定情况下自定义运算符行为的操作</li><li>可以进行重载的运算符或者自定义运算符只能是Rust已经有的运算符,如我们可以为std::ops<br>中的运算符和相应的trait实现运算符相关trait重载</li></ol></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::ops::Add;</span><br><span class="line"><span class="meta">#[derive(Debug,PartialEq)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Add</span> <span class="keyword">for</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Output</span> = Point;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">add</span>(<span class="keyword">self</span>,other: Point) <span class="punctuation">-&gt;</span> Point &#123;</span><br><span class="line">        Point &#123;</span><br><span class="line">            x: <span class="keyword">self</span>.x + other.x,</span><br><span class="line">            y: <span class="keyword">self</span>.y + other.y,</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Millimeters</span>(<span class="type">u32</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Meters</span>(<span class="type">u32</span>);</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Add</span>&lt;Meters&gt; <span class="keyword">for</span> <span class="title class_">Millimeters</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Output</span> = Millimeters;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">add</span>(<span class="keyword">self</span>,other: Meters) <span class="punctuation">-&gt;</span> Millimeters &#123;</span><br><span class="line">          <span class="title function_ invoke__">Millimeters</span>(<span class="keyword">self</span>.<span class="number">0</span>+other.<span class="number">0</span>*<span class="number">1000</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(Point&#123;x:<span class="number">1</span>,y:<span class="number">1</span>&#125;+ Point &#123;x:<span class="number">2</span>,y:<span class="number">3</span>&#125;,Point&#123;x:<span class="number">3</span>,y:<span class="number">4</span>&#125;);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">mi</span> = <span class="title function_ invoke__">Millimeters</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m</span> = <span class="title function_ invoke__">Meters</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r</span> = mi + m;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;r = &#123;:?&#125;&quot;</span>,r);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//trait Add&lt;RHS = Self&gt; &#123; //尖括号里面是默认类型参数，RHS是一个泛型类型参数</span></span><br><span class="line"><span class="comment">//    type Output;</span></span><br><span class="line"><span class="comment">//    fn add(self,rhs: RHS) -&gt; Self::Output;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><h2 id="完全限定语法">完全限定语法</h2><ul><li>同名方法(有self)</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">print</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">print</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyType</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">A</span> <span class="keyword">for</span> <span class="title class_">MyType</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">print</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;A trait for MyType&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">B</span> <span class="keyword">for</span> <span class="title class_">MyType</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">print</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;B trait for MyType&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">MyType</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">print</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;MyType&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m</span> = MyType;</span><br><span class="line">    m.<span class="title function_ invoke__">print</span>();<span class="comment">//调用自己本身的方法</span></span><br><span class="line"></span><br><span class="line">    A::<span class="title function_ invoke__">print</span>(&amp;m);<span class="comment">//调用a的print</span></span><br><span class="line">    B::<span class="title function_ invoke__">print</span>(&amp;m);</span><br><span class="line">    MyType::<span class="title function_ invoke__">print</span>(&amp;m);<span class="comment">//调用自己的</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>关联函数</li></ul><div class="note info modern"><p><Type as Trait>::function(…)</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">baby_name</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">baby_name</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Spot&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Animal</span> <span class="keyword">for</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">baby_name</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;puppy&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;baby_name: &#123;&#125;&quot;</span>,Dog::<span class="title function_ invoke__">baby_name</span>()); <span class="comment">//调用自己的关联函数</span></span><br><span class="line">    <span class="comment">//错误方法 </span></span><br><span class="line">    <span class="comment">//println!(&quot;baby_name: &#123;&#125;&quot;,Animal::baby_name()); //调用自己的关联函数</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;baby_name: &#123;&#125;&quot;</span>,&lt;Dog <span class="keyword">as</span> Animal&gt;::<span class="title function_ invoke__">baby_name</span>()); <span class="comment">//强制转换的完全限定语法</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="父Trait">父Trait</h2><div class="note info modern"><p>某些时刻需要某个trait使用另外一些trait的功能，需要能够依赖的trait也被实现，这种<br>trait就是父trait</p></div><ul><li>例子</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">OutPrint</span>: fmt::Display &#123;<span class="comment">//OutPrint这个trait要求实现Display这个trait</span></span><br><span class="line">      <span class="keyword">fn</span> <span class="title function_">out_print</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> <span class="variable">output</span> = <span class="keyword">self</span>.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">          <span class="built_in">println!</span>(<span class="string">&quot;output &#123;&#125;&quot;</span>,output);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">OutPrint</span> <span class="keyword">for</span> <span class="title class_">Point</span> &#123;&#125;</span><br><span class="line"><span class="comment">//需要使用fmt::Display为Point</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>,f :&amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f,<span class="string">&quot;(&#123;&#125;,&#123;&#125;)&quot;</span>,<span class="keyword">self</span>.x,<span class="keyword">self</span>.y);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="newtype模式">newtype模式</h2><div class="note info modern"><p>newtype模式用来在外部类型上实现外部Trait</p><ol><li>孤儿规则(orphan rule):只要trait或者类型对于当前crate是本地的话就可以在此类型上<br>实现该Trait</li><li>不是本地地一个绕开这个限制的方法是使用newtype模式(newtype pattern)</li></ol></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Wrapper</span>(<span class="type">Vec</span>&lt;<span class="type">String</span>&gt;);<span class="comment">//将Vec作为成员绕开孤儿规则</span></span><br><span class="line"><span class="comment">//由于Vec和Display都不是本地的，所以会造成孤儿规则</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">Wrapper</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>,f: &amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f,<span class="string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>,<span class="keyword">self</span>.<span class="number">0</span>.<span class="title function_ invoke__">join</span>(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">w</span> = <span class="title function_ invoke__">Wrapper</span>(<span class="built_in">vec!</span>[<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>),<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;world&quot;</span>)]);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;w = &#123;&#125;&quot;</span>,w); <span class="comment">//hello,world</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-38.不安全rust</title>
      <link href="/post/9fa2368b.html"/>
      <url>/post/9fa2368b.html</url>
      
        <content type="html"><![CDATA[<h2 id="不安全的Rust">不安全的Rust</h2><div class="note info modern"><p>不安全的Rust拥有以下能力:</p><ol><li>解引用裸指针</li><li>调用不安全的函数或者方法</li><li>访问或修改可变静态变量</li><li>实现不安全的trait<br>这种方法不会关闭rust中的借用检查器或者禁用任何其他的rust安全检查规则，只提供上述<br>几个不被编译器检查内存安全的功能,这种代码的正确与否，由程序员自己保证</li></ol></div><h3 id="解用裸指针">解用裸指针</h3><div class="note info modern"><p>裸指针分为两种:</p><ol><li>不可变裸指针:<em>const T(这里的</em>是const连用的，并不是解引用的*,写法就是如此)</li><li>可变裸指针: *mut T(同上)</li><li></li></ol><p>(1) 允许忽略借用规则，可以同是拥有不可变和可变的指针，或者是多个指向相同位置的<br>可变指针</p><p>(2) 不保证指向的内存有效<br>(3) 允许为空<br>(4) 不能实现任何自动清理的功能</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">//创建不可变和可变的裸指针是可以安全在代码中，只是不能在不安全代码块之外解引用</span></span><br><span class="line">    <span class="comment">//裸指针</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r1</span> = &amp;num <span class="keyword">as</span> *<span class="keyword">const</span> <span class="type">i32</span>; <span class="comment">//不可变裸指针</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r1</span> = &amp;num <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">i32</span>; <span class="comment">//可变裸指针</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//不可以在安全代码中解引用</span></span><br><span class="line">    <span class="comment">//只能在不安全代码中解引用</span></span><br><span class="line">    <span class="comment">//报错</span></span><br><span class="line">    <span class="comment">//println!(&quot;r1 = &#123;&#125;&quot;,*r1);</span></span><br><span class="line">    <span class="comment">//println!(&quot;r2 = &#123;&#125;&quot;,*r2);</span></span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;r1 = &#123;&#125;&quot;</span>,*r1);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;r2 = &#123;&#125;&quot;</span>,*r2);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">add</span> = <span class="number">0x12345usize</span>; <span class="comment">//一个地址</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r</span> = add <span class="keyword">as</span> *<span class="keyword">const</span> <span class="type">i32</span>;<span class="comment">//这个内存地址可能没有在使用,在使用过程中可能会报错</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="调用不安全函数或者方法">调用不安全函数或者方法</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsafe</span> <span class="keyword">fn</span> <span class="title function_">dangerous</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;do something dangerous&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">dangerous</span>();</span><br><span class="line">      &#125;</span><br><span class="line">        <span class="comment">//报错，为不安全函数</span></span><br><span class="line">        <span class="comment">//dangerous();</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="创建不安全代码的抽象-相当于封装">创建不安全代码的抽象(相当于封装)</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r1</span> =&amp;num <span class="keyword">as</span> *<span class="keyword">const</span> <span class="type">i32</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r2</span> =&amp;num <span class="keyword">as</span> *<span class="keyword">mut</span> <span class="type">i32</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;* r1 = &#123;&#125;&quot;</span>,r1);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;* r2 = &#123;&#125;&quot;</span>,r2);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">foo</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="调用C语言的函数">调用C语言的函数</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">abs</span>(input: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;abs(-3): &#123;&#125;&quot;</span>,<span class="title function_ invoke__">abs</span>(-<span class="number">3</span>));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="C语言调用Rust">C语言调用Rust</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> learn</span><br><span class="line"><span class="built_in">cd</span> learn</span><br><span class="line">cargo new foo --lib</span><br><span class="line"><span class="built_in">cd</span> foo</span><br><span class="line">vim src/lib.rs</span><br></pre></td></tr></table></figure><ul><li>之后在库中填写代码</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![crate_type = <span class="string">&quot;staticlib&quot;</span>]</span></span><br><span class="line"><span class="meta">#[no_mangle]</span> </span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">extern</span> <span class="keyword">fn</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;use rust&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>之后在Cargo.toml中:</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[dependencies]</span><br><span class="line">[lib]</span><br><span class="line">name = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="keyword">crate</span>-<span class="keyword">type</span> = [<span class="string">&quot;staticlib&quot;</span>]</span><br></pre></td></tr></table></figure><ul><li>之后使用cargo build</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /learn</span><br><span class="line"><span class="built_in">cd</span> target</span><br><span class="line"><span class="built_in">ls</span></span><br><span class="line"><span class="built_in">cp</span> libfoo.a /learn <span class="comment">#将文件拷贝到learn中</span></span><br></pre></td></tr></table></figure><p>这个时候你就可以看到libfoo.a文件</p><ul><li>C语言部分</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位置在/learn</span></span><br><span class="line">vim main.c</span><br></pre></td></tr></table></figure><p>之后使用:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">void</span> <span class="title function_">foo</span><span class="params">()</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    foo();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>进行编译</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -o main main.c libfoo.a -lpthread -ldl <span class="comment">## 添加weak和多线程库，不然会报错</span></span><br><span class="line">./main</span><br></pre></td></tr></table></figure><h2 id="访问或者修改可变静态变量">访问或者修改可变静态变量</h2><div class="note info modern"><p>静态变量中的值有一个固定的内存地址(使用值总会访问相同的地址),而常量则允许任何在<br>被用到的时候复制数据<br>静态变量可以是可变的，虽然可能不安全(使用unsafe包含)</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> HELLO_WORLD: &amp;<span class="type">str</span> = <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,HELLO_WORLD);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>使用静态变量中的可变</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">mut</span> COUNTER: <span class="type">u32</span> = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">add_counter</span>(inc: <span class="type">u32</span>) &#123;</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        COUNTER += inc;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">add_counter</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="title function_ invoke__">add_counter</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">      <span class="comment">//可变的静态变量要用unsafe模块包含</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;counter: &#123;&#125;&quot;</span>,COUNTER);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="实现不安全的trait">实现不安全的trait</h2><div class="note info modern"><ol><li>当至少一个方法中包含编译器不能验证的变量时，该trait就是不安全的</li><li>在trait之前增加unsafe声明它是不安全的，同时trait也必须使用unsafe标记</li></ol></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unsafe</span> <span class="keyword">trait</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">foo</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Bar</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsafe</span> <span class="keyword">impl</span> <span class="title class_">Foo</span> <span class="keyword">for</span> <span class="title class_">Bar</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">foo</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="title function_ invoke__">Bar</span>();</span><br><span class="line">    a.foo;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-37.模式匹配</title>
      <link href="/post/54846bb8.html"/>
      <url>/post/54846bb8.html</url>
      
        <content type="html"><![CDATA[<h2 id="模式">模式</h2><div class="note info modern"><p>模式是Rust中特殊的语法，用来匹配值的结构<br>组成:<br>(1) 字面值<br>(2) 解构的数组、枚举、结构体或者元组<br>(3) 变量<br>(4) 通配符<br>(5) 占位符</p></div><h3 id="match的例子">match的例子</h3><div class="note info modern"><p>match必须匹配完所有的情况</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.match</span></span><br><span class="line"><span class="comment">//match VALUE &#123;</span></span><br><span class="line"><span class="comment">//    PATTERN =&gt; EXPRESSION,</span></span><br><span class="line"><span class="comment">//    PATTERN =&gt; EXPRESSION,</span></span><br><span class="line"><span class="comment">//    PATTERN =&gt; EXPRESSION,</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">match</span> a &#123;</span><br><span class="line">    <span class="number">0</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Zero&quot;</span>),</span><br><span class="line">      <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;One&quot;</span>),</span><br><span class="line">      _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;other value&quot;</span>),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="if-let">if let</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">color</span>: <span class="type">Option</span>&lt;&amp;<span class="type">str</span>&gt; = <span class="literal">None</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">is_ok</span> = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">age</span>: <span class="type">Result</span>&lt;<span class="type">u8</span>,_&gt; = <span class="string">&quot;33&quot;</span>.<span class="title function_ invoke__">parse</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(c) = color &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;color = &#123;&#125;&quot;</span>,c);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>  is_ok &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;is ok&quot;</span>);</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Ok</span>(a) = age &#123;</span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">30</span> &#123;</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;oh,mature man&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;oh,young man&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;is else&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="while-let">while let</h3><div class="note info modern"><p>只要模式匹配就一直执行while循环</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">stack</span> = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    stack.<span class="title function_ invoke__">push</span>(<span class="number">1</span>);</span><br><span class="line">    stack.<span class="title function_ invoke__">push</span>(<span class="number">2</span>);</span><br><span class="line">    stack.<span class="title function_ invoke__">push</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(top) = stack.<span class="title function_ invoke__">pop</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;top = &#123;&#125;&quot;</span>,top);</span><br><span class="line">      &#125;<span class="comment">//相当于清空栈</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="for">for</h3><div class="note info modern"><p>在for循环中模式是直接跟随for循环字<br>此处的模式是(index,value)</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">for</span> (index,value) <span class="keyword">in</span> v.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;index: &#123;&#125;,value &#123;&#125;&quot;</span>,index,value);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="let语句">let语句</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let PATTERN = EXPRESSION</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (x,y,z) = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>); <span class="comment">//(1,2,3)会匹配(x,y,z),将1绑定到x，2绑定到y，3绑定到z</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;,&#123;&#125;,&#123;&#125;&quot;</span>,x,y,z);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> (x,..,z) = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>,x,z);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="函数的模式">函数的模式</h3><div class="note info modern"><p>函数的参数也是模式</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">print_point</span> (&amp;(x,y): &amp;(<span class="type">i32</span>,<span class="type">i32</span>)) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;,y = &#123;&#125;&quot;</span>,x,y);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = (<span class="number">3</span>,<span class="number">5</span>);</span><br><span class="line">    <span class="title function_ invoke__">print_point</span>(&amp;p);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//模式在使用它的地方并不都是相同的，存在不可反驳的和可反驳的</span></span><br></pre></td></tr></table></figure><h3 id="模式的可反驳和不可反驳">模式的可反驳和不可反驳</h3><div class="note info modern"><p>模式有两种:refutable 和irrefutable(可反驳的和不可反驳的),能够匹配任何传递的可能值<br>的模式叫做不可反驳模式,对值匹配可能失败的叫做可反驳模式</p><ol><li>只能接受不可反驳模式的由: 函数、let语句、for循环，因为其通过不匹配的值程序无法进行有意义工作</li><li>if let和while let表达式被限制为只能接受可反驳的模式，因为他们定义就是为了处理有可能失败的条件</li></ol></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>); <span class="comment">//匹配Some(value)或者None</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; = <span class="literal">None</span>; <span class="comment">//匹配Some(value)或者None</span></span><br><span class="line">    <span class="comment">//let Some(x) = a;//报错，只接受不可反驳模式</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(v) = a &#123;</span><br><span class="line">    <span class="comment">//if let v = 5 &#123; //没有报错，但是会警告</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;v = &#123;&#125;&quot;</span>,v);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="匹配字面值">匹配字面值</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="number">1</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;one&quot;</span>),</span><br><span class="line">        <span class="number">2</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;two&quot;</span>),</span><br><span class="line">        - =&gt; <span class="built_in">println!</span>(<span class="string">&quot;xx&quot;</span>),</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="匹配命名变量">匹配命名变量</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = <span class="number">10</span>;<span class="comment">//一位置</span></span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(<span class="number">50</span>) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;50&quot;</span>),</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(y) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;y = &#123;&#125;&quot;</span>,y), <span class="comment">//这个y和之前的y不同，是局部变量，屏蔽之前的y</span></span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;other&quot;</span>),</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;:?&#125;,y = &#123;:?&#125;&quot;</span>,x,y);<span class="comment">//是1位置的y</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="多个模式">多个模式</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="number">1</span>|<span class="number">2</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;1 or 2&quot;</span>), <span class="comment">//匹配1或者是2</span></span><br><span class="line">        <span class="number">3</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;3&quot;</span>),</span><br><span class="line">        - =&gt; <span class="built_in">println!</span>(<span class="string">&quot;xx&quot;</span>),</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="通过…匹配">通过…匹配</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="number">1</span>..=<span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;1 to 5&quot;</span>), <span class="comment">//1｜2｜3｜4｜5</span></span><br><span class="line">        <span class="comment">//等价于</span></span><br><span class="line">        <span class="comment">//1|2|3|4|5 =&gt; println!(&quot;1 to 5&quot;),</span></span><br><span class="line">        - =&gt; <span class="built_in">println!</span>(<span class="string">&quot;xx&quot;</span>),</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>..=<span class="string">&#x27;j&#x27;</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;1&quot;</span>),</span><br><span class="line">        <span class="string">&#x27;k&#x27;</span>..=<span class="string">&#x27;z&#x27;</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;2&quot;</span>),</span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;other&quot;</span>),</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="解构并分解值">解构并分解值</h2><div class="note info modern"><p>解构元组，结构体、枚举、引用</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//两种方法</span></span><br><span class="line">  <span class="comment">//a,b匹配x,y</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = Point &#123;x: <span class="number">1</span>,y: <span class="number">2</span>&#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">Point</span>&#123;x:a,y:b&#125; = p;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">Point</span>&#123;x:x,y:y&#125; = p;<span class="comment">//同名省略</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">1</span>,x);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">1</span>,y);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">1</span>,a);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">2</span>,b);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>使用字面值解构</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">p</span> = Point &#123;x:<span class="number">1</span>,y:<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">match</span> p &#123;</span><br><span class="line">    Point &#123;x=<span class="number">0</span>,y=<span class="number">0</span>&#125; =&gt; <span class="built_in">println!</span>(<span class="string">&quot;原点&quot;</span>),</span><br><span class="line">    Point &#123;x,y:<span class="number">0</span>&#125; =&gt; <span class="built_in">println!</span>(<span class="string">&quot;x axis&quot;</span>),</span><br><span class="line">    Point&#123;x=<span class="number">0</span>,y&#125; =&gt; <span class="built_in">println!</span>(<span class="string">&quot;y axis&quot;</span>),</span><br><span class="line">    Point &#123;x,y&#125; =&gt; <span class="built_in">println!</span>(<span class="string">&quot;other&quot;</span>),</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ul><li>解构枚举结构体</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    Quit, </span><br><span class="line">    Move&#123;x: <span class="type">i32</span>,y: <span class="type">i32</span>&#125;,</span><br><span class="line">    <span class="title function_ invoke__">Write</span>(<span class="type">String</span>),</span><br><span class="line">    ChangeColor&#123;<span class="type">i32</span>,<span class="type">i32</span>,<span class="type">i32</span>&#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">msg</span> = Message::<span class="title function_ invoke__">ChangeColor</span>(<span class="number">0</span>,<span class="number">160</span>,<span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> msg &#123;</span><br><span class="line">        Message::Quit =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;quit&quot;</span>);</span><br><span class="line">          &#125;,</span><br><span class="line">        Message::Move&#123;x,y&#125; =&gt; &#123;<span class="built_in">println!</span>(<span class="string">&quot;move x &#123;&#125; y &#123;&#125;&quot;</span>,x,y);&#125;,</span><br><span class="line">        Message::<span class="title function_ invoke__">Write</span>(text) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;write msg = &#123;&#125;&quot;</span>,text),</span><br><span class="line">        Message::<span class="title function_ invoke__">ChangeColor</span>(r,g,b) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;color, r = &#123;&#125;,g = &#123;&#125;,b= &#123;&#125;&quot;</span>,r,g,b);</span><br><span class="line">          &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>解构嵌套的结构体和枚举</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Rgb</span>(<span class="type">i32</span>,<span class="type">i32</span>,<span class="type">i32</span>),</span><br><span class="line">    <span class="title function_ invoke__">Hsv</span>(<span class="type">i32</span>,<span class="type">i32</span>,<span class="type">i32</span>),</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Message</span> &#123;</span><br><span class="line">    Quit, </span><br><span class="line">    Move&#123;x: <span class="type">i32</span>,y: <span class="type">i32</span>&#125;,</span><br><span class="line">    <span class="title function_ invoke__">Write</span>(<span class="type">String</span>),</span><br><span class="line">    <span class="title function_ invoke__">ChangeColor</span>(Color),</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">msg</span> = Message::<span class="title function_ invoke__">ChangeColor</span>(Color::<span class="title function_ invoke__">Hsv</span>(<span class="number">0</span>,<span class="number">160</span>,<span class="number">255</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> msg &#123;</span><br><span class="line">         Message::<span class="title function_ invoke__">ChangeColor</span>(Color::<span class="title function_ invoke__">Rgb</span>(r,g,b)) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;rgb color, r = &#123;&#125;,g= &#123;&#125;,b = &#123;&#125;&quot;</span>,r,g,b);</span><br><span class="line">          &#125;,</span><br><span class="line">         Message::<span class="title function_ invoke__">ChangeColor</span>(Color::<span class="title function_ invoke__">Rgb</span>(r,g,b)) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;hsv color, h = &#123;&#125;,s= &#123;&#125;,v = &#123;&#125;&quot;</span>,h,s,v);</span><br><span class="line">          &#125;,</span><br><span class="line">          _ =&gt; () <span class="comment">//do nothing</span></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>解构结构体和元组</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    x: <span class="type">i32</span>,</span><br><span class="line">    y: <span class="type">i32</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> ((a,b),Point&#123;x,y&#125;) = ((<span class="number">1</span>,<span class="number">2</span>),Point&#123;x: <span class="number">3</span>,y: <span class="number">4</span>&#125;); <span class="comment">//解构完成</span></span><br><span class="line">    <span class="comment">//a = 1,b = 2,x = 3,y = 4</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="忽略模式中的值">忽略模式中的值</h2><div class="note info modern"><p>可能使用下划线的场景</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">bar</span>(x :<span class="type">i32</span>,y: <span class="type">i32</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">B</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">A</span> <span class="keyword">for</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">bar</span>(_ :<span class="type">i32</span>,y: <span class="type">i32</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;y = &#123;&#125;&quot;</span>,y);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><ul><li>使用下划线忽略整个值</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">foo</span> (_ : <span class="type">i32</span>,y: <span class="type">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y = &#123;&#125;&quot;</span>,y);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">foo</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>使用下划线忽略一部分值</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">numbers</span> = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">match</span> numbers &#123;</span><br><span class="line">        (one,_,three,_) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;one &#123;&#125;,three &#123;&#125;&quot;</span>,one,three);</span><br><span class="line">          &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>在变量名字前使用下划线忽略未使用的变量</li></ul><div class="note info modern"><p>使用下划线后，未使用的变量会不警告</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">_x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">_y</span> = <span class="number">5</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">Some</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(_c) = s &#123; <span class="comment">//只是看有没有具体的值，而不考虑具体值的类型</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;found a string&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//报错</span></span><br><span class="line">    <span class="comment">//在Some处被借用,不管有没有下划线</span></span><br><span class="line">    <span class="comment">//println!(&quot;s = &#123;&#125;&quot;,s);</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">Some</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(_) = s &#123; <span class="comment">//只是看有没有具体的值，而不考虑具体值的类型</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;found a string&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;&quot;</span>,s);<span class="comment">//此时不会报错,没有发生所有权的移动</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>使用…忽略大部分值</li></ul><div class="note warning modern"><p>使用…匹配的过程中一定不能出现歧义<br>如错误例子:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">match</span> numbers &#123;</span><br><span class="line">    (..,seconds,..) =&gt; &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;second = &#123;&#125;&quot;</span>,second);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">numbers</span> = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>);</span><br><span class="line">    <span class="keyword">match</span> numbers &#123;</span><br><span class="line">        (first,..,last) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;first &#123;&#125;,last &#123;&#125;&quot;</span>,first,last);</span><br><span class="line">          &#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="匹配守卫提供额外的条件">匹配守卫提供额外的条件</h2><div class="note info modern"><p>匹配守卫是一个指定于match分支模式之后，如果想要使用额外的if条件，必须满足这个分支<br>这种方法不需要引进新的变量</p></div><ul><li>匹配守卫方法1</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">num</span> = <span class="title function_ invoke__">Some</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">match</span> num &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(x) <span class="keyword">if</span> x &lt; <span class="number">5</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&lt;5&quot;</span>),</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(x) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;x &#123;&#125;&quot;</span>,x),</span><br><span class="line">        <span class="literal">None</span> =&gt; (),</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>匹配守卫方法2</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">num</span> = <span class="title function_ invoke__">Some</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = <span class="number">10</span>;<span class="comment">//位置1</span></span><br><span class="line">    <span class="keyword">match</span> num &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(x) <span class="keyword">if</span> x == y =&gt; <span class="built_in">println!</span>(<span class="string">&quot;num ==y&quot;</span>),<span class="comment">//此处为位置1的y</span></span><br><span class="line">        <span class="title function_ invoke__">Some</span>(x) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;x &#123;&#125;&quot;</span>,x),</span><br><span class="line">        <span class="literal">None</span> =&gt; (),</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>匹配守卫方法3</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">match</span> x &#123;</span><br><span class="line">        <span class="number">4</span>|<span class="number">5</span>|<span class="number">6</span> <span class="keyword">if</span> y =&gt; <span class="built_in">println!</span>(<span class="string">&quot;1&quot;</span>), <span class="comment">//等价于(4|5|6) if y </span></span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;2&quot;</span>),</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="使用-运算符">使用@运算符</h2>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-36.工作空间的trait对象</title>
      <link href="/post/dff0adad.html"/>
      <url>/post/dff0adad.html</url>
      
        <content type="html"><![CDATA[<h2 id="工作空间的trait对象">工作空间的trait对象</h2><div class="note info modern"><ol><li>trait对象必须使用动态分发,通过其中的指针来知晓需要使用哪个方法，而trait 是静态分发</li><li>trait对象使用Box dyn T来命名</li><li>trait对象要求对象安全:<br>只有对象安全的(object safe)的trait才可以组成trait对象,trait的方法满足以下两条<br>要求才是对象安全的:<br>(1) 返回值类型不为Self,如Clone就不是安全的,因为返回值是self<br>(2) 方法没有任何泛型类型参数</li></ol></div><h2 id="例子">例子</h2><ul><li>创建工作空间</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> learn <span class="built_in">cd</span> learn </span><br><span class="line">vim Cargo.toml</span><br></pre></td></tr></table></figure><ul><li>设置工作空间</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[workspace]</span><br><span class="line">members = [</span><br><span class="line">        <span class="string">&quot;gui&quot;</span>,</span><br><span class="line">        <span class="string">&quot;main&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>构建gui</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在learn中</span></span><br><span class="line">cargo new gui --lib</span><br><span class="line">vim gui/src/lib.rs</span><br></pre></td></tr></table></figure><ul><li>创建函数</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">Draw</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> componets: <span class="type">Vec</span>&lt;<span class="type">Box</span>&lt;<span class="keyword">dyn</span> Draw&gt;&gt;, <span class="comment">//实现了Draw trait的对象,使用dyn关键字</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//-------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型加trait bound不能使用，编译器处理方式为单态化，进行静态分发，已知道具体类型，</span></span><br><span class="line"><span class="comment">//T的类型不能变化，而我们是用的是SelectBox+Button类型</span></span><br><span class="line"><span class="comment">//而使用dyn时是使用动态类型，编译器不知道具体类型,而仅知道具体的指针大小</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//pub struct Screen&lt;T: Draw&gt; &#123;</span></span><br><span class="line"><span class="comment">//    pub componets: Vec&lt;T&gt;,</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//impl&lt;T&gt; Screen&lt;T&gt; </span></span><br><span class="line"><span class="comment">//where T: Draw &#123;</span></span><br><span class="line"><span class="comment">//    pub fn run(&amp;self) &#123;</span></span><br><span class="line"><span class="comment">//        for comp in self.componets.iter() &#123;</span></span><br><span class="line"><span class="comment">//            comp.draw();</span></span><br><span class="line"><span class="comment">//          &#125;</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//---------------</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Screen</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">run</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">comp</span> <span class="keyword">in</span> <span class="keyword">self</span>.componets.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">            comp.<span class="title function_ invoke__">draw</span>();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Button</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> width: <span class="type">u32</span>,</span><br><span class="line">    <span class="keyword">pub</span> height: <span class="type">u32</span>,</span><br><span class="line">    <span class="keyword">pub</span> label: <span class="type">String</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">draw</span> <span class="keyword">for</span> <span class="title class_">button</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">&quot;draw button,width = &#123;&#125;,height = &#123;&#125;,label = &#123;&#125;&quot;</span>,<span class="keyword">self</span>.width,<span class="keyword">self</span>.height,,<span class="keyword">self</span>.label);</span><br><span class="line">      &#125; </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">SelectBox</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> width: <span class="type">u32</span>,</span><br><span class="line">    <span class="keyword">pub</span> height: <span class="type">u32</span>,</span><br><span class="line">    <span class="keyword">pub</span> option: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">draw</span> <span class="keyword">for</span> <span class="title class_">SelectBox</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">draw</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">&quot;draw SelectBox,width = &#123;&#125;,height = &#123;&#125;,option = &#123;:?&#125;&quot;</span>,<span class="keyword">self</span>.width,<span class="keyword">self</span>.height,,<span class="keyword">self</span>.option);</span><br><span class="line">      &#125; </span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">it_works</span>() &#123;</span><br><span class="line">      <span class="built_in">assert_eq!</span>(<span class="number">2</span>+<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>创建main函数</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位于learn</span></span><br><span class="line">cargo new main</span><br><span class="line"><span class="built_in">cd</span> main</span><br><span class="line">vim Cargo.toml</span><br></pre></td></tr></table></figure><ul><li>添加依赖</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[dependencies] </span><br><span class="line">gui = &#123;path = <span class="string">&quot;../gui&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>主函数写法</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main/stc/main.rs</span></span><br><span class="line"><span class="keyword">use</span> gui::&#123;Screen,SelectBox,Button&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = Screen &#123;</span><br><span class="line">        componets: <span class="built_in">vec!</span>[</span><br><span class="line">            <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(Button &#123;</span><br><span class="line">                width: <span class="number">50</span>,</span><br><span class="line">                height: <span class="number">10</span>,</span><br><span class="line">                label: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;ok&quot;</span>),</span><br><span class="line">              &#125;),</span><br><span class="line">            <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(SelectBox &#123;</span><br><span class="line">                width: <span class="number">50</span>,</span><br><span class="line">                height: <span class="number">10</span>,</span><br><span class="line">                option: <span class="built_in">vec!</span>[</span><br><span class="line">                <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;yes&quot;</span>),</span><br><span class="line">                <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;no&quot;</span>),</span><br><span class="line">                <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;maybe&quot;</span>),</span><br><span class="line">                ],</span><br><span class="line">              &#125;),</span><br><span class="line">        ],</span><br><span class="line">      &#125;;</span><br><span class="line">     s.<span class="title function_ invoke__">run</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="错误实例-返回self的trait">错误实例,返回self的trait</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Sce</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> com: <span class="type">Vec</span>&lt;<span class="type">Box</span>&lt;<span class="keyword">dyn</span> <span class="built_in">Clone</span>&gt;&gt;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-35.Rust面向对象</title>
      <link href="/post/8d3f65b6.html"/>
      <url>/post/8d3f65b6.html</url>
      
        <content type="html"><![CDATA[<h2 id="Rust面向对象">Rust面向对象</h2><div class="note info modern"><p>面向对象的特点:对象、封装、继承</p><ol><li>对象: 数据和操作数据的过程<br>（1) Rust里面的结构体、枚举类型和impl块</li><li>Rust中没有继承的概念，但是可以通过特征trait进行行为的共享<br><a href="http://supbjt.top/post/7edb276f.html">链接:🥰trait的继承</a></li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">sum</span>() &#123;</span><br><span class="line">        <span class="comment">//todo</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">xx</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">A</span> <span class="keyword">for</span> <span class="title class_">xxx</span> &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div><h3 id="对象">对象</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span>&#123;<span class="comment">//数据</span></span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">print_name</span>(&amp;<span class="keyword">self</span>) &#123;<span class="comment">//操作数据的方法</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Dog name = &#123;&#125;&quot;</span>,<span class="keyword">self</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">d</span> = Dog &#123;name:<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;wangcai&quot;</span>)&#125;;</span><br><span class="line">    d.<span class="title function_ invoke__">print_name</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="封装">封装</h3><div class="note info modern"><p>我们只知道有remove,add,new这些方法，但是他们被封装起来了</p></div><ol><li>创建空文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> learn</span><br><span class="line"><span class="built_in">cd</span> learn</span><br><span class="line">vim Cargo.toml</span><br></pre></td></tr></table></figure><ol start="2"><li>在Cargo.toml中进行设置</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[workspace]</span><br><span class="line">members = [</span><br><span class="line">       <span class="string">&quot;getaver&quot;</span>,</span><br><span class="line">       <span class="string">&quot;main&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ol start="3"><li>创建main文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new main</span><br></pre></td></tr></table></figure><ol start="4"><li>创建getaver文件夹</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new getaver --lib</span><br></pre></td></tr></table></figure><ol start="5"><li>在getaver中写代码:</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//learn/getaver/src/lib.rs</span></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">it_works</span>() &#123;</span><br><span class="line">      <span class="built_in">assert_eq!</span>(<span class="number">2</span>+<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">AverCollect</span> &#123;</span><br><span class="line">    list: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;,</span><br><span class="line">    aver: <span class="type">f64</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">AverCollect</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> AverCollect &#123;</span><br><span class="line">        AverCollect&#123;</span><br><span class="line">            list: <span class="built_in">vec!</span>[],</span><br><span class="line">            aver: <span class="number">0.0</span>,</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>,value: <span class="type">i32</span>) &#123;</span><br><span class="line">        <span class="keyword">self</span>.list.<span class="title function_ invoke__">push</span>(value);</span><br><span class="line">        <span class="keyword">self</span>.<span class="title function_ invoke__">update_average</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">average</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">f64</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.aver</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">remove</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">result</span> = <span class="keyword">self</span>.list.<span class="title function_ invoke__">pop</span>();</span><br><span class="line">        <span class="keyword">match</span> result &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(value) =&gt; &#123;</span><br><span class="line">                <span class="keyword">self</span>.<span class="title function_ invoke__">update_average</span>();</span><br><span class="line">                <span class="title function_ invoke__">Some</span>(value)</span><br><span class="line">              &#125;,</span><br><span class="line">            <span class="literal">None</span> =&gt; <span class="literal">None</span>,</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">update_average</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">total</span>: <span class="type">i32</span> = <span class="keyword">self</span>.list.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">sum</span>();</span><br><span class="line">        <span class="keyword">self</span>.aver = total <span class="keyword">as</span> <span class="type">f64</span> /<span class="keyword">self</span>.list.<span class="title function_ invoke__">len</span>() <span class="keyword">as</span> <span class="type">f64</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>在main里面调用对象</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#main/Cargo.toml</span></span><br><span class="line">[package]</span><br><span class="line">name = ....</span><br><span class="line">[dependencies]</span><br><span class="line">getacer = &#123;path = <span class="string">&quot;../getaver&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>在main函数中使用</li></ol><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> getaver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = getaver::AverCollect::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    a.<span class="title function_ invoke__">add</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;average = &#123;&#125;&quot;</span>,a.<span class="title function_ invoke__">average</span>());</span><br><span class="line">    a.<span class="title function_ invoke__">add</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;average = &#123;&#125;&quot;</span>,a.<span class="title function_ invoke__">average</span>());</span><br><span class="line">    a.<span class="title function_ invoke__">add</span>(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;average = &#123;&#125;&quot;</span>,a.<span class="title function_ invoke__">average</span>());</span><br><span class="line">    a.<span class="title function_ invoke__">remove</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;average = &#123;&#125;&quot;</span>,a.<span class="title function_ invoke__">average</span>());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-34.send和sync的trait</title>
      <link href="/post/868f0af9.html"/>
      <url>/post/868f0af9.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><div class="note info modern"><ol><li>内嵌于语言中的: std::market中的Sync，以及Send trait</li><li>Send允许在线程之间转移所有权:<br>(1) Send标记trait表明类型的所有权可以在线程之间传递。几乎所有的Rust类型都是<br>Send的，但是如Rc<T>是不能在线程之间Send<br>(2) 任何完全由Send类型组成的类型也会自动被标记为Send <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这个struct中的类型都是send</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    a</span><br><span class="line">    b</span><br><span class="line">    c</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li>Sync允许多线程访问<br>(1) Sync标记trait表明一个实现了Sync的类型可以安全在多个线程中拥有<mark class="hl-label default">其值的引用</mark><br>，也就是说对于任意类型T，如果&amp;T是Send的化就是Sync的(引用是Send,则值是Sync的)，也就是说这个引用可以安全<br>的发送到另外一个线程<br>(2) 智能指针Rc<T>也不是Sync的，出于其不是Send相同的原因，RefCell<T>和Cell<T><br>系列类型不是Sync的。RefCell<T>在运行时所进行的借用检查也不是线程安全的，Mutex<T><br>是Sync的</li><li>手动实现Send和Sync是不安全的<br>这两种trait通常并不需要手动实现，因为由Send和Sync的类型组成的类型，自动就是Send<br>和Sync的，因为他们是标记Trait，甚至都不需要实现任何方法，他们只是用来加强并发相关<br>的不可变性的。</li></ol></div>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-33.智能指针的比较</title>
      <link href="/post/97a3f5ad.html"/>
      <url>/post/97a3f5ad.html</url>
      
        <content type="html"><![CDATA[<h2 id="智能指针的比较">智能指针的比较</h2><div class="note info modern"><p>RefCell/Rc/Box/Arc<br>RefCell和Rc、Mutex、Arc的区别和联系:<br>(1) Mutex实际上提供内部可变性，类似于RefCell<br>(2) RefCell是非线程安全的，Mutex是线程安全的</p></div>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-32.互斥器</title>
      <link href="/post/76d9a19e.html"/>
      <url>/post/76d9a19e.html</url>
      
        <content type="html"><![CDATA[<h1 id="互斥器">互斥器</h1><div class="note info modern"><ol><li>通道类似于单所有权的方式，值传递到通道后，发送者无法使用这个值</li><li>共享内存类似于多所有权，多个线程可以同时访问相同的内存位置<br>互斥器: mutex</li><li>任意时刻，只允许一个线程来访问某些数据</li><li>互斥器使用的时候，需要先获取到锁，使用后需要释放锁(类似死锁，相互等待)</li><li>Mutex<T>是一个智能指针，lock调用返回一个叫做MutexGuard的智能指针,Mutex内部提供了drop方法，实现当MutexGuard离开作用域时自动释放锁。</li></ol></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Mutex&lt;T&gt; </span></span><br><span class="line"><span class="keyword">use</span> std::sync::Mutex;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m</span> = Mutex::<span class="title function_ invoke__">new</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> = m.<span class="title function_ invoke__">lock</span>().<span class="title function_ invoke__">umwrap</span>();<span class="comment">//获取锁</span></span><br><span class="line">        *num = <span class="number">6</span>;</span><br><span class="line">      &#125;<span class="comment">//离开作用域自动释放</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot; m = &#123;:?&#125;&quot;</span>,m);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="互斥器例子">互斥器例子</h2><ul><li>没有实现copy trait</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::sync::Mutex;</span><br><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">counter</span> = Mutex::<span class="title function_ invoke__">new</span>(<span class="number">0</span>);<span class="comment">//没有实现copy trait</span></span><br><span class="line">    <span class="comment">//之后会报错,因为多次尝试move,但是变量没有实现copy trait</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">handles</span> = <span class="built_in">vec!</span>[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">handle</span> = thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> = counter.<span class="title function_ invoke__">lock</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            *num +=<span class="number">1</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">        handles.<span class="title function_ invoke__">push</span>(handle);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">handle</span> <span class="keyword">in</span> handles &#123;</span><br><span class="line">        handle.<span class="title function_ invoke__">join</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;result = &#123;&#125;&quot;</span>,*counter.<span class="title function_ invoke__">lock</span>().<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>正解:使用Rc指针共享内存数据,但是Rc在线程之间不能够安全的发送，和RefCell适用于单线程<br>rust提供了在线程之间安全共享的叫做arc</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::sync::Mutex;</span><br><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="comment">//use std::rc::Rc;</span></span><br><span class="line"><span class="keyword">use</span> std::sync::Arc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">//let counter = Rc::new(Mutex::new(0));</span></span><br><span class="line">    <span class="comment">//let counter = Mutex::new(0);//没有实现copy trait</span></span><br><span class="line">    <span class="comment">//之后会报错,因为多次尝试move,但是变量没有实现copy trait</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">handles</span> = <span class="built_in">vec!</span>[];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">counter</span> = Arc::<span class="title function_ invoke__">new</span>(Mutex::<span class="title function_ invoke__">new</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">cnt</span> = Rc::<span class="title function_ invoke__">clone</span>(&amp;counter);</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">handle</span> = thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> =cnt.<span class="title function_ invoke__">lock</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            *num +=<span class="number">1</span>;</span><br><span class="line">          &#125;);</span><br><span class="line">        handles.<span class="title function_ invoke__">push</span>(handle);</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">handle</span> <span class="keyword">in</span> handles &#123;</span><br><span class="line">        handle.<span class="title function_ invoke__">join</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;result = &#123;&#125;&quot;</span>,*counter.<span class="title function_ invoke__">lock</span>().<span class="title function_ invoke__">unwrap</span>());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-31.多线程通道传递消息</title>
      <link href="/post/d8b2db41.html"/>
      <url>/post/d8b2db41.html</url>
      
        <content type="html"><![CDATA[<h2 id="通过通道在rust传递消息">通过通道在rust传递消息</h2><div class="note info modern"><ol><li>Rust实现消息传递并发的主要工具是通道。通道由两部分组成，一部分是发送端，一部<br>分是接收端，发送端用来发送消息，接收端用来接受消息。<mark class="hl-label default">通过通道可以传递参数而不用过多考虑生命周期</mark> ,发送端或者接收端任何一个被丢<br>弃就可以认为通道被关闭</li><li>通道的介绍:<br>(1). 通过mpsc::channel,创建通道，mpsc是多个生产者，单个消费者<br>(2). 通过spmc::channel,创建通道，spmc是一个生产者，多个消费者<br>(3). 创建通道后返回的是发送者和消费者,如:</li></ol>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> (tx,rx) = mpsc::<span class="title function_ invoke__">channel</span>();</span><br><span class="line"><span class="keyword">let</span> (tx,rx) = spmc::<span class="title function_ invoke__">channel</span>();</span><br></pre></td></tr></table></figure><ol start="3"><li>关于通道:<br>(1). 发送者的send方法返回一个Result&lt;T,E&gt;,如果接收端已经被丢弃，将没有发送值的目标<br>，此时发送会返回错误<br>(2). 接受者的recv返回值也是一个Result类型，当通道发送端关闭时，返回一个错误值<br>(3). 接收端的recv方法会阻塞到有一个消息到来,我们也可以使用try_recv(),不会阻塞，会<br>立即返回</li></ol></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="comment">//首先创建通道</span></span><br><span class="line">    <span class="keyword">let</span> (tx,rx) = mpsc::<span class="title function_ invoke__">channel</span>();</span><br><span class="line">  <span class="comment">//其次创建线程</span></span><br><span class="line">    thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">val</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">        tx.<span class="title function_ invoke__">send</span>(val).<span class="title function_ invoke__">unwrap</span>(); <span class="comment">//进行发送</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">received</span> = rx.<span class="title function_ invoke__">recv</span>().<span class="title function_ invoke__">unwrap</span>();<span class="comment">//recv方法会一直等待，等待一个值接受</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Got: &#123;&#125;&quot;</span>,received);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="通道的例子">通道的例子</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (tx,rx) = mpsc::<span class="title function_ invoke__">channel</span>();</span><br><span class="line"></span><br><span class="line">    thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">val</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line">        tx.<span class="title function_ invoke__">send</span>(val).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">        <span class="comment">//报错</span></span><br><span class="line">        <span class="comment">//println!(&quot;val = &#123;&#125;&quot;,val); //val被移动到通道里面了(调用send)，之后不能使用</span></span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">re</span> = rx.<span class="title function_ invoke__">recv</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Got &#123;&#125;&quot;</span>,re);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="发送多个值的例子">发送多个值的例子</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (tx,rx) = mpsc::<span class="title function_ invoke__">channel</span>();</span><br><span class="line"></span><br><span class="line">    thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">vals</span> = <span class="built_in">vec!</span>[</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hi&quot;</span>),</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;from&quot;</span>),</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;the&quot;</span>),</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;thread&quot;</span>),</span><br><span class="line"></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> <span class="variable">val</span> <span class="keyword">in</span> vals &#123;</span><br><span class="line">            tx.<span class="title function_ invoke__">send</span>(val).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">1</span>));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"><span class="comment">//可以直接使用for循环接受</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">recv</span> <span class="keyword">in</span> rx &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Got &#123;&#125;&quot;</span>,recv);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="多个生产者">多个生产者</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::sync::mpsc;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() </span><br><span class="line">&#123;   <span class="comment">//生产者分别通过tx1和tx发送</span></span><br><span class="line">    <span class="comment">//发送是交替进行的</span></span><br><span class="line">    <span class="keyword">let</span> (tx,rx) = mpsc::<span class="title function_ invoke__">channel</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tx1</span> = mpsc::Sender::<span class="title function_ invoke__">clone</span>(&amp;tx);<span class="comment">//子线程2</span></span><br><span class="line">    <span class="comment">//生产者1</span></span><br><span class="line">    thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">vals</span> = <span class="built_in">vec!</span>[</span><br><span class="line">             <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hi&quot;</span>),</span><br><span class="line">             <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;from&quot;</span>),</span><br><span class="line">             <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;the&quot;</span>),</span><br><span class="line">             <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;thread&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> <span class="variable">val</span> <span class="keyword">in</span> vals &#123;</span><br><span class="line">            tx1.<span class="title function_ invoke__">send</span>(val).<span class="title function_ invoke__">unwrap</span>();<span class="comment">//使用子线程2</span></span><br><span class="line">            thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">1</span>));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    <span class="comment">//生产者2</span></span><br><span class="line">    thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">vals</span> = <span class="built_in">vec!</span>[</span><br><span class="line">             <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;A&quot;</span>),</span><br><span class="line">             <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;B&quot;</span>),</span><br><span class="line">             <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;C&quot;</span>),</span><br><span class="line">             <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;D&quot;</span>),</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> <span class="variable">val</span> <span class="keyword">in</span> vals &#123;</span><br><span class="line">            tx.<span class="title function_ invoke__">send</span>(val).<span class="title function_ invoke__">unwrap</span>();<span class="comment">//使用子线程1</span></span><br><span class="line">            thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_secs</span>(<span class="number">1</span>));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">rec</span> <span class="keyword">in</span> rx &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Got &#123;&#125;&quot;</span>,rec);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvim复制多行以及多行注释</title>
      <link href="/post/63e74fea.html"/>
      <url>/post/63e74fea.html</url>
      
        <content type="html"><![CDATA[<h2 id="nvim复制多行">nvim复制多行</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">:<span class="number">4</span>,<span class="number">19</span><span class="keyword">y</span></span><br><span class="line"># 表示复制多行</span><br></pre></td></tr></table></figure><h2 id="nvim多行注释">nvim多行注释</h2><ol><li>首先使用ctrl+(小写v)进入可视化模式</li><li>使用j和k选择行数</li><li>使用大写I进入行首</li><li>输入想要修改的前缀，如//</li><li>esc退出后会自动保存</li></ol>]]></content>
      
      
      <categories>
          
          <category> neovim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-30.多线程</title>
      <link href="/post/f4676597.html"/>
      <url>/post/f4676597.html</url>
      
        <content type="html"><![CDATA[<h2 id="多线程的介绍">多线程的介绍</h2><div class="note info modern"><ol><li>进程是资源分配的最小单位，线程是cpu调度的最小单位</li><li>使用多线程的过程之中,遇到以下问题:<br>(1). 竞争状态:两个多线程不一致的顺序访问数据或者资源<br>(2). 死锁:两个线程相互等待对方停止使用其所用有的资源，造成两者都永久等待:<br>如:A: 1-&gt;2-&gt;3 B:2-&gt;1-&gt;3  t1:A:1,B:2  接着等待t2: A:2 B:1<br>(3). 只会发生在特定情况下且难以重现和修复的bug</li><li>编程语言提供的线程叫做绿色线程，如go,在底层实现了M：N的模型，M个绿色线程<br>对应着N个OS线程。但是，Rust标准库只提供1:1的线程模型的实现，一个线程对应着一个<br>Os线程</li><li>运行时代表二进制文件中包含的由语言本身提供的代码，这些代码根据语言的不同可以<br>分为不同的大小，但是非汇编语言一定有一部分的运行时代码，但是一般来说，如果说一个<br>语言&quot;没有运行时&quot;,一般是说这个语言的&quot;运行时&quot;很小。Rust和C几乎没有运行时</li></ol></div><ul><li>主线程未等待子线程结束</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码运行时先打印main中的，再打印thread中,并且到4就结束了,因为main函数先结束了</span></span><br><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    thread::<span class="title function_ invoke__">spawn</span>(|| &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;number &#123;&#125; in spawn thread&quot;</span>,i);</span><br><span class="line">            thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">1</span>));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);<span class="comment">//主线程先结束，没有等待子线程</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number &#123;&#125; in main thread&quot;</span>,i);</span><br><span class="line">        thread::<span class="title function_ invoke__">sleep</span>(Duration:;<span class="title function_ invoke__">from_millis</span>(<span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>主线程等待子线程结束</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码运行时先打印main中的，再打印thread中,并且到4就结束了,因为main函数先结束了</span></span><br><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">handle</span> = thread::<span class="title function_ invoke__">spawn</span>(|| &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;number &#123;&#125; in spawn thread&quot;</span>,i);</span><br><span class="line">            thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">1</span>));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number &#123;&#125; in main thread&quot;</span>,i);</span><br><span class="line">        thread::<span class="title function_ invoke__">sleep</span>(Duration:;<span class="title function_ invoke__">from_millis</span>(<span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    handle.<span class="title function_ invoke__">join</span>().<span class="title function_ invoke__">unwrap</span>();<span class="comment">//等待线程的结束</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>第三种:先打印子线程，再打印主线程</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"><span class="keyword">use</span> std::time::Duration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">handle</span> = thread::<span class="title function_ invoke__">spawn</span>(|| &#123;</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;number &#123;&#125; in spawn thread&quot;</span>,i);</span><br><span class="line">            thread::<span class="title function_ invoke__">sleep</span>(Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">1</span>));</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    handle.<span class="title function_ invoke__">join</span>().<span class="title function_ invoke__">unwrap</span>();<span class="comment">//等待线程的结束</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">1</span>..<span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number &#123;&#125; in main thread&quot;</span>,i);</span><br><span class="line">        thread::<span class="title function_ invoke__">sleep</span>(Duration:;<span class="title function_ invoke__">from_millis</span>(<span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="例子">例子</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">handle</span> = thread::<span class="title function_ invoke__">spawn</span>(|| &#123; <span class="comment">//报错</span></span><br><span class="line">    <span class="comment">//不知道v的生命周期</span></span><br><span class="line">    <span class="comment">//所以编译器会报错</span></span><br><span class="line">    <span class="comment">//因为如果drop(v),之后就不能够使用handle</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;v = &#123;:?&#125;&quot;</span>,v);</span><br><span class="line">      &#125;);</span><br><span class="line">    handle.<span class="title function_ invoke__">join</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="使用move关键字避免错误">使用move关键字避免错误</h2><div class="note info modern"><p>move关键字是将v转移至线程的闭包之中,之后就不能再主线程中使用</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">handle</span> = thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123; <span class="comment">//报错</span></span><br><span class="line">    <span class="comment">//不知道v的生命周期</span></span><br><span class="line">    <span class="comment">//所以编译器会报错</span></span><br><span class="line">    <span class="comment">//因为如果drop(v),之后就不能够使用handle</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;v = &#123;:?&#125;&quot;</span>,v);</span><br><span class="line">      &#125;);</span><br><span class="line">    </span><br><span class="line">    handle.<span class="title function_ invoke__">join</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-29.树形结构</title>
      <link href="/post/dce460ab.html"/>
      <url>/post/dce460ab.html</url>
      
        <content type="html"><![CDATA[<h2 id="用智能指针构建树形结构">用智能指针构建树形结构</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::rc::&#123;Rc,Weak&#125;;</span><br><span class="line"><span class="keyword">use</span> std::cell::RefCell;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">value: <span class="type">i32</span>,</span><br><span class="line">         parent: RefCell&lt;Weak&lt;Node&gt;&gt;,</span><br><span class="line">         child: RefCell&lt;<span class="type">Vec</span>&lt;Rc&lt;Node&gt;&gt;&gt;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">leaf</span> = Rc::<span class="title function_ invoke__">new</span>( Node &#123;</span><br><span class="line">value: <span class="number">3</span>,</span><br><span class="line">parent: RefCell::<span class="title function_ invoke__">new</span>(Weak::<span class="title function_ invoke__">new</span>()),</span><br><span class="line">child: RefCell::<span class="title function_ invoke__">new</span>(Vec![]),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;leaf parent = &#123;:?&#125;&quot;</span>,leaf.parent.<span class="title function_ invoke__">borrow</span>().<span class="title function_ invoke__">upgrade</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">branch</span> = Rc::<span class="title function_ invoke__">new</span>( Node &#123;</span><br><span class="line">value: <span class="number">5</span>,</span><br><span class="line">parent: RefCell::<span class="title function_ invoke__">new</span>(Weak::<span class="title function_ invoke__">new</span>()),</span><br><span class="line"><span class="comment">//父节点指向子节点</span></span><br><span class="line">child: RefCell::<span class="title function_ invoke__">new</span>(Vec![Rc::<span class="title function_ invoke__">clone</span>(&amp;leaf)]),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//子节点指向父节点</span></span><br><span class="line">*leaf.parent.<span class="title function_ invoke__">borrow_mut</span>() = Rc::<span class="title function_ invoke__">downgrade</span>(&amp;branch);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;leaf parent = &#123;:?&#125;&quot;</span>,leaf.parent.<span class="title function_ invoke__">borrow</span>().<span class="title function_ invoke__">upgrade</span>());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="strong-count和weak-count的引用">strong_count和weak_count的引用</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::rc::&#123;Rc,Weak&#125;;</span><br><span class="line"><span class="keyword">use</span> std::cell::RefCell;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">value: <span class="type">i32</span>,</span><br><span class="line">         parent: RefCell&lt;Weak&lt;Node&gt;&gt;,</span><br><span class="line">         children: RefCell&lt;<span class="type">Vec</span>&lt;Rc&lt;Node&gt;&gt;&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">leaf</span> = Rc::<span class="title function_ invoke__">new</span>(Node &#123;</span><br><span class="line">value: <span class="number">3</span>,</span><br><span class="line">parent: RefCell::<span class="title function_ invoke__">new</span>(Weak::<span class="title function_ invoke__">new</span>());</span><br><span class="line">children:: RefCell::<span class="title function_ invoke__">new</span>(Vec![]),</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">println!</span>&#123;</span><br><span class="line">  <span class="string">&quot;leaf strong  = &#123;&#125;,weak = &#123;&#125;&quot;</span>,</span><br><span class="line">    Rc::<span class="title function_ invoke__">strong_count</span>(&amp;leaf),</span><br><span class="line">    Rc::<span class="title function_ invoke__">weak_count</span>(&amp;leaf)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//1:strong_count=1,weak_count=0</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">branch</span> = Rc::new &#123; Node &#123;</span><br><span class="line">value: <span class="number">5</span>,</span><br><span class="line">         parent: RefCell::<span class="title function_ invoke__">new</span>(Weak::<span class="title function_ invoke__">new</span>());</span><br><span class="line">children: RefCell::<span class="title function_ invoke__">new</span>(<span class="built_in">vec!</span>[Rc::<span class="title function_ invoke__">clone</span>(&amp;leaf)]),<span class="comment">//此时branch指向了leaf</span></span><br><span class="line"><span class="comment">//leaf的strong是2</span></span><br><span class="line">&#125;&#125;;</span><br><span class="line"><span class="built_in">println!</span>(</span><br><span class="line">    <span class="string">&quot;branch strong  = &#123;&#125;,weak = &#123;&#125;&quot;</span>,<span class="comment">//strong_count=1,weak_count=0</span></span><br><span class="line">    Rc::<span class="title function_ invoke__">strong_count</span>(&amp;branch),</span><br><span class="line">    Rc::<span class="title function_ invoke__">weak_count</span>(&amp;branch));</span><br><span class="line">*leaf.parent.<span class="title function_ invoke__">borrow_mut</span>() = Rc::<span class="title function_ invoke__">downgrade</span>(&amp;branch);</span><br><span class="line"><span class="built_in">println!</span>(</span><br><span class="line">    <span class="string">&quot;branch strong  = &#123;&#125;,weak = &#123;&#125;&quot;</span>,<span class="comment">//strong_count=1,weak_count=1</span></span><br><span class="line">    Rc::<span class="title function_ invoke__">strong_count</span>(&amp;branch),</span><br><span class="line">    Rc::<span class="title function_ invoke__">weak_count</span>(&amp;branch));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">println!</span>(</span><br><span class="line">  <span class="string">&quot;leaf strong  = &#123;&#125;,weak = &#123;&#125;&quot;</span>,<span class="comment">//leaf strong_count=2,weak_count=0</span></span><br><span class="line">    Rc::<span class="title function_ invoke__">strong_count</span>(&amp;leaf),</span><br><span class="line">    Rc::<span class="title function_ invoke__">weak_count</span>(&amp;leaf)</span><br><span class="line">);</span><br><span class="line"><span class="comment">//如果branch离开作用域，leaf的strong为1,weak为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-28.弱引用</title>
      <link href="/post/6b769c39.html"/>
      <url>/post/6b769c39.html</url>
      
        <content type="html"><![CDATA[<h2 id="弱引用">弱引用</h2><div class="note info modern"><p>弱引用Weak<T>:</p><ol><li>弱引用通过Rc::downgrade传递Rc实例的引用,调用Rc::downgrade会得到Weak<T>类型的<br>智能指针，同时将weak_count加1(不是将strong_count加1)</li><li>区别在于weak_count无需计数为0就可被Rc实例清理,而strong_count需要为0</li><li>可以通过Rc::downgrade方法返回Option&lt;Rc<T>&gt;对象</li><li>弱引用是强引用的一个观察者，只有强引用存在的时候才有弱引用</li></ol></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"><span class="keyword">use</span> std::cell:RefCell;</span><br><span class="line"><span class="keyword">use</span> crate::List::&#123;Cons,Nil&#125;;</span><br><span class="line"><span class="keyword">use</span> std::rc::Weak;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="comment">//Cons(i32,RefCell&lt;Rc&lt;List&gt;&gt;),</span></span><br><span class="line">    <span class="title function_ invoke__">Cons</span>(<span class="type">i32</span>,RefCell&lt;Weak&lt;List&gt;&gt;),</span><br><span class="line">    Nil,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">tail</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;&amp;RefCell&lt;Weak&lt;List&gt;&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">Cons</span>(_,item) =&gt; <span class="title function_ invoke__">Some</span>(item),</span><br><span class="line">            Nil =&gt; <span class="literal">None</span>,</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">5</span>,RefCell::<span class="title function_ invoke__">new</span>(Weak::<span class="title function_ invoke__">new</span>())));<span class="comment">//注意写法是Weak里面没有</span></span><br><span class="line">    <span class="comment">//Nil，而Rc::new里面需要有</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//a.strong_count=1,weak_count=0</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;1,a strong count = &#123;&#125;,weak count = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a),Rc::<span class="title function_ invoke__">weak_count</span>(&amp;a));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;1 a.tail = &#123;:?&#125;&quot;</span>,a.<span class="title function_ invoke__">tail</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//b指向a</span></span><br><span class="line"><span class="comment">//a.strong_count=1,a.weak_count=1,因为b对a进行了引用</span></span><br><span class="line"><span class="comment">//b.strong_count=1,b.weak_count=0,</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">10</span>,RefCell::<span class="title function_ invoke__">new</span>(Weak::<span class="title function_ invoke__">new</span>())));</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(link) = b.<span class="title function_ invoke__">tail</span>() &#123;</span><br><span class="line">        *link.<span class="title function_ invoke__">borrow_mut</span>() = Rc::<span class="title function_ invoke__">downgrade</span>(&amp;a);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;2,a strong count = &#123;&#125;,weak count = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a),Rc::<span class="title function_ invoke__">weak_count</span>(&amp;a));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;2,b strong count = &#123;&#125;,weak count = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;b),Rc::<span class="title function_ invoke__">weak_count</span>(&amp;b));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;2 b.tail = &#123;:?&#125;&quot;</span>,b.<span class="title function_ invoke__">tail</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//a指向b</span></span><br><span class="line"><span class="comment">//a.strong_count=1,a.weak_count=1,因为b对a进行了引用</span></span><br><span class="line"><span class="comment">//b.strong_count=1,b.weak_count=1,</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(link) = a.<span class="title function_ invoke__">tail</span>() &#123;</span><br><span class="line">        *link.borrow_mut = Rc::<span class="title function_ invoke__">downgrade</span>(&amp;b);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;3,a strong count = &#123;&#125;,weak count = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a),Rc::<span class="title function_ invoke__">weak_count</span>(&amp;a));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;3,b strong count = &#123;&#125;,weak count = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;b),Rc::<span class="title function_ invoke__">weak_count</span>(&amp;b));</span><br><span class="line">    <span class="comment">//此时a.tail=Some(RefCell &#123;value: &#123;Weak&#125;&#125;)</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;3 b.tail = &#123;:?&#125;&quot;</span>,a.<span class="title function_ invoke__">tail</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-27.引用循环和循环列表</title>
      <link href="/post/74e30f87.html"/>
      <url>/post/74e30f87.html</url>
      
        <content type="html"><![CDATA[<h2 id="引用计数循环列表">引用计数循环列表</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Cons</span>(<span class="type">i32</span>,RefCell&lt;Rc&lt;List&gt;&gt;),</span><br><span class="line">    Nil,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">tail</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;&amp;RefCell&lt;Rc&lt;List&gt;&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">Cons</span>(_,item) =&gt; <span class="title function_ invoke__">Some</span>(item),</span><br><span class="line">            Nil =&gt; <span class="literal">None</span>,</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"><span class="keyword">use</span> std::cell::RefCell;</span><br><span class="line"><span class="keyword">use</span> crate::List::&#123;Cons,Nil&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">5</span>,RefCell::<span class="title function_ invoke__">new</span>(Rc::<span class="title function_ invoke__">new</span>(Nil))));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;1 a rc count = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a));<span class="comment">//1</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;1 a tail = &#123;:?&#125;&quot;</span>,a.<span class="title function_ invoke__">tail</span>()); <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">10</span>,RefCell::<span class="title function_ invoke__">new</span>(Rc::<span class="title function_ invoke__">clone</span>(&amp;a))));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;2 a rc count = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a));<span class="comment">//2</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;2 b rc count = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;b));<span class="comment">//1</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;2,b tail = &#123;:?&#125;&quot;</span>,b.<span class="title function_ invoke__">tail</span>());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(link) = a.<span class="title function_ invoke__">tail</span>() &#123;</span><br><span class="line">        *link.<span class="title function_ invoke__">borrow_mut</span>() = Rc::<span class="title function_ invoke__">clone</span>(&amp;b);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;3 a rc count = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a));<span class="comment">//2</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;3 b rc count = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;b));<span class="comment">//2</span></span><br><span class="line">    <span class="comment">//这段打印会溢出，因为构成了循环</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//println!(&quot;2,b tail = &#123;:?&#125;&quot;,b.tail());</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果在下面的代码中释放b，会造成a持有b的引用计数，b的引用计数为1</span></span><br><span class="line"><span class="comment">//也就是造成内存泄露</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fn main() &#123;</span></span><br><span class="line"><span class="comment">//    let a = Rc::new(Cons(5,RefCell::new(Rc::new(Nil))));</span></span><br><span class="line"><span class="comment">//    println!(&quot;1 a rc count = &#123;&#125;&quot;,Rc::strong_count(&amp;a));//1</span></span><br><span class="line"><span class="comment">//    println!(&quot;1 a tail = &#123;:?&#125;&quot;,a.tail()); //1</span></span><br><span class="line"><span class="comment">//  &#123;</span></span><br><span class="line"><span class="comment">//    let b = Rc::new(Cons(10,RefCell::new(Rc::clone(&amp;a))));</span></span><br><span class="line"><span class="comment">//    println!(&quot;2 a rc count = &#123;&#125;&quot;,Rc::strong_count(&amp;a));//2</span></span><br><span class="line"><span class="comment">//    println!(&quot;2 b rc count = &#123;&#125;&quot;,Rc::strong_count(&amp;b));//1</span></span><br><span class="line"><span class="comment">//    println!(&quot;2,b tail = &#123;:?&#125;&quot;,b.tail());</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    if let Some(link) = a.tail() &#123;</span></span><br><span class="line"><span class="comment">//        *link.borrow_mut() = Rc::clone(&amp;b);</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    println!(&quot;3 a rc count = &#123;&#125;&quot;,Rc::strong_count(&amp;a));//2</span></span><br><span class="line"><span class="comment">//    println!(&quot;3 b rc count = &#123;&#125;&quot;,Rc::strong_count(&amp;b));//2</span></span><br><span class="line"><span class="comment">//    //这段打印会溢出，因为构成了循环</span></span><br><span class="line"><span class="comment">//    //</span></span><br><span class="line"><span class="comment">//    //println!(&quot;2,b tail = &#123;:?&#125;&quot;,b.tail());</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//    a持有b,b的内存计数为一，这个内存地址没有被丢弃</span></span><br><span class="line"><span class="comment">//    b的引用存在，内存泄露发生</span></span><br><span class="line"><span class="comment">//    ....</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>循环列表完成图</p><p><img src="/myimg/rustp27.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-26.RefCell智能指针</title>
      <link href="/post/d5e78233.html"/>
      <url>/post/d5e78233.html</url>
      
        <content type="html"><![CDATA[<h1 id="RefCell介绍">RefCell介绍</h1><div class="note info modern"><ol><li>内部可变性:允许在使用不可变引用的时候改变数据</li><li>通过RefCell<T>在<mark class="hl-label default">运行时</mark> 检查借用规则(通常情况下是在编译的过程中检查借用规则)<br>RefCell<T>代表其数据的唯一所有权<br>Rc<T>和RefCell都只能用于<mark class="hl-label default">单线程场景</mark></li><li>选择Box<T>、Rc<T>或者RefCell的理由:<br>(1). Rc<T>允许数据有多个所有者；Box<T>或者RefCell<T>仅仅只有一个单一所有者<br>(2). Box<T>允许在编译过程中执行不可变或者可变借用检查;Rc<T>仅仅允许在编译时执行<br>不可变借用检查；RefCell<T>允许在运行过程中执行不可变或者可变借用检查<br>(3).RefCell允许在运行时执行可变借用检查，所以RefCell<T>可在数据本身不可变的过程<br>中执行修改内部值</li></ol></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Cons</span>(Rc&lt;RefCell&lt;<span class="type">i32</span>&gt;&gt;,Rc&lt;List&gt;),</span><br><span class="line">    Nil,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::List::&#123;Cons,Nil&#125;;</span><br><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"><span class="keyword">use</span> std::cell::RefCell;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">value</span> = Rc::<span class="title function_ invoke__">new</span>(RefCell::<span class="title function_ invoke__">new</span>(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> <span class="variable">a</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(Rc::<span class="title function_ invoke__">clone</span>(&amp;value),Rc::<span class="title function_ invoke__">new</span>(Nil)));</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">b</span> = <span class="title function_ invoke__">Cons</span>(Rc::<span class="title function_ invoke__">new</span>(RefCell::<span class="title function_ invoke__">new</span>(<span class="number">6</span>)),Rc::<span class="title function_ invoke__">clone</span>(&amp;a));</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">c</span> = <span class="title function_ invoke__">Cons</span>(Rc::<span class="title function_ invoke__">new</span>(RefCell::<span class="title function_ invoke__">new</span>(<span class="number">7</span>)),Rc::<span class="title function_ invoke__">clone</span>(&amp;a));</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;a before = &#123;:?&#125;&quot;</span>,a); <span class="comment">//5</span></span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;b before = &#123;:?&#125;&quot;</span>,b); <span class="comment">//6</span></span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;c before = &#123;:?&#125;&quot;</span>,c); <span class="comment">//7</span></span><br><span class="line"></span><br><span class="line">      *value.<span class="title function_ invoke__">borrow_mut</span>() += <span class="number">10</span>; <span class="comment">//对RefCell内部值进行修改</span></span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;a after = &#123;:?&#125;&quot;</span>,a); <span class="comment">//15 //外部不可变性，内部的可变性</span></span><br><span class="line">      <span class="comment">//Rc&lt;RefCell&gt;是外部的，是不可变的;而内部的value是可变的</span></span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;b after = &#123;:?&#125;&quot;</span>,b); <span class="comment">//6</span></span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;c after = &#123;:?&#125;&quot;</span>,c); <span class="comment">//7</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-25.Rc智能指针</title>
      <link href="/post/8021430.html"/>
      <url>/post/8021430.html</url>
      
        <content type="html"><![CDATA[<h1 id="Rc智能指针">Rc智能指针</h1><p><img src="/myimg/rustp25.png" alt=""></p><h2 id="Rc智能指针-2">Rc智能指针</h2><div class="note warning modern"><p>Rc<T>允许程序的多个部分之间<mark class="hl-label blue">只读</mark> 的共享数据,因为相同位置的多个<br>可变引用可能会造成数据竞争和不一致</p></div><div class="note warning modern"><p>如图所示:A、B、C三个指针都拥有A变量中值的所有权,这个时候需要使用Rc智能指针</p></div><ul><li>错误写法</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//错误写法：list没有实现copy trait，所以不能够使用b和c 同时move a的值</span></span><br><span class="line"><span class="comment">//enum List &#123;</span></span><br><span class="line"><span class="comment">//    Cons(i32,Box&lt;List&gt;),</span></span><br><span class="line"><span class="comment">//    Nil,</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//use crate::List::&#123;Cons,Nil&#125;;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//fn main() &#123;</span></span><br><span class="line"><span class="comment">//    let a = Cons(5,Box::new(Cons(10,Box::new(Nil))));</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    let b = Cons(3,Box::new(a)); //a的所有权发生转移</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    let c = Cons(4,BOx::new(a)); //报错点,a已经在b中使用</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><ul><li>正确写法</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">List</span> &#123;</span><br><span class="line">  <span class="title function_ invoke__">Cons</span>(<span class="type">i32</span>,Rc&lt;List&gt;),</span><br><span class="line">  Nil,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::List::&#123;Cons,Nil&#125;;</span><br><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">a</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">5</span>,Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">10</span>,Rc::<span class="title function_ invoke__">new</span>(Nil)))));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">b</span> = <span class="title function_ invoke__">Cons</span>(<span class="number">3</span>,Rc::<span class="title function_ invoke__">clone</span>(&amp;a));</span><br><span class="line">  <span class="comment">//第二种写法</span></span><br><span class="line">  <span class="comment">//let b = Cons(3,a.clone());</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">c</span> = <span class="title function_ invoke__">Cons</span>(<span class="number">4</span>,Rc::<span class="title function_ invoke__">clone</span>(&amp;a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Rc智能指针的原理">Rc智能指针的原理</h2><div class="note info modern"><p>对拥有者使用引用计数</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">List</span> &#123;</span><br><span class="line">  <span class="title function_ invoke__">Cons</span>(<span class="type">i32</span>,Rc&lt;List&gt;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crate::List::&#123;Cons,Nil&#125;;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">a</span> = Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">5</span>,Rc::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">10</span>,Rc::<span class="title function_ invoke__">new</span>(Nil)))));</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;count after creating a = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">b</span> = <span class="title function_ invoke__">Cons</span>(<span class="number">3</span>,Rc::<span class="title function_ invoke__">clone</span>(&amp;a));</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;count after creating b = &#123;&#125;&quot;</span>,RC::<span class="title function_ invoke__">strong_count</span>(&amp;a));</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span> = <span class="title function_ invoke__">Cons</span>(<span class="number">4</span>,Rc::<span class="title function_ invoke__">clone</span>(&amp;a));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;count after bind to c,a count = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a));</span><br><span class="line">  &#125;<span class="comment">//drop c</span></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;count at end,a count = &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;a));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-24.drop-trait</title>
      <link href="/post/205503c6.html"/>
      <url>/post/205503c6.html</url>
      
        <content type="html"><![CDATA[<h2 id="drop-trait">drop-trait</h2><div class="note info modern"><ol><li>Drop trait类似于其他语言中的析构函数，值离开作用域的时候执行函数的代码</li></ol></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">name: <span class="type">String</span>,</span><br><span class="line">        <span class="comment">//count: i32,</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Drop</span> <span class="keyword">for</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">drop</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123; <span class="comment">//走的时候需要释放Dog，所以是mut</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Dog &#123;&#125; leave&quot;</span>,<span class="keyword">self</span>.name);</span><br><span class="line">    <span class="comment">//self.count -= 1;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">a</span> = Dog&#123;name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;wangcai&quot;</span>)&#125;;</span><br><span class="line">  &#123;<span class="keyword">let</span> <span class="variable">b</span> = Dog&#123;name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;dahuang&quot;</span>)&#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;0++++++++++++++++++&quot;</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;1++++++++++++++++++&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//首先释放的是b，然后是a</span></span><br><span class="line"><span class="comment">//0++++++++</span></span><br><span class="line"><span class="comment">//Dog dahuang leave</span></span><br><span class="line"><span class="comment">//1++++++++</span></span><br><span class="line"><span class="comment">//Dog wangcai leave</span></span><br></pre></td></tr></table></figure><h2 id="drop的提前释放">drop的提前释放</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Drop</span> <span class="keyword">for</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">drop</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; leave&quot;</span>,<span class="keyword">self</span>.name);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">a</span> = Dog&#123;name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;wangcai&quot;</span>)&#125;;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">b</span> = Dog&#123;name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;dahuang&quot;</span>)&#125;;</span><br><span class="line">  <span class="comment">//dahuang leave</span></span><br><span class="line">  <span class="comment">//wangcai leave</span></span><br><span class="line">  <span class="comment">//可以看出值在栈上</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//如果提前leave</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//报错，drop不允许显式调用，正确写法是</span></span><br><span class="line">  <span class="comment">//b.drop();</span></span><br><span class="line">  <span class="title function_ invoke__">drop</span>(b);</span><br><span class="line">  <span class="title function_ invoke__">drop</span>(a);</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-23.解引用</title>
      <link href="/post/68885cb0.html"/>
      <url>/post/68885cb0.html</url>
      
        <content type="html"><![CDATA[<h2 id="解引用的trait">解引用的trait</h2><div class="note info modern"><p>实现Deref trait允许我们重载解引用运算符</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前提: A类型必须实现解引用 Deref trait</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span>: A = A::<span class="title function_ invoke__">new</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">b</span> = &amp;a;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">c</span> = *b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>; <span class="comment">//数据在栈上</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &amp;x;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">5</span>,x);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">5</span>,*y); <span class="comment">//解引用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//Box实现了解引用</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">z</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(x); <span class="comment">//由于使用x对象，所以使用x的copy属性，这个数据是在栈上</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">5</span>,*z);<span class="comment">//因为实现了Deref trait所以可以像普通引用一样使用。</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="解引用Deref-trait的实现">解引用Deref trait的实现</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::ops::Deref;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyBox</span>&lt;T&gt;(T);</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(x: T) <span class="punctuation">-&gt;</span> MyBox&lt;T&gt; &#123;</span><br><span class="line">        <span class="title function_ invoke__">MyBox</span>(x)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Deref <span class="keyword">for</span> <span class="title class_">MyBox</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Target</span> = T; <span class="comment">//固定写法，在标准函数文档中有解释</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">deref</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;T &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.<span class="number">0</span> <span class="comment">//不希望获得T的所有权，只是想返回它的引用</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = MyBox::<span class="title function_ invoke__">new</span>(x);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">5</span>,x);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">5</span>,*y);<span class="comment">//需要实现解引用Deref</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="解引用的强制多态">解引用的强制多态</h2><div class="note info modern"><p>Deref为String实现了强制多态，在使用&amp;String的时候，强制多态转换为&amp;str<br>解引用多态和可变性的交互:</p><ol><li>当T:Deref&lt;Target=U&gt;时，从&amp;T到&amp;U</li><li>当T: DerefMut&lt;Target=U&gt;时,从&amp;mut T到&amp;mut U</li><li>当T: Deref&lt;Target=U&gt;时，从&amp;mut T到&amp; U</li></ol></div><ul><li>&amp;T-&gt;&amp;U</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::ops::Deref;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyBox</span>&lt;T&gt;(T);</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; MyBox&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(x: T) <span class="punctuation">-&gt;</span> MyBox&lt;T&gt; &#123;</span><br><span class="line">        <span class="title function_ invoke__">MyBox</span>(x)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Deref <span class="keyword">for</span> <span class="title class_">MyBox</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Target</span> = T; <span class="comment">//固定写法，在标准函数文档中有解释</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">deref</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;T &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.<span class="number">0</span> <span class="comment">//不希望获得T的所有权，只是想返回它的引用</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">hello</span>(name: &amp;<span class="type">str</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, &#123;&#125;&quot;</span>,name);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">m</span> = MyBox::<span class="title function_ invoke__">new</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Rust&quot;</span>));</span><br><span class="line">    <span class="title function_ invoke__">hello</span>(&amp;m); <span class="comment">//这里需要解释的是:</span></span><br><span class="line">    <span class="comment">//m是一个string，但是函数需要的是一个&amp;str</span></span><br><span class="line">    <span class="comment">//将MyBox变为&amp;String,之后会调用标准库里边String的解引用，变为字符串slice</span></span><br><span class="line">    <span class="comment">//实际上变成了&amp;str</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-21.Box介绍</title>
      <link href="/post/d14b250d.html"/>
      <url>/post/d14b250d.html</url>
      
        <content type="html"><![CDATA[<h2 id="Box指针">Box指针</h2><div class="note info modern"><ol><li>Box允许将值放在堆上，留在栈上的则是指向堆数据的指针。Box唯一的损失是将数据<br>存放在堆上</li><li>box适合用于如下场景：<ol><li>当有编译未知大小的类型，但是需要在确切的上下文中使用这个类型的时候;<br>(<mark class="hl-label blue">举例</mark> 在一个list环境下存放数据，但是每个元素大小编译时不确定)</li><li>当有大量数据并且希望在确保数据不被拷贝的情况下转移所有权的时候;</li><li>当希望拥有一个值并且只关心这个值是否实现了特定的trait而不是具体的类型;</li></ol></li></ol></div><h2 id="示例">示例</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = <span class="type">Box</span>::<span class="title function_ invoke__">new</span>(<span class="number">5</span>); <span class="comment">//b在栈上，数据在堆上,b指向值为5这个内存地址</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b = &#123;&#125;&quot;</span>,b);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="Box的使用">Box的使用</h2><h3 id="场景-编译未知大小的类型">场景:编译未知大小的类型</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//报错:因为不知道确定的类型大小,List大小未知</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Cons</span>(<span class="type">i32</span>,List),</span><br><span class="line">    Nil,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//C语言中的定义</span></span><br><span class="line"><span class="comment">//struct 结构体的大小是已知的</span></span><br><span class="line"><span class="comment">//struct List &#123;</span></span><br><span class="line"><span class="comment">//    int value;</span></span><br><span class="line"><span class="comment">//    struct List *next; //32位机器上4个字节的指针</span></span><br><span class="line"><span class="comment">//    //struct List l; //递归</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">use</span> List::Cons;</span><br><span class="line">    <span class="keyword">use</span> List::Nil;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">list</span> = <span class="title function_ invoke__">Cons</span>(<span class="number">1</span>,<span class="title function_ invoke__">Const</span>(<span class="number">2</span>,<span class="title function_ invoke__">Const</span>(<span class="number">3</span>,Nil)));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>使用Box不会报错</li></ul><div class="note info modern"><p>Box创建使用<code>Box::new</code></p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">List</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">Cons</span>(i,<span class="type">Box</span>&lt;List&gt;),</span><br><span class="line">    Nil,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">use</span> List::*;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">list</span> = <span class="title function_ invoke__">Cons</span>(<span class="number">1</span>,<span class="type">Box</span>::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">2</span>,<span class="type">Box</span>::<span class="title function_ invoke__">new</span>(<span class="title function_ invoke__">Cons</span>(<span class="number">3</span>,<span class="type">Box</span>::<span class="title function_ invoke__">new</span>(Nil))))));</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-20.智能指针介绍</title>
      <link href="/post/778533a9.html"/>
      <url>/post/778533a9.html</url>
      
        <content type="html"><![CDATA[<h2 id="指针">指针</h2><div class="note info modern"><p>指针是一个包含内存地址的变量,地址指向其他数据。和C语言相同</p></div><h2 id="智能指针">智能指针</h2><p>智能指针在现代C++中有过应用，Rust中智能指针是一类数据结构，表现和指针相同，但是<br>拥有额外的元数据(<mark class="hl-label blue">包括引用计数器</mark> )，最明显的是拥有一个引用计数。</p><div class="note info modern"><p>引用计数指定了指针的所有者有几个，并且在没有所有者的时候将数据清空</p></div><h2 id="区别">区别</h2><p>普通的引用和智能指针额外区别是: 引用仅仅是借用数据的指针，而智能指针是拥有指向<br>的数据<br><a href="http://supbjt.top/post/f14d5d33.html">引用的介绍</a></p><h2 id="智能指针的实现">智能指针的实现</h2><ol><li>Deref trait允许智能指针结构体实例表现的像引用一样，这样可以编写既用于引用，<br>又用于智能指针的代码。(解引用)</li></ol><div class="note info modern"><p>如C语言中:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> *p = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p = %s&quot;</span>,*p);<span class="comment">//*p为解引用</span></span><br></pre></td></tr></table></figure></div><ol start="2"><li>Drop trait允许我们自定义当智能指针离开作用域时执行的代码(drop析构)</li></ol><h2 id="标准库中的智能指针">标准库中的智能指针</h2><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">Box<T></button></li><li class="tab"><button type="button" data-href="#test4-2">Rc<T></button></li><li class="tab"><button type="button" data-href="#test4-3">Ref<T>和RefMut<T></button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>用于在堆上分配</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>一个引用计数类型，数据可以为多个所有者</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>通过RefCell<T>访问，一个在运行时而不是在编译时执行借用规则的类型</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-19.cargo工作空间</title>
      <link href="/post/290423ab.html"/>
      <url>/post/290423ab.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>adder相当于main函数<br>add-one是lib<br>二者位于addr之中</p></div><h2 id="cargo工作空间">cargo工作空间</h2><ul><li>不使用cargo new 的方法来创建,使用以下命令:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> addr</span><br><span class="line"><span class="built_in">cd</span> addr</span><br><span class="line">vim Cargo.toml <span class="comment">#创建cargo文件</span></span><br></pre></td></tr></table></figure><ul><li>工作空间设置</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addr/Cargo.toml</span></span><br><span class="line">[workspace]</span><br><span class="line">members = [</span><br><span class="line">  <span class="string">&quot;adder&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>工作目录如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cargo.toml</span><br><span class="line">adder</span><br></pre></td></tr></table></figure><ul><li>创建新的包adder</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在addr文件夹中</span></span><br><span class="line">cargo new adder</span><br></pre></td></tr></table></figure><ul><li>运行cargo build</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在addr文件夹中</span></span><br><span class="line">cargo build</span><br></pre></td></tr></table></figure><p>此时出现如下目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Cargo.toml</span><br><span class="line">Cargo.lock</span><br><span class="line">adder------------</span><br><span class="line">|</span><br><span class="line">------Cargo.toml</span><br><span class="line">|</span><br><span class="line">------src</span><br><span class="line">target</span><br></pre></td></tr></table></figure><h2 id="Cargo工作空间添加新的lib库">Cargo工作空间添加新的lib库</h2><ul><li>在工作空间添加add_one --lib</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Cargo.toml</span></span><br><span class="line">[workspace]</span><br><span class="line">members = [</span><br><span class="line">  <span class="string">&quot;adder&quot;</span>,</span><br><span class="line">  <span class="string">&quot;add_one&quot;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>此时使用cargo new</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加add-one库</span></span><br><span class="line"><span class="comment"># 位于addr之中</span></span><br><span class="line">cargo new add_one --lib</span><br></pre></td></tr></table></figure><ul><li>添加函数到add_one之中</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// addr/add-one/src/lib.rs</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_one</span>(x: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line"><span class="meta">#[test]</span></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">it_works</span>() &#123;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">2</span>+<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用">使用</h2><ul><li>添加路径</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入adder的Cargo.toml</span></span><br><span class="line"><span class="comment"># addr/adder/Cargo,toml</span></span><br><span class="line">[package] </span><br><span class="line">name = <span class="string">&quot;adder&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">authors = [<span class="string">&quot;andy&quot;</span>]</span><br><span class="line">edition = <span class="string">&quot;2018&quot;</span></span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">add_one = &#123;path = <span class="string">&quot;../add_one&quot;</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//addr/adder/src/main.rs</span></span><br><span class="line"><span class="keyword">use</span> add_one;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">num</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r</span> = add_one::<span class="title function_ invoke__">add_one</span>(num); <span class="comment">//调用add_one包下的add_one函数</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;r = &#123;&#125;&quot;</span>,r);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>之后使用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 位于addr中</span></span><br><span class="line">cargo build</span><br></pre></td></tr></table></figure><p>最后进行运行:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># addr之中</span><br><span class="line">cargo run -p adder</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-18.cargo发布和撤回</title>
      <link href="/post/99fe3957.html"/>
      <url>/post/99fe3957.html</url>
      
        <content type="html"><![CDATA[<h1 id="Cargo-发布和撤回">Cargo 发布和撤回</h1><div class="note info modern"><p>crate发布和撤回:</p><ol><li>创建crates.io账户，通过cargo login ***来登录</li><li>发布前增加描述:<br>[package]<br>name = “package_name”<br>version = “0.1.0”<br>license = “MIT”<br>authors = [“name”]<br>description = “some thing description the package”</li><li><pre><code class="language-bash"></code></pre></li></ol><p>cargo publish</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">可以进行发布</span><br><span class="line"><span class="number">4</span>. 撤回指定版本:</span><br><span class="line">```bash</span><br><span class="line">cargo yank --vers <span class="number">0.1</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure></div>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-17.文档注释</title>
      <link href="/post/f3611851.html"/>
      <url>/post/f3611851.html</url>
      
        <content type="html"><![CDATA[<h2 id="文档注释">文档注释</h2><div class="note info modern"><ol><li>//! 是对my_crate包的介绍</li><li>/// #Example加上markdown写```是示例</li><li>pub之后的为函数体</li><li>该文档只限于lib中使用</li></ol></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo new mylib --lib</span><br></pre></td></tr></table></figure><ul><li>在mylib/lib.rs中:</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//! My Crate</span></span><br><span class="line"><span class="comment">//!</span></span><br><span class="line"><span class="comment">//! &#x27;my_crate&#x27; is a collection of utilites to make performing certain calcuations more convenient</span></span><br><span class="line"><span class="comment">//!</span></span><br><span class="line"><span class="comment">/// add one to the number</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// #Example</span></span><br><span class="line"><span class="comment">///</span></span><br><span class="line"><span class="comment">/// ```</span></span><br><span class="line"><span class="comment">/// let five = 5;</span></span><br><span class="line"><span class="comment">/// </span></span><br><span class="line"><span class="comment">/// assert_eq!(6,mylib::add_one(5));</span></span><br><span class="line"><span class="comment">/// ```</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_one</span>(x: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;<span class="comment">//测试示例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#[cfg(test)]</span></span><br><span class="line"><span class="comment">//mod tests &#123;</span></span><br><span class="line"><span class="comment">//    #[test]</span></span><br><span class="line"><span class="comment">//    fn it_works() &#123;</span></span><br><span class="line"><span class="comment">//        assert_eq!(2+2,4);</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br></pre></td></tr></table></figure><ul><li>之后再运行cargo doc</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo doc</span><br></pre></td></tr></table></figure><p>在文件中出现</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src-----</span><br><span class="line">        |</span><br><span class="line">        -------main.rs</span><br><span class="line">Cargo.toml</span><br><span class="line">Cargo.lock</span><br><span class="line">target---</span><br><span class="line">        |</span><br><span class="line">        -------doc------------mylib-------index.html<span class="comment">//说明文档</span></span><br><span class="line">        |      <span class="comment">//多出的文件夹</span></span><br><span class="line">        -------debug</span><br></pre></td></tr></table></figure><ul><li>使用doc --open</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo doc --open</span><br></pre></td></tr></table></figure><p>这会打开你的文档</p><ul><li>使用cargo test可以测试这个例子</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo <span class="built_in">test</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-16.使用别人包的例子</title>
      <link href="/post/aa7ecf27.html"/>
      <url>/post/aa7ecf27.html</url>
      
        <content type="html"><![CDATA[<h2 id="以求哈希为例子">以求哈希为例子</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[package]</span><br><span class="line">name = <span class="string">&quot;list&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">edition = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">rust-crypto = <span class="string">&quot;0.2&quot;</span> //使用外部的包</span><br></pre></td></tr></table></figure><ul><li>src/main.rs</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> crypto::digest::Digest;</span><br><span class="line"><span class="keyword">use</span> crypto::sha3::Sha3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hasher</span> = Sha3::<span class="title function_ invoke__">sha3_256</span>();</span><br><span class="line">    hasher.<span class="title function_ invoke__">input_str</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = hasher.<span class="title function_ invoke__">result_str</span>(); <span class="comment">//求出的哈希值</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>之后进行运行</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-15.cargo自定义构建</title>
      <link href="/post/f431b523.html"/>
      <url>/post/f431b523.html</url>
      
        <content type="html"><![CDATA[<h2 id="Cargo运行的版本">Cargo运行的版本</h2><h3 id="Cargo运行">Cargo运行</h3><div class="note info modern"><ol><li>cargo运行会产生运行文件，在target/debug文件夹之下</li></ol></div><ul><li>cargo运行产生可执行文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cargo new list</span><br><span class="line"><span class="comment"># 编辑完src/main.rs</span></span><br><span class="line">cargo run</span><br></pre></td></tr></table></figure><ul><li>可执行文件的位置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Cargo.toml</span><br><span class="line">Cargo.lock</span><br><span class="line">src-------</span><br><span class="line">          |</span><br><span class="line">          ------main.rs</span><br><span class="line">target----</span><br><span class="line">          |</span><br><span class="line">          ------Debug-----</span><br><span class="line">                          |</span><br><span class="line">                          -------list //可执行文件</span><br></pre></td></tr></table></figure><h3 id="Cargo编译">Cargo编译</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build</span><br></pre></td></tr></table></figure><div class="note info modern"><p>同样也会生成可执行文件</p></div><h3 id="Cargo编译-release发布">Cargo编译 release发布</h3><ul><li>编译发布会产生release文件夹</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build --release</span><br></pre></td></tr></table></figure><ul><li>文件结构</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Cargo.toml</span><br><span class="line">Cargo.lock</span><br><span class="line">src-------</span><br><span class="line">          |</span><br><span class="line">          ------main.rs</span><br><span class="line">target----</span><br><span class="line">          |</span><br><span class="line">          ------debug</span><br><span class="line">          |</span><br><span class="line">          ------release-----</span><br><span class="line">                            |</span><br><span class="line">                            ------list //可执行文件</span><br></pre></td></tr></table></figure><h3 id="可执行文件的运行">可执行文件的运行</h3><p>这些应该属于linux的内容，一般是:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./list</span><br></pre></td></tr></table></figure><p>来运行</p><h3 id="Cargo运行-release发布">Cargo运行 release发布</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo run --release</span><br></pre></td></tr></table></figure><h2 id="Cargo-toml编译优化">Cargo.toml编译优化</h2><div class="note info modern"><p>优化程度越高，编译需要的时间越常</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[package]</span><br><span class="line">name = <span class="string">&quot;list&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">edition = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"># See more keys and their definitions at https:<span class="comment">//doc.rust-lang.org/cargo/reference/manifest.html</span></span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line"></span><br><span class="line">[profile.dev]</span><br><span class="line">opt-level = <span class="number">0</span> <span class="comment">//debug版本优化程度0级</span></span><br><span class="line"><span class="comment">//同样也是默认优化级别</span></span><br><span class="line"></span><br><span class="line">[profile.release]</span><br><span class="line">opt-level = <span class="number">3</span> <span class="comment">//release发布版本优化程度3级</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rustp-14.自定义迭代器</title>
      <link href="/post/6a62dd98.html"/>
      <url>/post/6a62dd98.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    count: <span class="type">u32</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>() <span class="punctuation">-&gt;</span> Counter &#123;</span><br><span class="line">        Counter &#123;</span><br><span class="line">            count: <span class="number">0</span>,</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Iterator</span> <span class="keyword">for</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Item</span> = <span class="type">u32</span>;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="keyword">Self</span>::Item&gt; &#123;</span><br><span class="line">        <span class="keyword">self</span>.count += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">self</span>.count &lt; <span class="number">6</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(<span class="keyword">self</span>.count) </span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="literal">None</span> </span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">counter</span> = Counter::<span class="title function_ invoke__">new</span>();</span><br><span class="line">  <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (<span class="number">0</span>..<span class="number">6</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(v) = counter.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">          <span class="built_in">println!</span>(<span class="string">&quot;i = &#123;&#125;,v = &#123;&#125;&quot;</span>,i,v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="built_in">println!</span>(<span class="string">&quot;i = &#123;&#125;,at end&quot;</span>,i);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-13.迭代器</title>
      <link href="/post/fa61dd68.html"/>
      <url>/post/fa61dd68.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><ol><li>迭代器负责遍历序列中的每一项和决定序列合适结束的逻辑</li><li>创建迭代器: 迭代器是惰性的，调用迭代器之前不会有任何效果</li><li>每个迭代器实现了iterator trait,iterator定义在标准库之中</li></ol></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">v1</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">v1_iter</span> = v1.<span class="title function_ invoke__">iter</span>();<span class="comment">//这里虽然定义了迭代器，但是迭代器不产生效果</span></span><br><span class="line">                          <span class="comment">//迭代器是惰性的</span></span><br><span class="line">  <span class="keyword">for</span> <span class="variable">val</span> <span class="keyword">in</span> v1_iter &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;val = &#123;&#125;&quot;</span>,val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Iterator的定义</li></ul><div class="note warning modern"><p>next 是Iterator被要求实现的惟一一个方法，next一次返回一个元素，<br>迭代器结束的时候返回None</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">Item</span>;</span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">next</span>(<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="keyword">Self</span>::Item&gt;; <span class="comment">//type item和Self::Item:定义trait</span></span><br><span class="line">                                           <span class="comment">//的关联类型</span></span><br><span class="line">                                           <span class="comment">//next是被要求实现的唯一的方法 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>next方法的使用</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">v1</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v1_iter</span> = v1.<span class="title function_ invoke__">iter</span>();<span class="comment">//这里虽然定义了迭代器，但是迭代器不产生效果</span></span><br><span class="line">                          <span class="comment">//迭代器是惰性的</span></span><br><span class="line"><span class="comment">//  for val in v1_iter &#123;</span></span><br><span class="line"><span class="comment">//    println!(&quot;val = &#123;&#125;&quot;,val);</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(v) = v1_iter.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;v = &#123;&#125;&quot;</span>,v);<span class="comment">//1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(v) = v1_iter.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;v = &#123;&#125;&quot;</span>,v);<span class="comment">//2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(v) = v1_iter.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;v = &#123;&#125;&quot;</span>,v);<span class="comment">//3</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(v) = v1_iter.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;v = &#123;&#125;&quot;</span>,v);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;At end&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//------迭代可变引用-------</span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v2</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v2_iter</span> = v2.<span class="title function_ invoke__">iter_mut</span>();</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(v) = v2_iter.<span class="title function_ invoke__">next</span>() &#123;</span><br><span class="line">      *v = <span class="number">3</span>;</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;v2 = &#123;:?&#125;&quot;</span>,v2);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//------消费适配器------</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">v1</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">v1_iter</span> = v1.<span class="title function_ invoke__">iter</span>();</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">total</span>: <span class="type">i32</span> = v1_iter.<span class="title function_ invoke__">sum</span>();</span><br><span class="line">  <span class="comment">//调用消费适配器sum</span></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;total = &#123;&#125;&quot;</span>,total);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//-----迭代适配器-------</span></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;++++++++++++++&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">v1</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;v1 = &#123;:?&#125;&quot;</span>,v1);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">v2</span>: <span class="type">Vec</span>&lt;_&gt; = v1.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|x| x+<span class="number">1</span>).<span class="title function_ invoke__">collect</span>();</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;v2 = &#123;:?&#125;&quot;</span>,v2);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">let</span> <span class="variable">v1</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">23</span>,<span class="number">44</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">v3</span>: <span class="type">Vec</span>&lt;_&gt; = v1.<span class="title function_ invoke__">into_iter</span>().<span class="title function_ invoke__">filter</span>(|x| *x&gt;<span class="number">5</span>).<span class="title function_ invoke__">collect</span>();</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;v3 = &#123;&#125;&quot;</span>,v3);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-12.闭包获取环境中的值</title>
      <link href="/post/aaff2438.html"/>
      <url>/post/aaff2438.html</url>
      
        <content type="html"><![CDATA[<h2 id="闭包获取环境中的值">闭包获取环境中的值</h2><div class="note info modern"><p>闭包通过三种方式从环境中捕获变量，对应三种获取参数的方式，分别是所有权、可变<br>借用、不可变借用。<br>三种捕获的方式被编码为如下三个Fn trait :</p><ol><li>FnOnce消费从周围作用域中捕获的变量，周围的作用域被称作其环境，为了消费捕获<br>到的变量，闭包必须获取所有权并且在闭包定义的过程中将其移动至闭包内部，Once代表<br>不能够多次获取相同变量所有权</li><li>FnMut获取可变的借用值，可以改变作用环境</li><li>Fn从环境中获取不可改变的借用值</li></ol><p>rust通过自己的编译器来推导用户的闭包如何使用:</p><ol><li>所有的闭包都实现了FnOnce,因为所有闭包都至少被调用一次。</li><li>并且在闭包的调用过程中没有移动被捕获变量的所有权到闭包的闭包实现了FnMut，</li><li>不需要对捕获的变量进行可变访问的闭包实现了Fn</li></ol></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">equal_to_x</span> = |z| z == x; <span class="comment">//x为环境中的变量</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">assert!</span>(<span class="title function_ invoke__">equal_to_x</span>(y));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>move关键字会将所有权移进闭包</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">equal_to_x</span> = <span class="keyword">move</span> |z| z==x; <span class="comment">//将x的所有权移动至闭包内部</span></span><br><span class="line"><span class="comment">//x在这里被dropped,会报错</span></span><br><span class="line"><span class="comment">//println!(&quot;x = &#123;:?&#125;&quot;,x);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">assert!</span>(<span class="title function_ invoke__">equal_to_x</span>(y));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-11.使用泛型和Fn-trait的闭包</title>
      <link href="/post/5dee887a.html"/>
      <url>/post/5dee887a.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用泛型和Fn-trait-的闭包">使用泛型和Fn trait 的闭包</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现一个缓存，只处理第一次传入的值并保存</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Cacher</span>&lt;T&gt;</span><br><span class="line">    <span class="keyword">where</span> T: <span class="title function_ invoke__">Fn</span>(<span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> <span class="comment">//这里的Fn trait有一个回调，是这个函数自带的</span></span><br><span class="line">    &#123;</span><br><span class="line">        calcuation: T,</span><br><span class="line">        value: <span class="type">Option</span>&lt;<span class="type">u32</span>&gt;,</span><br><span class="line">      &#125;</span><br><span class="line"><span class="keyword">impl</span>&lt;T&gt; Cacher&lt;T&gt;</span><br><span class="line">    <span class="keyword">where</span> T: <span class="title function_ invoke__">Fn</span>(<span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">new</span>(calcuation: T) <span class="punctuation">-&gt;</span> Cacher&lt;T&gt; &#123;</span><br><span class="line">        Cacher &#123;</span><br><span class="line">            calcuation, <span class="comment">//当传入参数和函数体字段重名的时候，可以省略参数类型声明</span></span><br><span class="line">            value: <span class="literal">None</span>,</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">value</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>,arg: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">match</span> <span class="keyword">self</span>.value &#123;</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(v) =&gt; v,</span><br><span class="line">            <span class="literal">None</span> =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="variable">v</span> = (<span class="keyword">self</span>.calcuation)(arg); <span class="comment">//由于calcuation是一个闭包</span></span><br><span class="line">                <span class="keyword">self</span>.value = <span class="title function_ invoke__">Some</span>(v);</span><br><span class="line">                v</span><br><span class="line">              &#125;,</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">c</span> = Cacher::<span class="title function_ invoke__">new</span>(|x| x+<span class="number">1</span>); <span class="comment">//设计回调，使用回调</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v1</span> = c.<span class="title function_ invoke__">value</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v2</span> = c.<span class="title function_ invoke__">value</span>(<span class="number">2</span>); <span class="comment">//进行some的调用</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;value = &#123;&#125;&quot;</span>,v2);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;value = &#123;&#125;&quot;</span>,v1);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-10.闭包</title>
      <link href="/post/1892c2bc.html"/>
      <url>/post/1892c2bc.html</url>
      
        <content type="html"><![CDATA[<h2 id="闭包">闭包</h2><div class="note info modern"><ol><li>闭包是一种匿名函数，用来保存进<mark class="hl-label red">变量</mark> 或者作为参数传递给其他函数，但是和函数不同<br>的是允许捕获调用者作用域中的值</li><li>闭包可以带有泛型，Fn trait。</li><li>闭包可以为返回类型和参数推断类型，所以可以省略部分</li></ol></div><ul><li>简单的闭包使用方法</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">use_closure</span> = || &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;This is a closure&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="title function_ invoke__">use_closure</span>();</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;Hello world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>闭包的语法格式</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数的实现方式</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">add_one_v1</span>(x: <span class="type">u32</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">  x+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//闭包的实现方式</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">add_one_v2</span> = |x: <span class="type">u32</span>| <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;x + <span class="number">1</span>&#125;; </span><br><span class="line"><span class="comment">//-------------------------------- </span></span><br><span class="line"><span class="comment">//省略方法</span></span><br><span class="line"><span class="comment">//没有写类型和返回值</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">add_one_v3</span> = |x| &#123;x+<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">add_one_v4</span> = |x| x+<span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>使用上述闭包</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="title function_ invoke__">add_one_v4</span>(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">b</span> = <span class="title function_ invoke__">add_one_v3</span>(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><ul><li>闭包的自动推导</li></ul><div class="note info modern"><p>闭包可以为每个参数和返回值推导一个具体的类型，但是不能够推导两次</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一次推导为string</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">example_closure</span> = |x| x;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">example_closure</span>(<span class="string">&quot;hello&quot;</span>.<span class="title function_ invoke__">to_string</span>());</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;&quot;</span>,s);</span><br><span class="line"><span class="comment">//二次推导报错</span></span><br><span class="line"><span class="comment">//let n = example_closure(5);</span></span><br><span class="line"><span class="comment">//println!(&quot;n = &#123;&#125;&quot;,n);</span></span><br><span class="line"><span class="comment">//改成下面就不会报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">n</span> = <span class="title function_ invoke__">example_closure</span>(<span class="number">5</span>.<span class="title function_ invoke__">to_string</span>());</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;n = &#123;&#125;&quot;</span>,n);</span><br></pre></td></tr></table></figure><ul><li>捕捉环境中的变量</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">i</span>  = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">exe</span> = |x| x+i; <span class="comment">//i定义在函数体之外，然后在函数体内部捕获</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">r</span> = <span class="title function_ invoke__">exe</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;r = &#123;&#125;&quot;</span>,r);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-9.静态生命周期</title>
      <link href="/post/f71b4833.html"/>
      <url>/post/f71b4833.html</url>
      
        <content type="html"><![CDATA[<h2 id="静态生命周期">静态生命周期</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.静态生命周期</span></span><br><span class="line"><span class="comment">//定义方法：&#x27;static</span></span><br><span class="line"><span class="comment">//生命周期存活于整个程序期间，所有的字符字面值都有static生命周期</span></span><br><span class="line"><span class="comment">//和C语言不同，C语言中static则是更换文件链接属性或者全局变量，Rust使用const</span></span><br><span class="line"><span class="comment">//let s: &amp;&#x27;static str = &quot;hello&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> std::fmt::Display;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">function</span>&lt;<span class="symbol">&#x27;a</span>,T:Display&gt;(x: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,y: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,ann: T) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span> &#123; </span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;ann is &#123;&#125;&quot;</span>,ann);</span><br><span class="line">  <span class="keyword">if</span> x.<span class="title function_ invoke__">len</span>() &lt; y.<span class="title function_ invoke__">len</span>() </span><br><span class="line">  &#123;</span><br><span class="line">      x</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        y</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;i am s1&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;i am s2&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ann</span> = <span class="number">129</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r</span> = <span class="title function_ invoke__">function</span>(s1.<span class="title function_ invoke__">as_str</span>(),s2.<span class="title function_ invoke__">as_str</span>(),ann);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;r = &#123;&#125;&quot;</span>,r);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-8.方法中的生命周期</title>
      <link href="/post/a66bc50c.html"/>
      <url>/post/a66bc50c.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">StuA</span>&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    name: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span>&lt;<span class="symbol">&#x27;a</span>&gt; StuA&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">do_something</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123; <span class="comment">//输出不是引用，所以不用写</span></span><br><span class="line">        <span class="number">3</span></span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">do_something2</span>(&amp;<span class="keyword">self</span>,s: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> &#123; <span class="comment">//省略规则3</span></span><br><span class="line">    <span class="comment">//fn do_something2&lt;&#x27;b&gt;(&amp;&#x27;b self,s: &amp;str) -&gt; &amp;&#x27;b str ｛</span></span><br><span class="line">        <span class="keyword">self</span>.name</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//报错</span></span><br><span class="line">    <span class="comment">//需要显示标明</span></span><br><span class="line"><span class="comment">//    fn do_something3(&amp;self,s: &amp;str) -&gt; &amp;str &#123;//没法使用,因为s和输出生命周期不同</span></span><br><span class="line"><span class="comment">//        s</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line">    <span class="comment">//----------------------------------</span></span><br><span class="line">    <span class="comment">//显示标明之后</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">do_something3</span>&lt;<span class="symbol">&#x27;a</span>&gt;(&amp;<span class="keyword">self</span>,s: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span> &#123;</span><br><span class="line">        s</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="title function_ invoke__">StuA</span>(name: &amp;s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,a.<span class="title function_ invoke__">do_something</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,a.<span class="title function_ invoke__">do_something2</span>(&amp;s2));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,a.<span class="title function_ invoke__">do_something3</span>(&amp;s2));</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-7.生命周期的省略</title>
      <link href="/post/bb8f4f0c.html"/>
      <url>/post/bb8f4f0c.html</url>
      
        <content type="html"><![CDATA[<h2 id="生命周期的省略">生命周期的省略</h2><div class="note info modern"><p>生命周期的省略有如下三个规则:</p><ol><li>每个引用参数(注意是<mark class="hl-label default">引用的参数</mark> )都有他自己的生命周期参数：<br>一个引用参数的函数，其中有一个生命周期:<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">foo</span>&lt;<span class="symbol">&#x27;a</span>&gt;(x: &amp;<span class="symbol">&#x27;a</span> <span class="type">i32</span>)</span><br></pre></td></tr></table></figure>两个引用参数的函数,有两个生命周期:<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">foo</span>&lt;<span class="symbol">&#x27;a</span>,<span class="symbol">&#x27;b</span>&gt;(x: &amp;<span class="symbol">&#x27;a</span> <span class="type">i32</span>,y:&amp;<span class="symbol">&#x27;b</span> <span class="type">i32</span>)</span><br></pre></td></tr></table></figure></li><li>如果只有一个输入生命周期参数，所有的输出生命周期参数会得到同样的生命周期<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">foo</span>(x:&amp;<span class="type">i32</span>) <span class="punctuation">-&gt;</span>&amp;<span class="type">i32</span>  </span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">foo</span>&lt;<span class="symbol">&#x27;a</span>&gt;(x: &amp;<span class="symbol">&#x27;a</span> <span class="type">i32</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">i32</span></span><br></pre></td></tr></table></figure></li><li>在方法<mark class="hl-label red">方法不同于普通的函数，它有self参数</mark> 中，如果有多个输入<br>生命周期，但是其中一个是&amp;self或者&amp;mut self,那么self的生命周期被赋予所有输出生<br>命周期参数。<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//伪代码</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">function</span>(&amp;<span class="keyword">self</span>,x:&amp;<span class="type">str</span>,y:&amp;<span class="type">str</span>,....) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span></span><br><span class="line"><span class="comment">//等价</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">function</span>&lt;<span class="symbol">&#x27;a</span>,<span class="symbol">&#x27;b</span>,<span class="symbol">&#x27;c</span>&gt;(&amp;<span class="symbol">&#x27;a</span> <span class="keyword">self</span>,x:&amp;<span class="symbol">&#x27;b</span> <span class="type">str</span>,y:&amp;<span class="symbol">&#x27;c</span> <span class="type">str</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span></span><br></pre></td></tr></table></figure></li></ol></div><ul><li>简单例子</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这种情况下就不需要标注</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">get_a_str</span>(s: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> &#123;</span><br><span class="line">    s</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">get_a_str</span>(&amp;n);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;&quot;</span>,s);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-6.结构体、函数生命周期基础</title>
      <link href="/post/726b7e70.html"/>
      <url>/post/726b7e70.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础生命周期的介绍">基础生命周期的介绍</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.Rust中每一个引用都有生命周期，也就是引用保持有效的作用域，大部分时候生命周</span></span><br><span class="line"><span class="comment">//期是隐含并可以推断的，正如大部分时候类型可以推断一样</span></span><br><span class="line"><span class="comment">//2.生命周期的主要目标是避免悬垂引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.Rust编译器使用借用检查器来检查生命周期是否有效</span></span><br><span class="line"><span class="comment">//因为生命周期和借用，以及引用有关</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.生命周期常常伴随着str使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//错误示例</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">     <span class="keyword">let</span> <span class="variable">r</span>;</span><br><span class="line">     &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">        r = &amp;x;</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//x被droped但是仍然在使用</span></span><br><span class="line">    <span class="comment">//会造成悬垂引用，但是rust的编译器会阻止这种行为</span></span><br><span class="line">     <span class="built_in">println!</span>(<span class="string">&quot;r = &#123;&#125;&quot;</span>,r);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//---------------------------</span></span><br></pre></td></tr></table></figure><h2 id="函数中的生命周期">函数中的生命周期</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译器默认提供了自己的生命周期，但是使用的过程中往往需要自行标注生命周期</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//这段语法会报错，因为生命周期未知,可能会造成悬垂引用</span></span><br><span class="line"><span class="comment">//fn longest(x: &amp;str,y: &amp;str) -&gt; &amp;str &#123; //期待生命周期的参数</span></span><br><span class="line"><span class="comment">//    if x.len() &gt; y.len() &#123;</span></span><br><span class="line"><span class="comment">//        x</span></span><br><span class="line"><span class="comment">//      &#125;else &#123;</span></span><br><span class="line"><span class="comment">//          y</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">longest</span>&lt;<span class="symbol">&#x27;a</span>&gt;(x: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,y: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span> &#123; <span class="comment">//需要生命周期的参数</span></span><br><span class="line">    <span class="keyword">if</span> x.<span class="title function_ invoke__">len</span>() &gt; y.<span class="title function_ invoke__">len</span>() &#123;</span><br><span class="line">        x</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">          y</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">get_str</span>&lt;<span class="symbol">&#x27;a</span>&gt;(x: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,y: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span> &#123;</span><br><span class="line"><span class="comment">//因为这里没有用到y，所以y的生命周期没有标注也是可以的</span></span><br><span class="line"><span class="comment">//fn get_str&lt;&#x27;a&gt;(x: &amp;&#x27;a str,y: &amp;str) -&gt; &amp;&#x27;a str &#123;</span></span><br><span class="line">    x</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这段代码虽然写了生命周期，但是这段代码中要返回的是局部变量(位于堆上)，早就dropped!</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">a_str</span>(x: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,y: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>) <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span> &#123;</span><br><span class="line">     <span class="keyword">let</span> <span class="variable">r</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">     r.<span class="title function_ invoke__">as_str</span>()</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span>  <span class="title function_">mian</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;abcde&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r</span> = <span class="title function_ invoke__">longest</span>(s1.<span class="title function_ invoke__">as_str</span>(),s2.<span class="title function_ invoke__">as_str</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;r = &#123;&#125;&quot;</span>,r);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">g</span> = <span class="title function_ invoke__">get_str</span>(s1.<span class="title function_ invoke__">as_str</span>(),s2.<span class="title function_ invoke__">as_str</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;g = &#123;&#125;&quot;</span>,g);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ss</span> = <span class="title function_ invoke__">get_str</span>(s1.<span class="title function_ invoke__">as_str</span>(),s2.<span class="title function_ invoke__">as_str</span>());</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ss2</span> = <span class="title function_ invoke__">a_str</span>(s1.<span class="title function_ invoke__">as_str</span>(),s2.<span class="title function_ invoke__">as_str</span>());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="结构体中的生命周期">结构体中的生命周期</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要考虑生命周期，因为是str,对于引用和借用需要有生命周期的标注</span></span><br><span class="line"><span class="comment">//struct A &#123;</span></span><br><span class="line"><span class="comment">//    name: &amp;str,</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">A</span>&lt;<span class="symbol">&#x27;a</span>&gt; &#123;</span><br><span class="line">    name: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">n</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = A &#123;</span><br><span class="line">        name: &amp;n,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a = &#123;:#?&#125;&quot;</span>,a);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-5.对任何实现特定trait类型有条件的实现trait</title>
      <link href="/post/7edb276f.html"/>
      <url>/post/7edb276f.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对任何实现特定trait类型有条件的实现trait</span></span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">GetName</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">PrintName</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">print_name</span>(&amp;<span class="keyword">self</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//对泛型T实现了PrintName特征，前提是T实现了GetName</span></span><br><span class="line"><span class="comment">//有点类似继承</span></span><br><span class="line"><span class="keyword">impl</span>&lt;T:GetName&gt; PrintName <span class="keyword">for</span> <span class="title class_">T</span> &#123;</span><br><span class="line">      <span class="keyword">fn</span> <span class="title function_">print_name</span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">          <span class="built_in">println!</span>(<span class="string">&quot;name = &#123;&#125;&quot;</span>,<span class="keyword">self</span>.<span class="title function_ invoke__">get_name</span>());</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GetName</span> <span class="keyword">for</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">        &amp;(<span class="keyword">self</span>.name)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = Student &#123;</span><br><span class="line">        name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;xiaohuang&quot;</span>)</span><br><span class="line">      &#125;;</span><br><span class="line">    s.<span class="title function_ invoke__">print_name</span>(); </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-4.有条件的实现方法</title>
      <link href="/post/2803e0db.html"/>
      <url>/post/2803e0db.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用trait bound有条件的实现方法</span></span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">GetName</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">GetAge</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_age</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">PeopleMatchInformation</span>&lt;T,U&gt; &#123;</span><br><span class="line">    master: T,</span><br><span class="line">    employee: U,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span>&lt;T:GetName+GetAge,U:GetName+GetAge&gt; PeopleMatchInformation&lt;T,U&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">print_all_information</span> (&amp;<span class="keyword">self</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;master age = &#123;&#125;&quot;</span>,<span class="keyword">self</span>.master.<span class="title function_ invoke__">get_age</span>());</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;master name = &#123;&#125;&quot;</span>,<span class="keyword">self</span>.master.<span class="title function_ invoke__">get_name</span>());</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    age: <span class="type">u32</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GetName</span> <span class="keyword">for</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">        &amp;(<span class="keyword">self</span>.name)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GetAge</span> <span class="keyword">for</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_age</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.age</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    age: <span class="type">u32</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GetName</span> <span class="keyword">for</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">        &amp;(<span class="keyword">self</span>.name)</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GetAge</span> <span class="keyword">for</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_age</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.age</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">s</span> = Student&#123;name:<span class="string">&quot;xiaohuang&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">   age: <span class="number">15</span>,&#125;;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">g</span> = Teacher&#123;name:<span class="string">&quot;xiaoming&quot;</span>.<span class="title function_ invoke__">to_string</span>(),</span><br><span class="line">   age: <span class="number">35</span>,&#125;;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">m</span> = PeopleMatchInformation&#123;</span><br><span class="line">      master: s,</span><br><span class="line">      employee: g,</span><br><span class="line">    &#125;</span><br><span class="line">  m.<span class="title function_ invoke__">print_all_information</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-3.trait-bound语法糖</title>
      <link href="/post/2c973466.html"/>
      <url>/post/2c973466.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="comment">//1.trait-bound</span></span><br><span class="line"><span class="comment">//2.指定多个trait trait-bound</span></span><br><span class="line"><span class="comment">//3.返回 trait的类型</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">print_information</span>(item: <span class="keyword">impl</span> <span class="title class_">GetInformation</span>) &#123;</span><br><span class="line">  <span class="comment">//这里只关心是否实现impl trait，然后调用item实现的方法即可</span></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;name = &#123;&#125;&quot;</span>,item.<span class="title function_ invoke__">get_name</span>());</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;age = &#123;&#125;&quot;</span>,item.<span class="title function_ invoke__">get_age</span>());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//4. 使用trait bound语法糖将函数参数使用trait简化</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">print_information</span>&lt;T: GetInfromation&gt;(item: T) &#123;</span><br><span class="line">  <span class="comment">//这里只关心是否实现impl trait，然后调用item实现的方法即可</span></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;name = &#123;&#125;&quot;</span>,item.<span class="title function_ invoke__">get_name</span>());</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;age = &#123;&#125;&quot;</span>,item.<span class="title function_ invoke__">get_age</span>());</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">GetName</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span>; </span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">GetAge</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_age</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//5.trait bound，多个trait使用</span></span><br><span class="line"><span class="comment">//5.1 第一种写法</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">print_information</span>&lt;T: GetName+Get&gt;(item: T) &#123; <span class="comment">//对T实现这两个trait</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;name = &#123;&#125;&quot;</span>,item.<span class="title function_ invoke__">get_name</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;age = &#123;&#125;&quot;</span>,item.<span class="title function_ invoke__">get_age</span>());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//5.2 第二种写法</span></span><br><span class="line"><span class="comment">//fn print_information&lt;T&gt;(item: T) </span></span><br><span class="line"><span class="comment">//   where T: GetName+GetAge</span></span><br><span class="line"><span class="comment">//&#123; //对T实现这两个trait</span></span><br><span class="line"><span class="comment">//    println!(&quot;name = &#123;&#125;&quot;,item.get_name());</span></span><br><span class="line"><span class="comment">//    println!(&quot;age = &#123;&#125;&quot;,item.get_age());</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> name: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> age: <span class="type">u32</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> name: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> age: <span class="type">u32</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GetName</span> <span class="keyword">for</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.name</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GetName</span> <span class="keyword">for</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.name</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GetAge</span> <span class="keyword">for</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_age</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.age</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GetAge</span> <span class="keyword">for</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_age</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.age</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//6. trait类型作为返回</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">produce_item_with_age</span>() <span class="punctuation">-&gt;</span> <span class="keyword">impl</span> <span class="title class_">GetAge</span> &#123; <span class="comment">//返回的东西实现了这个triat,返回必须是</span></span><br><span class="line"><span class="comment">//一个具体的类型,if和else中的不是同一个类型</span></span><br><span class="line"><span class="comment">//错误用法</span></span><br><span class="line"><span class="comment">//      let is = true;</span></span><br><span class="line"><span class="comment">//      if is &#123;</span></span><br><span class="line"><span class="comment">//      Student &#123;</span></span><br><span class="line"><span class="comment">//          name: String::from(&quot;xiaoming&quot;),</span></span><br><span class="line"><span class="comment">//          age: 15,</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//      &#125;else &#123;</span></span><br><span class="line"><span class="comment">//      Teacher &#123;</span></span><br><span class="line"><span class="comment">//          name: String::from(&quot;xiaohu&quot;),</span></span><br><span class="line"><span class="comment">//          age: 21,</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//      &#125;</span></span><br><span class="line">      Student &#123;</span><br><span class="line">          name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;xiaoming&quot;</span>),</span><br><span class="line">          age: <span class="number">15</span>,</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = Student &#123;name: <span class="string">&quot;xiaoming&quot;</span>.<span class="title function_ invoke__">to_string</span>(),age: <span class="number">10</span>&#125;;</span><br><span class="line">    <span class="title function_ invoke__">print_information</span>(s);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="title function_ invoke__">produce_item_with_age</span>();</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>trait来简化largest函数</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">largest</span>&lt;T: <span class="built_in">PartialOrd</span> + <span class="built_in">Copy</span>&gt; (list: &amp;[T]) <span class="punctuation">-&gt;</span> T &#123; <span class="comment">//这里相当于泛型需要满足的条件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法</span></span><br><span class="line"><span class="comment">//fn largest&lt;T&gt; (list: &amp;[T]) -&gt; T &#123;</span></span><br><span class="line"><span class="comment">//  where T:PartialOrd+ Copy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//PartialOrd是需要进行数据比较的特征</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">larger</span> = list[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> &amp;item <span class="keyword">in</span> list.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> item &gt; larger &#123;</span><br><span class="line">            larger = item;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    larger</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number_list</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">8</span>,<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">max_number</span> = <span class="title function_ invoke__">largest</span>(&amp;number_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;max_number = &#123;&#125;&quot;</span>,max_number);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">char_list</span> = <span class="built_in">vec!</span>[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">max_char</span> = <span class="title function_ invoke__">largest</span>(&amp;char_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;max_char = &#123;&#125;&quot;</span>,max_char);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-3.trait</title>
      <link href="/post/a08ceda6.html"/>
      <url>/post/a08ceda6.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.trait定义与其他类型共享的功能，类似其他语言的接口</span></span><br><span class="line"><span class="comment">//（1）可以通过trait以抽象的方式定义共享的行为</span></span><br><span class="line"><span class="comment">// (2) 可以使用trait bounds指定泛型是任何拥有特定行为的类型</span></span><br><span class="line"><span class="comment">//2. 定义trait</span></span><br><span class="line"><span class="comment">//3. 实现trait</span></span><br><span class="line"><span class="comment">//4. 默认实现: 可以在定义trait的时候提供默认的行为,trait的类型可以使用默认的行为.</span></span><br><span class="line"><span class="comment">//5. trait作为参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">trait</span> <span class="title class_">GetInformation</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span>;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_age</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">SchoolName</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_school_name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;<span class="comment">//默认实现</span></span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;HongXing School&quot;</span>)<span class="comment">//避免悬垂引用</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//3.</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> name: <span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> age: <span class="type">u32</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">SchoolName</span> <span class="keyword">for</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GetInformation</span> <span class="keyword">for</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_name</span> (&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.name</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_age</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;<span class="comment">//这里因为u32实现了copy trait类型，所以返回本体</span></span><br><span class="line">        <span class="keyword">self</span>.age</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> name:<span class="type">String</span>,</span><br><span class="line">    <span class="keyword">pub</span> age: <span class="type">u32</span>,</span><br><span class="line">    <span class="keyword">pub</span> subject: <span class="type">String</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">GetInformation</span> <span class="keyword">for</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_name</span> (&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.name</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_age</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u32</span> &#123;<span class="comment">//这里因为u32实现了copy trait类型，所以返回本体</span></span><br><span class="line">        <span class="keyword">self</span>.age</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">SchoolName</span> <span class="keyword">for</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_school_name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Guangmingschool&quot;</span>)<span class="comment">//修改默认实现</span></span><br><span class="line">      &#125; </span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//4.</span></span><br><span class="line"><span class="comment">//5.</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">print_information</span>(item: <span class="keyword">impl</span> <span class="title class_">GetInformation</span>) &#123;</span><br><span class="line">  <span class="comment">//这里只关心是否实现impl trait，然后调用item实现的方法即可</span></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;name = &#123;&#125;&quot;</span>,item.<span class="title function_ invoke__">get_name</span>());</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;age = &#123;&#125;&quot;</span>,item.<span class="title function_ invoke__">get_age</span>());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">s</span> = Student&#123;name:<span class="string">&quot;xiaoming&quot;</span>.<span class="title function_ invoke__">to_string</span>(),age:<span class="number">10</span>&#125;;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">t</span> = Teacher&#123;name:<span class="string">&quot;xiaohu&quot;</span>.<span class="title function_ invoke__">to_string</span>(),age:<span class="number">30</span>,subject: <span class="string">&quot;math&quot;</span>.to_string&#125;;</span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;student, name = &#123;&#125;,age = &#123;&#125;&quot;</span>,s.<span class="title function_ invoke__">get_name</span>(),s.<span class="title function_ invoke__">get_age</span>());</span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;student, name = &#123;&#125;,age = &#123;&#125;&quot;</span>,t.<span class="title function_ invoke__">get_name</span>(),t.<span class="title function_ invoke__">get_age</span>());</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> <span class="variable">s_school_name</span> = s.<span class="title function_ invoke__">get_school_name</span>();</span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;student school name = &#123;&#125;&quot;</span>,s_school_name);</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">t_school_name</span> = t.<span class="title function_ invoke__">get_school_name</span>();</span><br><span class="line">   <span class="title function_ invoke__">print_information</span>(s);</span><br><span class="line">   <span class="title function_ invoke__">print_information</span>(t);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-2.结构体更高级别和方法使用泛型</title>
      <link href="/post/5a3b7e5d.html"/>
      <url>/post/5a3b7e5d.html</url>
      
        <content type="html"><![CDATA[<h2 id="结构体中使用泛型">结构体中使用泛型</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体中使用不同的泛型</span></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&lt;T,U&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: U,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = Point&#123;x:<span class="number">1.1</span>,y:<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>,a);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="枚举中使用泛型">枚举中使用泛型</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Option</span>&lt;T&gt; &#123;</span><br><span class="line">     <span class="title function_ invoke__">Some</span>(T),</span><br><span class="line">     <span class="literal">None</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Result</span>&lt;T,E&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(T),</span><br><span class="line">    <span class="title function_ invoke__">Err</span>(E),</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="方法中使用泛型">方法中使用泛型</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># [<span class="title function_ invoke__">derive</span>(<span class="built_in">Debug</span>)]</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&lt;T&gt; &#123;</span><br><span class="line">    x:T,</span><br><span class="line">    y:T,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> &lt;T&gt; Point&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_x</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;T &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.x</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_y</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;T &#123;</span><br><span class="line">        &amp;<span class="keyword">self</span>.y</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point2</span>&lt;T,U&gt; &#123;</span><br><span class="line">    x:T,</span><br><span class="line">    y:U,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> &lt;T,U&gt; Point2&lt;T,U&gt; &#123;</span><br><span class="line">      <span class="keyword">fn</span> <span class="title function_">create_point</span>&lt;V,W&gt; (<span class="keyword">self</span>, other:Point2&lt;V,W&gt;) <span class="punctuation">-&gt;</span> Point2&lt;T,W&gt; &#123;</span><br><span class="line">         <span class="comment">//这里使用self是因为没有实现cpoy trait,如果实现了copy trait就可以</span></span><br><span class="line">         Point2 &#123;</span><br><span class="line">            x: <span class="keyword">self</span>.x,</span><br><span class="line">            y: other.y,</span><br><span class="line">          &#125; </span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">p</span> = Point&#123;x:<span class="number">1.1</span>,y:<span class="number">2.2</span>&#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;,y = &#123;&#125;&quot;</span>,p.<span class="title function_ invoke__">get_x</span>(),p.<span class="title function_ invoke__">get_y</span>()); </span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> <span class="variable">p</span> = Point&#123;x:<span class="number">1.1</span>,y:<span class="number">2.2</span>&#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;,y = &#123;&#125;&quot;</span>,p.<span class="title function_ invoke__">get_x</span>(),p.<span class="title function_ invoke__">get_y</span>());</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">let</span> <span class="variable">p1</span> = Point2&#123;x:<span class="number">5</span>,y:<span class="number">1.1</span>&#125;;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">p2</span> = Point2&#123;x:<span class="string">&quot;hello&quot;</span>,y:<span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">p3</span> = p1.<span class="title function_ invoke__">create_point</span>(p2);</span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;p3 = &#123;:?&#125;&quot;</span>,p3);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>arch遇到更新安装失败:无效或已损坏的软件包</title>
      <link href="/post/1ec861ab.html"/>
      <url>/post/1ec861ab.html</url>
      
        <content type="html"><![CDATA[<ul><li>有时候使用arch的时候，会遇到arch 更新安装已损坏，(无效或者已经损坏的签名包)<br>这个时候只需要对arch的keyring进行更新即可，因为这种情况一般出现在长时间未更新</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S archlinux-keyring &amp;&amp; sudo pacman -Syu</span><br></pre></td></tr></table></figure><ul><li>通常情况下也会遇到Arch缓存过多的情况，此时需要使用以下命令：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">paccache -r <span class="comment"># 清理缓存,仅包含最近的三个版本</span></span><br><span class="line">paccache -rk1 <span class="comment"># 清理缓存,仅包含最近的1个版本</span></span><br><span class="line">pacman -Sc <span class="comment"># 清理未安装软件包</span></span><br><span class="line">pacman -Scc <span class="comment"># 清理缓存中所有内容</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rustp-1.函数和结构体的泛型</title>
      <link href="/post/1cfa41d5.html"/>
      <url>/post/1cfa41d5.html</url>
      
        <content type="html"><![CDATA[<h2 id="没有泛型">没有泛型</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.泛型是具体类型或者其他属性的抽象替代，用于减少代码重复</span></span><br><span class="line"><span class="comment">//2.在函数定义中使用泛型</span></span><br><span class="line"><span class="comment">//3.在结构体中使用泛型</span></span><br><span class="line"><span class="comment">//4.枚举中的泛型</span></span><br><span class="line"><span class="comment">//5.方法中的泛型</span></span><br><span class="line"><span class="comment">//6.总结:使用泛型并不会造成程序性能上的损失，rust通过编译时进行泛型代码的单态化</span></span><br><span class="line"><span class="comment">//来保证效率，单态化时通过填充编译时使用到具体类型，将通用代码转化为特定代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//没有泛型的时候</span></span><br><span class="line"><span class="comment">//for i32 </span></span><br><span class="line"><span class="comment">//使用slice: i32类型</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">largest_i32</span>(list: &amp;[<span class="type">i32</span>]) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">largest</span> = list[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> &amp;item <span class="keyword">in</span> list.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> item &gt; largest &#123;</span><br><span class="line">            largest = item;</span><br><span class="line">          &#125; </span><br><span class="line">      &#125;</span><br><span class="line">    largest</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for char</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">largest_char</span>(list: &amp;[<span class="type">char</span>]) <span class="punctuation">-&gt;</span><span class="type">char</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">largest</span> = list[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> &amp;item <span class="keyword">in</span> list.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> item &gt; largest &#123;</span><br><span class="line">            largest = item;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      largest</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number_list</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">8</span>,<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">max_number</span> = <span class="title function_ invoke__">largest_i32</span>(&amp;number_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;max_number = &#123;&#125;&quot;</span>,max_number);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">char_list</span> = <span class="built_in">vec!</span>[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">max_char</span> = <span class="title function_ invoke__">largest_char</span>(&amp;char_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;max_char = &#123;&#125;&quot;</span>,max_char);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="函数使用泛型">函数使用泛型</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">largest</span>&lt;T: <span class="built_in">PartialOrd</span> + <span class="built_in">Copy</span>&gt; (list: &amp;[T]) <span class="punctuation">-&gt;</span> T &#123; <span class="comment">//这里相当于泛型需要满足的条件</span></span><br><span class="line"><span class="comment">//PartialOrd是需要进行数据比较的特征</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">larger</span> = list[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> &amp;item <span class="keyword">in</span> list.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> item &gt; larger &#123;</span><br><span class="line">            larger = item;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    larger</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number_list</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">23</span>,<span class="number">34</span>,<span class="number">8</span>,<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">max_number</span> = <span class="title function_ invoke__">largest</span>(&amp;number_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;max_number = &#123;&#125;&quot;</span>,max_number);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">char_list</span> = <span class="built_in">vec!</span>[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">max_char</span> = <span class="title function_ invoke__">largest</span>(&amp;char_list);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;max_char = &#123;&#125;&quot;</span>,max_char);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="结构体中使用泛型">结构体中使用泛型</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Point</span>&lt;T&gt; &#123;</span><br><span class="line">    x: T,</span><br><span class="line">    y: T,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">integer</span> = Point&#123;x:<span class="number">1</span>,y:<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:#?&#125;&quot;</span>,integer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">float</span> = Point&#123;x:<span class="number">1.1</span> ,y: <span class="number">2.2</span>&#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>,float);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust20.测试</title>
      <link href="/post/c7b69965.html"/>
      <url>/post/c7b69965.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>测试只有在lib中能够使用(cargo root lib)</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mylib/src/animal.rs</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> Dog &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">hello</span> () &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;wangwang&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">is_dog</span>() <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> Cat &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">hello</span> () &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;miaomiao&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">pub</span> <span class="title function_ invoke__">is_cat</span>() <span class="punctuation">-&gt;</span> <span class="type">bool</span> &#123;</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mylib/src/lib.rs</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">mod</span> animal;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[cfg(test)]</span></span><br><span class="line"><span class="keyword">mod</span> tests &#123;</span><br><span class="line">  <span class="keyword">use</span> crate::animal::Cat;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#[test]</span></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">it_works</span>() &#123;</span><br><span class="line">      <span class="title function_ invoke__">assert_eq</span>(<span class="number">2</span>+<span class="number">2</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="meta">#[test]</span></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">use_cat</span> () &#123;</span><br><span class="line">      <span class="comment">//cat::hello();</span></span><br><span class="line">      <span class="built_in">assert_eq!</span>(<span class="literal">true</span>,Cat::<span class="title function_ invoke__">is_cat</span>());</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#[test]</span></span><br><span class="line">  <span class="keyword">fn</span> <span class="title function_">use_dog</span>() &#123;</span><br><span class="line">      <span class="built_in">assert_eq!</span>(<span class="literal">true</span>,animal::Dog::<span class="title function_ invoke__">is_dog</span>());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust19.错误</title>
      <link href="/post/d09f4c4c.html"/>
      <url>/post/d09f4c4c.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.rust将错误类型分为两个类别:可恢复错误和不可恢复错误</span></span><br><span class="line"><span class="comment">//(1) 可恢复错误通常代表向用户报告错误和重试操作是合理的情况，如未找到文件。</span></span><br><span class="line"><span class="comment">//rust使用Result&lt;T,E&gt;来实现</span></span><br><span class="line"><span class="comment">//(2) 不可恢复错误是bug的同义词，如尝试访问超过数组结尾的位置。rust中通过panic!</span></span><br><span class="line"><span class="comment">//来实现</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. panic!</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.使用BACKTRACE = 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4.Result&lt;T,E&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5.简写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//6. 当编写一个函数，但是函数可能会失败，此时除了在函数中处理错误之外，还可以</span></span><br><span class="line"><span class="comment">//将错误传递给调用者，让调用者处理，称为传播错误</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//7.传播错误的简写方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//8. 更进一步简写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//9.什么时候用panic,什么时候用Result</span></span><br><span class="line"><span class="comment">//(1)示例，代码原型、测试使用panic!\unwrap\expect</span></span><br><span class="line"><span class="comment">//(2)实际项目中使用Result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//10.Option和Result</span></span><br><span class="line"><span class="comment">//为空使用Option,为错误使用Result</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">panic!</span>(<span class="string">&quot;crash here&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3rust中backtrace = 1</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUST_BACKTRACE=1 cargo run <span class="comment"># 显示运行过程中的细节</span></span><br></pre></td></tr></table></figure><ul><li>4.Result&lt;T,E&gt;</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Result</span>&lt;T,E&gt; &#123;</span><br><span class="line">  <span class="title function_ invoke__">Ok</span>(T),</span><br><span class="line">  <span class="title function_ invoke__">Err</span>(E),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>5.简写</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;Hello.txt&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">r</span> = <span class="keyword">match</span> f &#123;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(file) =&gt; file,</span><br><span class="line">      <span class="title function_ invoke__">Err</span>(error) =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;error: &#123;:?&#125;&quot;</span>,error),</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实际上可以:(编译器提示)</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;Hello.txt&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>或者(自行提示)</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;Hello.txt&quot;</span>).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to open hello.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ol start="6"><li></li></ol></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io;</span><br><span class="line"><span class="keyword">use</span> std::io::Read;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r</span> = <span class="title function_ invoke__">read_username_from_file</span>();</span><br><span class="line">    <span class="keyword">match</span> r &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(s) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;s = &#123;&#125;&quot;</span>,s),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;err = &#123;:?&#125;&quot;</span>,e),</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">read_username_from_file</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>,io: Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">f</span> = <span class="keyword">match</span> f &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(file) =&gt; file,</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(error) =&gt; <span class="keyword">return</span> <span class="title function_ invoke__">Err</span>(error),</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">match</span> f.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> s) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(_) =&gt; <span class="title function_ invoke__">Ok</span>(s),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(error) =&gt; <span class="title function_ invoke__">Err</span>(error),</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>7.这一部分实际上可以简写,使用?抛出error</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">read_username_from_file</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>,io: Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">f</span> = File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>)?;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    f.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> s)?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(s)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>8.进一步简化,使用连写的方式</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">read_username_from_file</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>,io: Error&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    File::<span class="title function_ invoke__">open</span>(<span class="string">&quot;hello.txt&quot;</span>)?.<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> s)?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(s)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust18.模块</title>
      <link href="/post/71870472.html"/>
      <url>/post/71870472.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前面有3节模块1,模块2,模块3的内容没有保存...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模块4">模块4</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cargo.toml</span></span><br><span class="line">[package]</span><br><span class="line">name = <span class="string">&quot;learn&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">authors = [<span class="string">&quot;andy&quot;</span>]</span><br><span class="line">edition = <span class="string">&quot;2018&quot;</span></span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">rust-crypto = <span class="string">&quot;0.2&quot;</span> <span class="comment">//使用外部库</span></span><br></pre></td></tr></table></figure><ul><li>使用这个库<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="keyword">crate</span> crypto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> crypto::digest::Digest;</span><br><span class="line"><span class="keyword">use</span> crypto::sha3::Sha3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hasher</span> = Sha3::<span class="title function_ invoke__">sha3_256</span>();</span><br><span class="line">    hasher.<span class="title function_ invoke__">input_str</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = hasher.<span class="title function_ invoke__">result_str</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;hash == &#123;&#125;&quot;</span>,result);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rust17.hashmap</title>
      <link href="/post/162e6f93.html"/>
      <url>/post/162e6f93.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.HashMap&lt;K,V&gt;</span></span><br><span class="line"><span class="comment">//2.创建HashMap</span></span><br><span class="line"><span class="comment">//3.读取</span></span><br><span class="line"><span class="comment">//4.遍历</span></span><br><span class="line"><span class="comment">//5.更新</span></span><br><span class="line">us std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">scoures</span>: HashMap&lt;<span class="type">String</span>,<span class="type">i32</span>&gt; = HahsMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>),<span class="number">10</span>);</span><br><span class="line">    scores.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Red&quot;</span>),<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">keys</span> = <span class="built_in">vec!</span>[<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>),<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Red&quot;</span>)];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">value</span> = <span class="built_in">vec!</span>[<span class="number">10</span>,<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">scores</span>: HashMap&lt;_,_&gt; = keys.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">zip</span>(values.<span class="title function_ invoke__">iter</span>()).<span class="title function_ invoke__">collect</span>();<span class="comment">//HashMap</span></span><br><span class="line">    <span class="comment">//当中的&lt;_,_&gt;表示这里有这样的值，但是我们不关心值的类型。</span></span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">k</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Blue&quot;</span>);</span><br><span class="line">    <span class="comment">//let v = scores.get(&amp;k); //v = 10</span></span><br><span class="line">    <span class="comment">//不能够直接打印，因为get输出的为Option类型，需要使用模式匹配或者if let</span></span><br><span class="line">    <span class="comment">//println!(&quot;Blue = &#123;&#125;&quot;,v);</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(v) = scores.<span class="title function_ invoke__">get</span>(&amp;k) &#123; <span class="comment">//get 返回一个Option类型</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Blue = &#123;&#125;&quot;</span>,v);</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">k</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span> = scores.<span class="title function_ invoke__">get</span>(&amp;k);</span><br><span class="line">    <span class="keyword">match</span> v &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(value) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Blue = &#123;&#125;&quot;</span>,value),</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="built_in">println!</span>(<span class="string">&quot;None&quot;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//4.遍历:顺序是任意的</span></span><br><span class="line">    <span class="title function_ invoke__">for</span> (key,value) <span class="keyword">in</span> &amp;scores &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;,&#123;&#125;&quot;</span>,key,value);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//5.</span></span><br><span class="line">    <span class="comment">//直接插入</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">ss</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    ss.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;one&quot;</span>),<span class="number">1</span>);</span><br><span class="line">    ss.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;two&quot;</span>),<span class="number">2</span>);</span><br><span class="line">    ss.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;three&quot;</span>),<span class="number">3</span>);</span><br><span class="line">    <span class="comment">//同名会覆盖</span></span><br><span class="line">    ss.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;one&quot;</span>),<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>,ss);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//键不存在时插入</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">ss1</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    ss1.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;one&quot;</span>),<span class="number">1</span>);</span><br><span class="line">    ss1.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;two&quot;</span>),<span class="number">2</span>);</span><br><span class="line">    ss1.<span class="title function_ invoke__">insert</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;three&quot;</span>),<span class="number">3</span>);</span><br><span class="line">    ss1.<span class="title function_ invoke__">entry</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;one&quot;</span>)).<span class="title function_ invoke__">or_insert</span>(<span class="number">3</span>);<span class="comment">//只有键值不存在才插入</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>,ss1);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据旧值来更新一个值</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">text</span> = <span class="string">&quot;Hello world wonderful world&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">map</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">word</span> <span class="keyword">in</span> text.<span class="title function_ invoke__">split_whitespace</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">count</span> = map.<span class="title function_ invoke__">entry</span>(word).<span class="title function_ invoke__">or_insert</span>(<span class="number">0</span>);</span><br><span class="line">        *count += <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust16.字符串string</title>
      <link href="/post/3a0e865c.html"/>
      <url>/post/3a0e865c.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note info %&#125;</span><br><span class="line">实际上rust核心中一般使用<span class="type">str</span>类型，很少出现string，这种是在编译库中实现的</span><br><span class="line">&#123;% endnote%&#125;</span><br><span class="line"><span class="comment">//1.创建一个空string</span></span><br><span class="line"><span class="comment">//2.通过字面值创建一个string</span></span><br><span class="line"><span class="comment">//2.1 使用string::from()</span></span><br><span class="line"><span class="comment">//2.2 使用str的方式</span></span><br><span class="line"><span class="comment">//3. 更新string</span></span><br><span class="line"><span class="comment">//3.1 push_str</span></span><br><span class="line"><span class="comment">//3.2 push</span></span><br><span class="line"><span class="comment">//3.3 使用&quot;+&quot;合并字符串</span></span><br><span class="line"><span class="comment">//3.4 使用format</span></span><br><span class="line"><span class="comment">//4. string索引</span></span><br><span class="line"><span class="comment">//5. str索引</span></span><br><span class="line"><span class="comment">//6. 遍历</span></span><br><span class="line"><span class="comment">//6.1 chars</span></span><br><span class="line"><span class="comment">//6.2 bytes</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s0</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    s0.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s0 = &#123;&#125;&quot;</span>,s0);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    <span class="comment">//2.1</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;init some thing&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s1 = &#123;&#125;&quot;</span>,s1);</span><br><span class="line">    <span class="comment">//2.2</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="string">&quot;init som thing&quot;</span>.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s1 = &#123;&#125;&quot;</span>,s1);</span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    <span class="comment">//3.1</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    s2.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;,world&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s2 = &#123;&#125;&quot;</span>,s2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ss</span> = <span class="string">&quot;!&quot;</span>.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">    s2.<span class="title function_ invoke__">push_str</span>(&amp;ss);<span class="comment">//使用ss的引用值</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s2 = &#123;&#125;&quot;</span>,s2);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;ss = &#123;&#125;&quot;</span>,ss);<span class="comment">//并没有拿走字符串ss的所有权</span></span><br><span class="line">    <span class="comment">//3.2</span></span><br><span class="line">    <span class="comment">//push只能添加一个字符</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;tea&quot;</span>);</span><br><span class="line">    s2.<span class="title function_ invoke__">push</span>(<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">    <span class="comment">//仍然报错，因为双引号代表引用</span></span><br><span class="line">    <span class="comment">//s2.push(&quot;mx&quot;);</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s2 = &#123;&#125;&quot;</span>,s2);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//3.3合并字符串</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="string">&quot;hello&quot;</span>.to_string;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;,world&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s3</span> = s1 + &amp;s2;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s3 = &#123;&#125;&quot;</span>,s3);</span><br><span class="line">    <span class="comment">//s1已经不能够使用，因为s1所有权给了s3</span></span><br><span class="line">    <span class="comment">//println!(&quot;s1 = &#123;&#125;&quot;,s1);</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s2 = &#123;&#125;&quot;</span>,s2);</span><br><span class="line">    <span class="comment">//3.4</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s341</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;tic&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s342</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;tac&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s343</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;toe&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s344</span> = <span class="built_in">format!</span>(<span class="string">&quot;&#123;&#125;-&#123;&#125;-&#123;&#125;&quot;</span>,s341,s342,s343);<span class="comment">//format宏和println宏类似，</span></span><br><span class="line">    <span class="comment">//但是format是给到变量，而println!是给到std::out。</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s344 = &#123;&#125;&quot;</span>,s344);</span><br><span class="line">    <span class="comment">//4.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s4</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s41</span> = s4[<span class="number">0</span>];<span class="comment">//string不能被索引</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s4.len = &#123;&#125;&quot;</span>,s4.<span class="title function_ invoke__">len</span>());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用utf-8编码，所以汉字长度为3个字符</span></span><br><span class="line">    <span class="comment">//没法对齐，所以不能获取索引</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s4</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s4.len = &#123;&#125;&quot;</span>,s4);</span><br><span class="line">    <span class="comment">//5.</span></span><br><span class="line">    <span class="comment">//但是使用str(slice)可以</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">hello</span> = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">h5</span> = &amp;hello[<span class="number">0</span>..<span class="number">3</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;h5 = &#123;&#125;&quot;</span>,h5);</span><br><span class="line">    <span class="comment">//但是不能够取到非边界。</span></span><br><span class="line">    <span class="comment">//let h6 = &amp;hello[0..2];</span></span><br><span class="line">    <span class="comment">//println!(&quot;h6 = &#123;&#125;&quot;,h6);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//6.</span></span><br><span class="line">    <span class="comment">//chars</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">c</span> <span class="keyword">in</span> s4.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;c  = &#123;&#125;&quot;</span>,c);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//bytes</span></span><br><span class="line">    <span class="comment">//按照字节打印</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">b</span> <span class="keyword">in</span> s4.<span class="title function_ invoke__">bytes</span>() &#123;</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;b = &#123;&#125;&quot;</span>,b);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust15.vector</title>
      <link href="/post/301e4a08.html"/>
      <url>/post/301e4a08.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.创建空的vector: Vec&lt;T&gt;</span></span><br><span class="line"><span class="comment">//2.创建包含初始值的vector</span></span><br><span class="line"><span class="comment">//3.丢弃vector</span></span><br><span class="line"><span class="comment">//4.读取元素</span></span><br><span class="line"><span class="comment">//5.更新</span></span><br><span class="line"><span class="comment">//6.遍历</span></span><br><span class="line"><span class="comment">//7.使用枚举</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">//1.创建</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="comment">//创建变量和之前一样，如果是不可变变量，就不能够改变了</span></span><br><span class="line">    <span class="comment">//下面的会报错</span></span><br><span class="line">    <span class="comment">//let v: Vec&lt;i32&gt; = Vec::new();</span></span><br><span class="line">    <span class="comment">//vc.push(1);</span></span><br><span class="line">    vec.<span class="title function_ invoke__">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">v1</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//4.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">one</span>: &amp;<span class="type">i32</span> = &amp;v[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;oen = &#123;&#125;&quot;</span>,one);<span class="comment">//进行了自动转换</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;one = &#123;&#125;&quot;</span>,*one);<span class="comment">//实际上应该为下面这种方法</span></span><br><span class="line">    <span class="comment">//(2)推荐的方法 </span></span><br><span class="line">    <span class="comment">//因为这种方法对越界进行处理</span></span><br><span class="line">    <span class="keyword">match</span> v.<span class="title function_ invoke__">get</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(value) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;value = &#123;&#125;&quot;</span>,value),</span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;None&quot;</span>),</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">    <span class="comment">//5.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v2</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = <span class="type">Vec</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    v2.<span class="title function_ invoke__">push</span>(<span class="number">1</span>);</span><br><span class="line">    v2.<span class="title function_ invoke__">push</span>(<span class="number">2</span>);</span><br><span class="line">    v2.<span class="title function_ invoke__">push</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.遍历</span></span><br><span class="line">    <span class="comment">//(1)不可变遍历</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> &amp;v2 &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;i = &#123;&#125;&quot;</span>,i);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//(2)可变遍历</span></span><br><span class="line">    <span class="comment">//相当于可变引用</span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> &amp;<span class="keyword">mut</span> v2 &#123;</span><br><span class="line">        *i += <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;i = &#123;&#125;&quot;</span>,i);</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//7</span></span><br><span class="line">    <span class="comment">//也就是说vec也可以放置不同类型的元素</span></span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">       <span class="title function_ invoke__">Text</span>(<span class="type">String</span>),</span><br><span class="line">       <span class="title function_ invoke__">Float</span>(<span class="type">f32</span>),</span><br><span class="line">       <span class="title function_ invoke__">Int</span>(<span class="type">i32</span>),</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span> = <span class="built_in">vec!</span>[</span><br><span class="line">        Context::<span class="title function_ invoke__">Text</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;String&quot;</span>)),</span><br><span class="line">        Context::<span class="title function_ invoke__">Int</span>(-<span class="number">1</span>),</span><br><span class="line">        Context::<span class="title function_ invoke__">Float</span>(<span class="number">0</span>,<span class="number">001</span>)</span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">//8.</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    <span class="comment">//同时使用了可变引用和不可变引用，会报错</span></span><br><span class="line">    <span class="comment">//let first = &amp;v[0];</span></span><br><span class="line">    <span class="comment">//v.push(6);</span></span><br><span class="line">    <span class="comment">//println!(&quot;first = &#123;&#125;&quot;,first);</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust14.Option</title>
      <link href="/post/baf0074b.html"/>
      <url>/post/baf0074b.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Option是标准库定义的一种枚举类型</span></span><br><span class="line"><span class="comment">//enum Option&lt;T&gt; &#123;</span></span><br><span class="line"><span class="comment">//    Some(T),</span></span><br><span class="line"><span class="comment">//    None,</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//match 必须匹配所有的情况</span></span><br><span class="line"><span class="comment">//2. 使用方式</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">some_number</span> = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">some_string</span> = <span class="title function_ invoke__">Some</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;a string&quot;</span>));</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">absent_number</span>: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; = <span class="literal">None</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">x</span>: <span class="type">i32</span> = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">y</span>: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; = <span class="title function_ invoke__">Some</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="comment">//不能使用，因为x和y类行不同</span></span><br><span class="line">  <span class="comment">//let sum = x + y;</span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">temp</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">match</span> y &#123;</span><br><span class="line">    <span class="title function_ invoke__">Some</span>(i) =&gt; &#123;temp = i; &#125;</span><br><span class="line">    <span class="literal">None</span> =&gt; &#123;<span class="built_in">println!</span>(<span class="string">&quot;Do Nothing!&quot;</span>);&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">sum</span> = x + temp;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;sum = &#123;&#125;&quot;</span>,sum);</span><br><span class="line">  <span class="comment">//有时候使用match并不方便，尤其是在只对一种情况处理的情况之下，这个时候可以使用</span></span><br><span class="line">  <span class="comment">//if let，这在《通过例子学习Rust》中也有介绍。</span></span><br><span class="line">  <span class="comment">//let result = plus_one(y);</span></span><br><span class="line">  <span class="comment">//match result &#123;</span></span><br><span class="line">  <span class="comment">//  Some(i) =&gt; println!(&quot;Result = &#123;&#125;&quot;,result),</span></span><br><span class="line">  <span class="comment">//    None =&gt; println!(&quot;Nothing&quot;),</span></span><br><span class="line">  <span class="comment">//&#125;;</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(value) = <span class="title function_ invoke__">plus_one</span>(y) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;value = &#123;&#125;&quot;</span>,value);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(value) = <span class="title function_ invoke__">plus_one</span>(y) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;value = &#123;&#125;&quot;</span>,value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;do nothing&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">plus_one</span>(x: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">match</span> x &#123;</span><br><span class="line">    <span class="literal">None</span> =&gt; <span class="literal">None</span>,</span><br><span class="line">         <span class="title function_ invoke__">Some</span>(x) =&gt; <span class="title function_ invoke__">Some</span>(x+<span class="number">1</span>),</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust13.枚举和模式匹配</title>
      <link href="/post/6f7cf15c.html"/>
      <url>/post/6f7cf15c.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//这一部分应当放在函数体内部，因为有分号，此处为了方便第5部分没有修改</span></span><br><span class="line">  <span class="comment">//1.类似C方法定义</span></span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">IpAddKind</span> &#123;</span><br><span class="line">    V4,</span><br><span class="line">    V6,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">IpAddr</span> &#123;</span><br><span class="line">    kind: IpAddKind,</span><br><span class="line">          address: <span class="type">String</span>,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">i1</span> = IpAddr &#123;</span><br><span class="line">    kind: IpAddKind::V4,</span><br><span class="line">          address: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;127.0.0.1&quot;</span>),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">i2</span> = IpAddr &#123;</span><br><span class="line">    kind: IpAddKind::V6,</span><br><span class="line">          address: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;::1&quot;</span>),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//2. 以rust方式进行定义</span></span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">IpAdd2</span> &#123;</span><br><span class="line">       <span class="title function_ invoke__">V4</span>(<span class="type">String</span>),</span><br><span class="line">       <span class="title function_ invoke__">V6</span>(<span class="type">String</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">i1</span> = IpAdd2::<span class="title function_ invoke__">V4</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;127.0.0.1&quot;</span>));</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">i2</span> = IpAdd2::<span class="title function_ invoke__">V6</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;::1&quot;</span>));</span><br><span class="line">  <span class="comment">//3.可以是不同类型</span></span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">IpAddr3</span> &#123;</span><br><span class="line">      <span class="title function_ invoke__">V4</span>(<span class="type">u8</span>,<span class="type">u8</span>,<span class="type">u8</span>,<span class="type">u8</span>),</span><br><span class="line">      <span class="title function_ invoke__">V6</span>(<span class="type">String</span>),</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">i1</span> = IpAddr3::<span class="title function_ invoke__">V4</span>(<span class="number">127</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">i2</span> = IpAddr3::<span class="title function_ invoke__">V6</span>(<span class="string">&quot;String::from(&quot;</span>::<span class="number">1</span>)<span class="string">&quot;);</span></span><br><span class="line"><span class="string">  //4.经典用法</span></span><br><span class="line"><span class="string">  enum Message &#123;</span></span><br><span class="line"><span class="string">      Quit,</span></span><br><span class="line"><span class="string">      Move&#123;x: i32,y: i32&#125;, //move是一个结构体</span></span><br><span class="line"><span class="string">      Write(String),</span></span><br><span class="line"><span class="string">      Change(i32,i32,i32),</span></span><br><span class="line"><span class="string">    &#125;;</span></span><br><span class="line"><span class="string">  //等同于</span></span><br><span class="line"><span class="string">  //struct QuitMessage; //类单元结构体</span></span><br><span class="line"><span class="string">  //struct MoveMessage &#123;</span></span><br><span class="line"><span class="string">  //    x: i32,</span></span><br><span class="line"><span class="string">  //    y: i32,</span></span><br><span class="line"><span class="string">  // &#125;</span></span><br><span class="line"><span class="string">  // struct WriteMessage(String)</span></span><br><span class="line"><span class="string">  //struct Change(i32,i32,i32)</span></span><br><span class="line"><span class="string">  //5.枚举类型的方法和match</span></span><br><span class="line"><span class="string">impl Message &#123;</span></span><br><span class="line"><span class="string">    fn prin(&amp;self) &#123;</span></span><br><span class="line"><span class="string">        match *self &#123;  //解引用</span></span><br><span class="line"><span class="string">                Message::Quit =&gt; println!(&quot;</span>Quit<span class="string">&quot;),</span></span><br><span class="line"><span class="string">                Message::Move&#123;x,y&#125; =&gt; println!(&quot;</span>Move x = &#123;&#125;,y = &#123;&#125;<span class="string">&quot;,x,y),</span></span><br><span class="line"><span class="string">                Message::Change(a,b,c) =&gt; println!(&quot;</span>Change a = &#123;&#125;, b = &#123;&#125;,c = &#123;&#125;<span class="string">&quot;,a,b,c),</span></span><br><span class="line"><span class="string">                _ =&gt; println!(&quot;</span>Write<span class="string">&quot;)</span></span><br><span class="line"><span class="string">                //此处会报错，因为这是一个引用，而真正想要的是string类型</span></span><br><span class="line"><span class="string">                //Message::Write(&amp;s) =&gt; println!(&quot;</span>Write = &#123;&#125;<span class="string">&quot;,s)</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">      &#125;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">fn main() &#123;</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">   let quit = Messag::Quit;</span></span><br><span class="line"><span class="string">   quit.prin();</span></span><br><span class="line"><span class="string">   let mo = Messag::Move &#123;x: 10 , y: 20&#125;;</span></span><br><span class="line"><span class="string">   mo.prin();</span></span><br><span class="line"><span class="string">   let wri = Message::Write(String::from(&quot;</span>Hello<span class="string">&quot;));</span></span><br><span class="line"><span class="string">   wri.prin();</span></span><br><span class="line"><span class="string">   let change = Message::Change(1,2,3);</span></span><br><span class="line"><span class="string">   change.prin();</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust12.方法</title>
      <link href="/post/8cb4b774.html"/>
      <url>/post/8cb4b774.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    name: <span class="type">String</span>,</span><br><span class="line">    weight: <span class="type">f32</span>,</span><br><span class="line">    height: <span class="type">f32</span>,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_name</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> &#123;</span><br><span class="line">        &amp;(<span class="keyword">self</span>.name[..])</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_height</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">f32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.height</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">sound</span>() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;wang-wang-wang!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Dog</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get_weight</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">f32</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.weight</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">dog</span> = Dog &#123;</span><br><span class="line">        name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;wangcai&quot;</span>),</span><br><span class="line">        weight: <span class="number">100.5</span>,</span><br><span class="line">        height: <span class="number">70.5</span>,</span><br><span class="line">      &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;dog = &#123;:#?&#125;&quot;</span>,dog);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;name = &#123;&#125;&quot;</span>,dog.<span class="title function_ invoke__">get_name</span>());</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;weight = &#123;&#125;&quot;</span>,dog.<span class="title function_ invoke__">get_weight</span>());</span><br><span class="line"></span><br><span class="line">    Dog::<span class="title function_ invoke__">show</span>();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust11.结构体</title>
      <link href="/post/b6484d7.html"/>
      <url>/post/b6484d7.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">//1.定义结构体</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">User</span> &#123;</span><br><span class="line">        name: <span class="type">String</span>,</span><br><span class="line">        count: <span class="type">String</span>,</span><br><span class="line">        nonce: <span class="type">u64</span>,</span><br><span class="line">        active: <span class="type">bool</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="comment">//2.创建结构体实例</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">xiaoming</span> = User &#123;</span><br><span class="line">        name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Xiaoming&quot;</span>),</span><br><span class="line">        count: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;80001000&quot;</span>),</span><br><span class="line">        nonce: <span class="number">10000</span>,</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">      &#125;; </span><br><span class="line">    <span class="comment">//3.修改结构体字段</span></span><br><span class="line">     <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">xiaohuang</span> = User &#123;</span><br><span class="line">        name: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Xiaohuang&quot;</span>),</span><br><span class="line">        count: <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;80001000&quot;</span>),</span><br><span class="line">        nonce: <span class="number">10000</span>,</span><br><span class="line">        active: <span class="literal">true</span>,</span><br><span class="line">      &#125;; </span><br><span class="line">     xiaohuang.nonce = <span class="number">20000</span>;</span><br><span class="line">     <span class="comment">//4.参数名字和字段名字同名的简写方法</span></span><br><span class="line">     <span class="keyword">let</span> <span class="variable">name</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;xiaoxiao&quot;</span>);</span><br><span class="line">     <span class="keyword">let</span> <span class="variable">count</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;58398439&quot;</span>);</span><br><span class="line">     <span class="keyword">let</span> <span class="variable">nonce</span> = <span class="number">20000</span>;</span><br><span class="line">     <span class="keyword">let</span> <span class="variable">active</span> = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*let user1 = User &#123;</span></span><br><span class="line"><span class="comment">      name: name,</span></span><br><span class="line"><span class="comment">      count: count,</span></span><br><span class="line"><span class="comment">      nonce: nonce,</span></span><br><span class="line"><span class="comment">      active: active,</span></span><br><span class="line"><span class="comment">      &#125;;*/</span></span><br><span class="line">     <span class="keyword">let</span> <span class="variable">user1</span> = User &#123;</span><br><span class="line">        name,</span><br><span class="line">        count,</span><br><span class="line">        nonce,</span><br><span class="line">        active,</span><br><span class="line">      &#125;;</span><br><span class="line">     <span class="comment">//5.从其它结构体创建实例</span></span><br><span class="line">     <span class="keyword">let</span> <span class="variable">user2</span> =  User &#123;</span><br><span class="line">        <span class="comment">//name: user1.name,</span></span><br><span class="line">        name = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;user2&quot;</span>),</span><br><span class="line">        ..user1</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;name = &#123;&#125; &quot;</span>,user2.name);</span><br><span class="line">     <span class="comment">//6.元组结构体</span></span><br><span class="line">     <span class="comment">//字段没有名字，使用圆括号</span></span><br><span class="line">     <span class="keyword">struct</span> <span class="title class_">Point</span>(<span class="type">i32</span>,<span class="type">i32</span>);</span><br><span class="line">     </span><br><span class="line">     <span class="keyword">let</span> <span class="variable">a</span> = <span class="title function_ invoke__">Point</span>(<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">     <span class="keyword">let</span> <span class="variable">b</span> = <span class="title function_ invoke__">Point</span>(<span class="number">3</span>,<span class="number">11</span>);</span><br><span class="line"></span><br><span class="line">     <span class="built_in">println!</span>(<span class="string">&quot;a.x = &#123;&#125;, a.y = &#123;&#125;&quot;</span>,a.<span class="number">0</span>,a.<span class="number">1</span>);</span><br><span class="line">     <span class="comment">//7.没有任何字段的类单元结构体</span></span><br><span class="line">     <span class="keyword">struct</span> <span class="title class_">A</span>&#123;&#125;;</span><br><span class="line">     <span class="comment">//8.打印结构体</span></span><br><span class="line">     <span class="meta">#[derive(Debug)]</span> <span class="comment">//或者自行实现display特征</span></span><br><span class="line">     <span class="built_in">println!</span>(<span class="string">&quot;xiaoming = &#123;:?&#125;&quot;</span>,xiaoming);</span><br><span class="line">     <span class="built_in">println!</span>(<span class="string">&quot;xiaoming = &#123;:#?&#125;&quot;</span>,xiaoming);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust10.slice</title>
      <link href="/post/abce96b8.html"/>
      <url>/post/abce96b8.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>字符串slice是String的一部分引用<br>字面值就是slice<br>其他类型的slice</p></div>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">h</span> = &amp;s[<span class="number">0</span>..<span class="number">5</span>];<span class="comment">//从0到5之前</span></span><br><span class="line">                   <span class="comment">//let h = &amp;s[0..=4];</span></span><br><span class="line">                   <span class="comment">//let h = &amp;s[..=4];</span></span><br><span class="line">                   <span class="comment">//let h = &amp;s[..5]</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">w</span> = &amp;s[<span class="number">6</span>..<span class="number">11</span>];</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">w</span> = &amp;s[<span class="number">6</span>..=<span class="number">10</span>];</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">w</span> = &amp;s[..];<span class="comment">//等于整个s</span></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;w= &#123;&#125;&quot;</span>,w);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">ss</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">w1</span> = &amp;s[<span class="number">0</span>..<span class="number">1</span>];<span class="comment">//报错，这个是因为char为32位。</span></span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;h = &#123;&#125;&quot;</span>,h);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">s3</span> = <span class="string">&quot;hh&quot;</span>;<span class="comment">//slice(或者叫做&amp;str)，相当于不可变引用</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">sss</span> = &amp;a[<span class="number">1</span>..<span class="number">3</span>];</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;sss = &#123;&#125;&quot;</span>,sss[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;sss = &#123;&#125;&quot;</span>,sss[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust9.引用</title>
      <link href="/post/f14d5d33.html"/>
      <url>/post/f14d5d33.html</url>
      
        <content type="html"><![CDATA[<ul><li>普通方法</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="title function_ invoke__">gives_ownership</span>();</span><br><span class="line">    <span class="comment">//将hello的值转给s1，s1仍然可以使用。</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s1  = &#123;&#125;&quot;</span>,s1);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s3</span> = <span class="title function_ invoke__">takes_and_gives_back</span>(s2);</span><br><span class="line">    <span class="comment">//因为s2已经转移至s3中，所以s2不能继续使用了</span></span><br><span class="line">    <span class="comment">//println!(&quot;s2 = &#123;&#125;&quot;,s2);</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s4</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s3</span> = <span class="title function_ invoke__">takes_and_gives_back</span>(s4);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s4</span> = <span class="title function_ invoke__">takes_and_gives_back</span>(s3);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s4 = &#123;&#125;&quot;</span>,s4);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">gives_ownership</span>() <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    s</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">takes_and_gives_back</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">    s</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>引用<ol><li>引用要么只能有多个不可变引用，要么只能有一个可变引用（同一时间下）</li><li>引用必须有效，不能使用悬垂引用</li></ol></li></ul><div class="note info modern"><p>实际上引用只是指向原字符串指针的指针。</p></div><p><img src="/myimg/%E5%BC%95%E7%94%A8.png" alt=""></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用：用法&amp;，让我们创建一个指向值的引用，但是并不拥有这个值，当引用离开其值</span></span><br><span class="line"><span class="comment">//指向的作用域并不会被丢弃。因此引用也不能修改原值·</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">calcute</span> <span class="title function_ invoke__">length</span>(s: &amp;<span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">usize</span> &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">len</span>()</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">modify_s</span> (s:&amp; <span class="keyword">mut</span> <span class="type">String</span>) &#123;</span><br><span class="line">    s.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;,world&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">   <span class="keyword">let</span> <span class="variable">s1</span>  =<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">   <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s2</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">   <span class="comment">//let len = calcute_length(s1);</span></span><br><span class="line">   <span class="comment">//注释掉的会报错</span></span><br><span class="line">   <span class="keyword">let</span> <span class="variable">len</span> = <span class="title function_ invoke__">calcute_length</span>(&amp;s1);</span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;length = &#123;&#125;&quot;</span>,len);</span><br><span class="line">   <span class="comment">//报错</span></span><br><span class="line">   <span class="comment">//modify_s(&amp;s2);</span></span><br><span class="line">   <span class="comment">//使用借用，借用的格式是在之前添加mut</span></span><br><span class="line">   <span class="title function_ invoke__">modify_s</span>(&amp; <span class="keyword">mut</span> s2);</span><br><span class="line">   <span class="built_in">println!</span>(<span class="string">&quot;s2 = &#123;&#125;&quot;</span>,s2);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">r1</span> = &amp;s1;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">r2</span> = &amp;s1;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;r1 = &#123;&#125;,r2 = &#123;&#125;&quot;</span>,r1,r2);</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">r3</span> = &amp; <span class="keyword">mut</span> s1;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;r3 = &#123;&#125;&quot;</span>,r3);</span><br><span class="line">  <span class="comment">//报错，因为rust不希望同时使用可变引用和不可变引用。可变引用改变后不可变引用的</span></span><br><span class="line">  <span class="comment">//值很难处理。也就是说在使用借用之后不能使用可变引用。</span></span><br><span class="line">  <span class="comment">//println!(&quot;r1 = &#123;&#125;,r2 = &#123;&#125;,r3 = &#123;&#125;&quot;,r1,r2,r3);</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>悬垂引用</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ref_s</span> = <span class="title function_ invoke__">dangle</span>();</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">//s此时已经被回收了，再返回它的引用，这个内存中的内容已经回收掉了，所以此时</span></span><br><span class="line"><span class="comment">//咩用</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">dangle</span>() <span class="punctuation">-&gt;</span> &amp;<span class="type">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    &amp;s</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust8.slice</title>
      <link href="/post/613b74b3.html"/>
      <url>/post/613b74b3.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">h</span> = &amp;s[<span class="number">0</span>..<span class="number">5</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">h</span> =&amp;s[<span class="number">0</span>..=<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">h</span> = &amp;s[..=<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">h</span> = &amp;s[..<span class="number">5</span>];</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;h= &#123;&#125;&quot;</span>,h);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust7.所有权</title>
      <link href="/post/b3b7bf4d.html"/>
      <url>/post/b3b7bf4d.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//rust 使用所有权机制管理内存，在编译过程中编译器会根据所有权规则对内存使用进行检查</span></span><br><span class="line"><span class="comment">//堆和栈</span></span><br><span class="line"><span class="comment">//编译过程中数据大小固定在栈上分配</span></span><br><span class="line"><span class="comment">//编译过程中数据大小不固定分配在栈上</span></span><br><span class="line"><span class="comment">//作用域</span></span><br><span class="line"><span class="comment">//String内存回收</span></span><br><span class="line"><span class="comment">//移动</span></span><br><span class="line"><span class="comment">//clone</span></span><br><span class="line"><span class="comment">//栈上数据拷贝</span></span><br><span class="line"><span class="comment">//函数和作用域</span></span><br><span class="line"><span class="comment">//指针在栈中，指针指向的值在堆中</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">x</span> :<span class="type">i32</span> = <span class="number">1</span>;<span class="comment">//栈</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> :<span class="type">i32</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125;&quot;</span>,x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y = &#123;&#125;&quot;</span>,y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//脱离作用域</span></span><br><span class="line">  <span class="comment">//println!(&quot;y = &#123;&#125;&quot;,y);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//</span></span><br><span class="line">  <span class="comment">//这些方法均为堆上数据拷贝</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s1</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="comment">//字符串在编译过程中大小不固定，可以变换大小，所以在堆上</span></span><br><span class="line">    s1.<span class="title function_ invoke__">push_str</span>(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s1 = &#123;&#125;&quot;</span>,s1);</span><br><span class="line">    <span class="comment">//drop析构函数</span></span><br><span class="line">    <span class="comment">//String类型离开作用域时候调用drop方法</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s2</span> = s1;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s2 = &#123;&#125; &quot;</span>,s2);</span><br><span class="line">    <span class="comment">//s2借用了s1</span></span><br><span class="line">    <span class="comment">//报错</span></span><br><span class="line">    <span class="comment">//因为只是浅拷贝,相当于移动</span></span><br><span class="line">    <span class="comment">//println!(&quot;s1 = &#123;&#125;&quot;,s1);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//深拷贝</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s3</span> = s2.<span class="title function_ invoke__">clone</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s2 = &#123;&#125;&quot;</span>,s2);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;s3 = &#123;&#125;&quot;</span>,s3);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//实现copy方法就能实现栈上拷贝</span></span><br><span class="line">  <span class="comment">//copy trait</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">b</span> = a;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;a = &#123;&#125; &quot;</span>,a);</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;b = &#123;&#125; &quot;</span>,b);</span><br><span class="line">  <span class="comment">//常用的具有copy trait特征的有所有的整形、浮点型、布尔值、字符类型、元组</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>函数作用域<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果将string参数返回则可以使用</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">takes_ownership</span>(som_string: <span class="type">String</span>) &#123;</span><br><span class="line"><span class="comment">//fn takes_ownership(some_string: String) -&gt; String &#123;</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,some_string);</span><br><span class="line">    <span class="comment">//some_string</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">makes_copy</span>(i : <span class="type">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;i = &#123;&#125;&quot;</span>,i);</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span> () &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">takes_ownership</span>(s);</span><br><span class="line">    <span class="comment">//打印不了s</span></span><br><span class="line">    <span class="comment">//因为函数已经退出了它的作用域</span></span><br><span class="line">    <span class="comment">//也就是内存回收了</span></span><br><span class="line">    <span class="comment">//println!(&quot;s = &#123;&#125;&quot;,s);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line">    <span class="title function_ invoke__">makes_copy</span>(x);</span><br><span class="line">    <span class="comment">//在栈上的内存</span></span><br><span class="line">    <span class="comment">//具有copy trait的类型，相当于函数调用是拷贝</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x&quot;</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust6.控制流</title>
      <link href="/post/7a090a1b.html"/>
      <url>/post/7a090a1b.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">y</span> = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">//if</span></span><br><span class="line">  <span class="keyword">if</span> y == <span class="number">1</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y = 1 &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//if - else </span></span><br><span class="line">  <span class="keyword">if</span> y == <span class="number">1</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y == &#123;&#125;&quot;</span>,y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y != 1&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// if -else if - else</span></span><br><span class="line">  <span class="keyword">if</span> y == <span class="number">1</span> &#123;<span class="built_in">println!</span> (<span class="string">&quot;y = 1&quot;</span>);&#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> y == <span class="number">2</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y = 2&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> y == <span class="number">3</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y = 3 &quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;other!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//let 中使用if</span></span><br><span class="line">  <span class="comment">//两个分支中的值应当属于同一类型</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">condition</span> = <span class="literal">true</span> ;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">x</span> = <span class="keyword">if</span> condition &#123;</span><br><span class="line">    <span class="number">5</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="number">6</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;x = &#123;&#125; &quot;</span>,x);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//loop</span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">counter</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">loop</span> &#123;</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;in loop&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      counter += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//let 和 loop</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">result</span> = <span class="keyword">loop</span> &#123;</span><br><span class="line">      counter += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> counter == <span class="number">20</span> &#123;</span><br><span class="line">          <span class="keyword">break</span> counter*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  <span class="comment">//while 循环</span></span><br><span class="line">  <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> i != <span class="number">10</span> &#123;</span><br><span class="line">      i+= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;i = &#123;&#125;&quot;</span>,i);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//for 循环</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable">arr</span> : [<span class="type">u32</span>;<span class="number">5</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">  <span class="comment">//这种方法也可以</span></span><br><span class="line">  <span class="comment">//for element in &amp;arr</span></span><br><span class="line">  <span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> arr.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">      <span class="built_in">println!</span>(<span class="string">&quot;element = &#123;&#125;&quot;</span>,*element);</span><br><span class="line">      <span class="comment">//也可以使用</span></span><br><span class="line">      <span class="comment">//println!(&quot;element = &#123;&#125;&quot;,element);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust5.语句</title>
      <link href="/post/dca005f7.html"/>
      <url>/post/dca005f7.html</url>
      
        <content type="html"><![CDATA[<h1 id="语句和表达式">语句和表达式</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语句用来执行一些操作，不返回值的指令</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = <span class="number">1</span>;<span class="comment">//不返回值</span></span><br><span class="line"><span class="comment">//下面这段代码在C语言中成立，但是在Rust中报错。</span></span><br><span class="line"><span class="comment">//let x = (let y = 1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//表达式会计算一些值</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">y</span> = &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// x + 1; //报错</span></span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust4.函数</title>
      <link href="/post/d28a8584.html"/>
      <url>/post/d28a8584.html</url>
      
        <content type="html"><![CDATA[<h1 id="函数的三种类型">函数的三种类型</h1><ul><li>有参数有返回值</li><li>有参数无返回值</li><li>无参数无返回值</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">other_fun</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;This is a function&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">other_fun1</span> (a: <span class="type">i32</span>, b: <span class="type">u32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a = &#123;&#125; , b = &#123;&#125;&quot;</span> , a,b);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">other_fun2</span> (a :<span class="type">i32</span> , b: <span class="type">i32</span> ) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">result</span> = a + b;</span><br><span class="line">    <span class="comment">//c语言常用这种写法返回，但是Rust使用下面的写法较多</span></span><br><span class="line">    <span class="comment">//return result;</span></span><br><span class="line">    result<span class="comment">//或者直接使用a+b也可以</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">other_fun</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span>: <span class="type">i32</span> = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>: <span class="type">u32</span> = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">c</span>: <span class="type">i32</span> = <span class="number">6</span>;</span><br><span class="line">    <span class="title function_ invoke__">other_fun1</span>(a,b);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">r</span>: <span class="type">i32</span> = <span class="title function_ invoke__">other_fun2</span>(a,c);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;r = &#123;&#125; &quot;</span>,r );</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust2.数据类型</title>
      <link href="/post/839ff10d.html"/>
      <url>/post/839ff10d.html</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>Rust中变量和函数命名方法是蛇形命名法(小写字母加下划线),而在类和常量一般为首字母大写或者是大写字母。</p></div><h2 id="基本数据类型">基本数据类型</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//布尔类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">is_bool</span>: <span class="type">bool</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">is_false</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="comment">//char字符，这个字符的大小是32位</span></span><br><span class="line"><span class="comment">//32位字符大小是因为不仅仅是包括ASCII码，他是一种基本的unicode类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">b</span> = <span class="string">&#x27;你&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">c</span> = &#x27;🐈&#x27;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//数字类型</span></span><br><span class="line"><span class="comment">//i8,i16,i32,i64,u8,u16,u32,u64,f32,f64</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">c</span>: <span class="type">i8</span> = -<span class="number">111</span>;<span class="comment">// -128 ~ 127</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认整形长度为i32,浮点型为f64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">d</span>: <span class="type">f32</span> = <span class="number">0.0009</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自适应类型</span></span><br><span class="line"><span class="comment">//长度随着计算机平台不同而变化，如指针在16位平台上是16位</span></span><br><span class="line"><span class="comment">//主要是isize,usize</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;max = &#123;&#125;&quot;</span>,<span class="type">usize</span>::<span class="title function_ invoke__">max_value</span>()); <span class="comment">//如64位无符号最大长度</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="复合数据类型">复合数据类型</h2><h3 id="数组">数组</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="comment">//[Type; size], size是数组类型的一部分</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">arr</span>: [<span class="type">u32</span>; <span class="number">5</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>] ;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;arr[0] = &#123;&#125; &quot;</span>,arr[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">let</span> <span class="variable">arr1</span>: [<span class="type">u32</span>;<span class="number">3</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">  <span class="comment">//size是数组的一部分</span></span><br><span class="line">  <span class="comment">//会报错，因为在rust中，size是真实存在的，而在C和C++中传递数组仅仅是一个指针。</span></span><br><span class="line">  <span class="comment">//show(arr);</span></span><br><span class="line">  <span class="title function_ invoke__">show</span>(arr1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">show</span>(array : [<span class="type">u32</span>;<span class="number">3</span>]) &#123;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> &amp;array &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">println!</span>(<span class="string">&quot;---------------------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元组">元组</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元组</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>,<span class="type">f32</span>,<span class="type">char</span>) = (-<span class="number">3</span>,<span class="number">3.69</span>,<span class="string">&#x27;好&#x27;</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,tup.<span class="number">0</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,tup.<span class="number">1</span>);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,tup.<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//隐藏</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">tup</span> = (-<span class="number">3</span>,<span class="number">3.67</span>,<span class="string">&#x27;坏&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//元组解构</span></span><br><span class="line"><span class="keyword">let</span> (x,y,z) = tup;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,x);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,y);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,z);</span><br></pre></td></tr></table></figure><div class="note info modern"><p>内容较多，有专门的章节介绍</p></div><h3 id="枚举">枚举</h3><h3 id="结构体">结构体</h3><h3 id="字符串">字符串</h3>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rust1.变量和常量</title>
      <link href="/post/8217d474.html"/>
      <url>/post/8217d474.html</url>
      
        <content type="html"><![CDATA[<h1 id="常量">常量</h1><p>在函数体外部使用：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Max_POINTS: <span class="type">u32</span> = <span class="number">10000</span>;</span><br></pre></td></tr></table></figure><h1 id="变量">变量</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line"><span class="comment">//let name : type</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//自动判断数据类型</span></span><br><span class="line"><span class="comment">//相当于let a: u32 = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//mut关键字可以改变变量</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">b</span> : <span class="type">u32</span> = <span class="number">1</span>;</span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//隐藏</span></span><br><span class="line"><span class="comment">//同一函数体中同名变量会替换之前的变量</span></span><br><span class="line"><span class="keyword">let</span> <span class="variable">b</span> : <span class="type">f32</span> = <span class="number">1.1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode--3.无重复字符的最长字串</title>
      <link href="/post/53df1f83.html"/>
      <url>/post/53df1f83.html</url>
      
        <content type="html"><![CDATA[<h1 id="滑窗解决问题">滑窗解决问题</h1><ul><li>没有重复的最大字串是在出现第二个和首字符相同的字符的情况之下出现断开<br>而这种情况之下可以选择使用滑块方法解决：<ol><li>第k个字符作为起始位置，到rk结束</li><li>第k+1个字符开始，到rk的时候，此时是不重复的，所以可以将rk值进行增大，直到和k+1个字符相等。</li></ol></li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看代码    </button><div class="hide-content"><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">length_of_longest_substring</span>(s: <span class="type">String</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">occ</span>: HashSet&lt;<span class="type">char</span>&gt; = HashSet::<span class="title function_ invoke__">new</span>();</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">cv</span>: <span class="type">Vec</span>&lt;<span class="type">char</span>&gt; = s.<span class="title function_ invoke__">chars</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line">      <span class="keyword">let</span> <span class="variable">n</span> = s.<span class="title function_ invoke__">len</span>();</span><br><span class="line">    </span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">rk</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">ans</span> = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..n&#123;</span><br><span class="line">          <span class="keyword">if</span> i != <span class="number">0</span> &#123;</span><br><span class="line">              occ.<span class="title function_ invoke__">remove</span>(&amp;cv[i-<span class="number">1</span>]);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">while</span> rk &lt; n &amp;&amp; !occ.<span class="title function_ invoke__">contains</span>(&amp;cv[rk]) &#123;</span><br><span class="line">              occ.<span class="title function_ invoke__">insert</span>(cv[rk]);</span><br><span class="line">              rk += <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          ans = ans.<span class="title function_ invoke__">max</span>(rk - i);</span><br><span class="line">      &#125;</span><br><span class="line">      ans <span class="keyword">as</span> <span class="type">i32</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode第二题两数相加</title>
      <link href="/post/47510722.html"/>
      <url>/post/47510722.html</url>
      
        <content type="html"><![CDATA[<h1 id="leetcode第二题两数相加">leetcode第二题两数相加</h1><div class="note info modern"><p>这道题目的解决方法是使用两数相加中的初等数学，利用两个数，两个数的进位这总共三个变量来进行判断<br>可以设置一个元组tuple,分别记录这几个数的状态，一般的状态有以下几种：</p><ul><li>两数都为None,没有进位-&gt;此时直接退出<br>两数为None，有进位(这个进位是上一阶段的链表所进的位数) -&gt; 此时结果为进位<br>两个链表有一个此刻为None，根据进位状态又可以分为:<ol><li>有进位，将链表值和进位相加，如果大于等于10，则结果产生新的进位，这个阶段的值为list.val+carry-10。</li><li>没有进位，将链表值和进位相加，值为list.val+carry<br>两个链表都存在，结果和上一阶段类似</li></ol></li><li>最后将返回的值进行递进。</li></ul></div><p><img src="/myimg/le2.png" alt=""></p><div class="hide-block"><button type="button" class="hide-button" style="">查看代码    </button><div class="hide-content"><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Definition for singly-linked list.</span></span><br><span class="line"><span class="meta">#[derive(PartialEq, Eq, Clone, Debug)]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">struct</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">   <span class="keyword">pub</span> val: <span class="type">i32</span>,</span><br><span class="line">   <span class="keyword">pub</span> next: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">impl</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">   <span class="meta">#[inline]</span></span><br><span class="line">   <span class="keyword">fn</span> <span class="title function_">new</span>(val: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="keyword">Self</span> &#123;</span><br><span class="line">     ListNode &#123;</span><br><span class="line">       next: <span class="literal">None</span>,</span><br><span class="line">       val</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">add_two_numbers</span>(l1: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;, l2: <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="type">Box</span>&lt;ListNode&gt;&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">result</span> = <span class="literal">None</span>;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">tail</span> = &amp;<span class="keyword">mut</span> result;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">t</span> = (l1,l2,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">loop</span> &#123;</span><br><span class="line">            t = <span class="keyword">match</span> t &#123;</span><br><span class="line">                (<span class="literal">None</span>,<span class="literal">None</span>,_,<span class="number">0</span>) =&gt; <span class="keyword">break</span>,</span><br><span class="line">                (<span class="literal">None</span>,<span class="literal">None</span>,_,carry) =&gt; (<span class="literal">None</span>,<span class="literal">None</span>,carry,<span class="number">0</span>),</span><br><span class="line">                (<span class="title function_ invoke__">Some</span>(list),<span class="literal">None</span>,_,carry) | (<span class="literal">None</span>,<span class="title function_ invoke__">Some</span>(list),_,carry) <span class="keyword">if</span> list.val + carry &gt;= <span class="number">10</span> =&gt; &#123;</span><br><span class="line">                    (list.next,<span class="literal">None</span>,list.val+carry-<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                (<span class="title function_ invoke__">Some</span>(list),<span class="literal">None</span>,_,carry) | (<span class="literal">None</span>,<span class="title function_ invoke__">Some</span>(list),_,carry) =&gt; &#123;</span><br><span class="line">                    (list.next,<span class="literal">None</span>,list.val+carry,<span class="number">0</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                (<span class="title function_ invoke__">Some</span>(l1),<span class="title function_ invoke__">Some</span>(l2),_,carry) <span class="keyword">if</span> l1.val + l2.val + carry &gt;=<span class="number">10</span> =&gt; &#123;</span><br><span class="line">                    (l1.next,l2.next,l1.val+l2.val+carry-<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                (<span class="title function_ invoke__">Some</span>(l1),<span class="title function_ invoke__">Some</span>(l2),_,carry) =&gt; &#123;</span><br><span class="line">                    (l1.next,l2.next,l1.val+l2.val+carry,<span class="number">0</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            *tail = <span class="title function_ invoke__">Some</span>(<span class="type">Box</span>::<span class="title function_ invoke__">new</span>(ListNode::<span class="title function_ invoke__">new</span>(t.<span class="number">2</span>)));</span><br><span class="line">            tail = &amp;<span class="keyword">mut</span> tail.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>().next;</span><br><span class="line">        &#125;</span><br><span class="line">        result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div><ul><li>这段代码实际上就是一种链式存储结构线性表的应用</li><li>其中应用到的as_mut()</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看解释    </button><div class="hide-content"><p>这个函数是指针的应用，如果指针为<code>null</code>,返回None，否则返回Some(val)。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">ptr</span>: *<span class="keyword">mut</span> <span class="type">u32</span> = s.<span class="title function_ invoke__">as_mut_ptr</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">first_value</span> = <span class="keyword">unsafe</span> &#123; ptr.<span class="title function_ invoke__">as_mut</span>().<span class="title function_ invoke__">unwrap</span>() &#125;;</span><br><span class="line">*first_value = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, s); <span class="comment">// 它会打印: &quot;[4, 2, 3]&quot;。</span></span><br></pre></td></tr></table></figure><p>确定指针永不为空，如果正在寻找某种返回<code>&amp;mut T</code>而不是<code>Option&lt;&amp;mut T&gt;</code>的<code>as_mut_unchecked</code>,可以直接使用指针</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">ptr</span>: *<span class="keyword">mut</span> <span class="type">u32</span> = s.<span class="title function_ invoke__">as_mut_ptr</span>();</span><br><span class="line"><span class="keyword">let</span> <span class="variable">first_value</span> = <span class="keyword">unsafe</span> &#123; &amp;<span class="keyword">mut</span> *ptr &#125;;</span><br><span class="line">*first_value = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, s); <span class="comment">// 它会打印: &quot;[4, 2, 3]&quot;。</span></span><br></pre></td></tr></table></figure></div></div>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Rust迭代器</title>
      <link href="/post/88d6a8a2.html"/>
      <url>/post/88d6a8a2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Iterator">Iterator</h1><h2 id="Iter和for循环">Iter和for循环</h2><div class="note info modern"><p>Rust中调用迭代器的接口就是Iterator，通常情况之下看到的<mark class="hl-label blue">for循环</mark> 就是这种迭代器的语法糖。<br>这种for循环使用<code>into_iter()</code>在T上迭代。</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">Iterator</span> &#123;</span><br><span class="line">    <span class="keyword">type</span> <span class="title class_">Item</span>;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">next</span>(&amp;<span class="keyword">mut</span> <span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;<span class="keyword">Self</span>::Item&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通常情况之下，使用for循环会消耗这个集合，因为使用了<code>into_iter()</code>方法，但是实际上可以使用其他方法，如:</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看    </button><div class="hide-content"><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">values</span> = <span class="built_in">vec!</span>[<span class="number">41</span>];</span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> values.<span class="title function_ invoke__">iter_mut</span>() &#123;</span><br><span class="line">    *x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> values.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">    <span class="built_in">assert_eq!</span>(*x, <span class="number">42</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">assert_eq!</span>(values.<span class="title function_ invoke__">len</span>(), <span class="number">1</span>); <span class="comment">// `values` 仍然属于此函数。</span></span><br></pre></td></tr></table></figure><p>或者下面的:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">values</span> = <span class="built_in">vec!</span>[<span class="number">41</span>];</span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> &amp;<span class="keyword">mut</span> values &#123; <span class="comment">// 与 `values.iter_mut()` 相同</span></span><br><span class="line">    *x += <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> &amp;values &#123; <span class="comment">// 与 `values.iter()` 相同</span></span><br><span class="line">    <span class="built_in">assert_eq!</span>(*x, <span class="number">42</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">assert_eq!</span>(values.<span class="title function_ invoke__">len</span>(), <span class="number">1</span>);</span><br></pre></td></tr></table></figure><div class="note info modern"><p>二者相同，因为如果集合类型 C 提供 iter()，则它通常还为 &amp;C 实现 IntoIterator，而该实现只是调用 iter()。 同样，提供 iter_mut() 的集合 C 通常通过委派给 iter_mut() 来为 &amp;mut C 实现 IntoIterator。</p></div></div></div><h2 id="Adapters">Adapters</h2><ul><li>接受Iterator并且返回另外一个Iterator的函数叫做迭代器适配器。常见的方法有map、take、filter。</li><li>map()</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看介绍    </button><div class="hide-content"><p>map通常是是实现一个闭包，这个闭包是<code>FnMut</code>(实例可以重复调用，并且可以改变值)类型的，它的作用是:<br>将一种A元素转换为想要的B元素。<br>map()和for循环比较像，但是如果已经使用了其他类型的迭代器，最好使用map()；而在使用某种循环的副作用，使用for</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = a.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|x| <span class="number">2</span> * x);</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">4</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">6</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure><p>关于副作用（<mark class="hl-label blue">这段代码不会运行</mark> ）</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不要这样做：</span></span><br><span class="line">(<span class="number">0</span>..<span class="number">5</span>).<span class="title function_ invoke__">map</span>(|x| <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 它甚至不会执行，因为它很懒。Rust 会就此警告您。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 而是用于：</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><ul><li>filter</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看代码    </button><div class="hide-content"><p>过滤值，同样是创建一个闭包(这个闭包会获取引用)</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">0i32</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = a.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">filter</span>(|x| x.<span class="title function_ invoke__">is_positive</span>());</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">1</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">2</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure><p>在使用过程中会遇到多个迭代器使用的时候，这个时候需要双引用，这个时候filter就需要进行改进:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = a.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">filter</span>(|x| **x &gt; <span class="number">1</span>); <span class="comment">// 需要两个 *s!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">2</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure><p>可以使用解构去掉一个</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = a.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">filter</span>(|&amp;x| *x &gt; <span class="number">1</span>); <span class="comment">// &amp; 和 *</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">2</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure><p>或者两个</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = a.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">filter</span>(|&amp;&amp;x| x &gt; <span class="number">1</span>); <span class="comment">// 两个 &amp;s</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">2</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure></div></div><ul><li>take</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看解释    </button><div class="hide-content"><p>take创建一个迭代器，在迭代过程之中提前结束</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = a.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">take</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">1</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(&amp;<span class="number">2</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure><p>take() 通常与无限迭代器一起使用，以使其成为有限的：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = (<span class="number">0</span>..).<span class="title function_ invoke__">take</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">0</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure><p>如果少于 n 个元素可用，take 会将自身限制为底层迭代器的大小：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = v.<span class="title function_ invoke__">into_iter</span>().<span class="title function_ invoke__">take</span>(<span class="number">5</span>);</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">1</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure></div></div><ul><li>enumerate</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看解释    </button><div class="hide-content"><p>enumerate会创建一个迭代器，这个迭代器给出当前的迭代次数以及下一个值，返回的迭代器索引是(i,val),i为当前索引，val是迭代器返回的值。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = a.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>((<span class="number">0</span>, &amp;<span class="string">&#x27;a&#x27;</span>)));<span class="comment">//因为是迭代器，所以这里是用了解引用</span></span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>((<span class="number">1</span>, &amp;<span class="string">&#x27;b&#x27;</span>)));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>((<span class="number">2</span>, &amp;<span class="string">&#x27;c&#x27;</span>)));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure></div></div><ul><li>zip</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看解释    </button><div class="hide-content"><p>zip会将两个迭代器压缩为单个迭代器，这个迭代器是成对的。</p><div class="note warning modern"><p>如果其中一个迭代器返回None，则整个迭代器返回None</p></div><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a1</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">a2</span> = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">iter</span> = a1.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">zip</span>(a2.<span class="title function_ invoke__">iter</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>((&amp;<span class="number">1</span>, &amp;<span class="number">4</span>)));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>((&amp;<span class="number">2</span>, &amp;<span class="number">5</span>)));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="title function_ invoke__">Some</span>((&amp;<span class="number">3</span>, &amp;<span class="number">6</span>)));</span><br><span class="line"><span class="built_in">assert_eq!</span>(iter.<span class="title function_ invoke__">next</span>(), <span class="literal">None</span>);</span><br></pre></td></tr></table></figure></div></div><ul><li>collect</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">查看解释    </button><div class="hide-content"><p>collect会将可迭代的东西收集成为一个集合，基本方法是使用iter，最后使用collect</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">doubled</span>: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; = a.<span class="title function_ invoke__">iter</span>()</span><br><span class="line">                         .<span class="title function_ invoke__">map</span>(|&amp;x| x * <span class="number">2</span>)</span><br><span class="line">                         .<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="built_in">vec!</span>[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>], doubled);</span><br></pre></td></tr></table></figure><p>请注意，我们需要在左侧使用 : Vec<i32>。这是因为我们可以代替收集到例如 VecDeque<T> 中：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::VecDeque;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">doubled</span>: VecDeque&lt;<span class="type">i32</span>&gt; = a.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|&amp;x| x * <span class="number">2</span>).<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="number">2</span>, doubled[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="number">4</span>, doubled[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="number">6</span>, doubled[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure><p>使用 ‘turbofish’ 而不是注解 doubled：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">doubled</span> = a.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|x| x * <span class="number">2</span>).collect::&lt;<span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="built_in">vec!</span>[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>], doubled);</span><br></pre></td></tr></table></figure><p>因为 collect() 只关心您要收集的内容，所以您仍然可以将局部类型提示 _ 与 turbfish 一起使用：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">doubled</span> = a.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|x| x * <span class="number">2</span>).collect::&lt;<span class="type">Vec</span>&lt;_&gt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="built_in">vec!</span>[<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>], doubled);</span><br></pre></td></tr></table></figure><p>使用 collect() 生成 String：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">chars</span> = [<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;n&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">hello</span>: <span class="type">String</span> = chars.<span class="title function_ invoke__">iter</span>()</span><br><span class="line">    .<span class="title function_ invoke__">map</span>(|&amp;x| x <span class="keyword">as</span> <span class="type">u8</span>)</span><br><span class="line">    .<span class="title function_ invoke__">map</span>(|x| (x + <span class="number">1</span>) <span class="keyword">as</span> <span class="type">char</span>)</span><br><span class="line">    .<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="string">&quot;hello&quot;</span>, hello);</span><br></pre></td></tr></table></figure><p>如果您有 Result&lt;T, E&gt;，您可以使用 collect() 来查看它们是否失败：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">results</span> = [<span class="title function_ invoke__">Ok</span>(<span class="number">1</span>), <span class="title function_ invoke__">Err</span>(<span class="string">&quot;nope&quot;</span>), <span class="title function_ invoke__">Ok</span>(<span class="number">3</span>), <span class="title function_ invoke__">Err</span>(<span class="string">&quot;bad&quot;</span>)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">result</span>: <span class="type">Result</span>&lt;<span class="type">Vec</span>&lt;_&gt;, &amp;<span class="type">str</span>&gt; = results.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">cloned</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给我们第一个错误</span></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="title function_ invoke__">Err</span>(<span class="string">&quot;nope&quot;</span>), result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">results</span> = [<span class="title function_ invoke__">Ok</span>(<span class="number">1</span>), <span class="title function_ invoke__">Ok</span>(<span class="number">3</span>)];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">result</span>: <span class="type">Result</span>&lt;<span class="type">Vec</span>&lt;_&gt;, &amp;<span class="type">str</span>&gt; = results.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">cloned</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给我们答案列表</span></span><br><span class="line"><span class="built_in">assert_eq!</span>(<span class="title function_ invoke__">Ok</span>(<span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">3</span>]), result);</span><br></pre></td></tr></table></figure></div></div><h2 id="迭代器的惰性">迭代器的惰性</h2><p>通常情况之下迭代器如果作用的结果是副作用的时候，尽量使用for，因为编译器会警告，并且这不会运行。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">v</span> = <span class="built_in">vec!</span>[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">v.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">for_each</span>(|x| <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x));</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">for</span> <span class="variable">x</span> <span class="keyword">in</span> &amp;v &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Infinity">Infinity</h2><p>开放式迭代器是无限迭代器。<br>可以使用take方法更改。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">numbers</span> = <span class="number">0</span>..;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">five_numbers</span> = numbers.<span class="title function_ invoke__">take</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> <span class="variable">number</span> <span class="keyword">in</span> five_numbers &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, number);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="迭代器的三种形式">迭代器的三种形式</h2><ul><li>iter():在&amp;T上迭代<br>iter_mut():在&amp;mut上迭代<br>into_iter():在T上迭代<br>更多内容可以查看<a href="https://rustwiki.org/zh-CN/std/iter/index.html">std::iter</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust迭代器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode--1.两数之和</title>
      <link href="/post/1b9ebf26.html"/>
      <url>/post/1b9ebf26.html</url>
      
        <content type="html"><![CDATA[<h1 id="两数之和">两数之和</h1><ul><li>这个问题如果使用最简单的办法是暴力破解，它的运行时间会比较长，而且时间复杂度为O(n^2)</li><li>使用哈希表处理较为方便：  <mark class="hl-label blue">哈希表</mark> 通过`key`来锁定每一个值对应的下标，也就是说哈希表要设置成`hash(val,idx)`,索引在后，hash在前的方法，通过<mark class="hl-label -">target</mark> 的方法来对照HashMap，查找对应的索引，将<mark class="hl-label blue">正在索引</mark> 的idx和HashMap对应的idx返回。</li></ul><div class="hide-block"><button type="button" class="hide-button" style="">代码 blue    </button><div class="hide-content"><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">two_sum</span>(nums: <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt;, target: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">Vec</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">hash</span> = HashMap::<span class="title function_ invoke__">with_capacity</span>(nums.<span class="title function_ invoke__">len</span>());</span><br><span class="line">    <span class="title function_ invoke__">for</span> (idx,&amp;val) <span class="keyword">in</span> nums.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(&amp;find) = hash.<span class="title function_ invoke__">get</span>(&amp;(target - val)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">vec!</span>[find <span class="keyword">as</span> <span class="type">i32</span>,idx <span class="keyword">as</span> <span class="type">i32</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        hash.<span class="title function_ invoke__">insert</span>(val,idx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">panic!</span>(<span class="string">&quot;Cannot find the solution&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--23.兼容性</title>
      <link href="/post/737a2bb6.html"/>
      <url>/post/737a2bb6.html</url>
      
        <content type="html"><![CDATA[<h1 id="兼容性">兼容性</h1><ul><li>rust自己有许多关键字需要进行使用，这个时候如果我们想要使用这个关键字，就需要使用原始标志符重写代码</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--22.不安全操作</title>
      <link href="/post/c18cb5ee.html"/>
      <url>/post/c18cb5ee.html</url>
      
        <content type="html"><![CDATA[<h1 id="不安全操作">不安全操作</h1><ul><li>减少不安全代码的使用量，它主要用在以下几个方面：<br>解引用裸指针<br>通过 FFI 调用函数（外部语言调用函数接口）<br>调用不安全的函数<br>内联汇编（inline assembly）</li></ul><h2 id="原始指针">原始指针</h2><p><em>和&amp;T有类似的功能，但是</em>不能够保证指针指向地域数据有效。</p><h2 id="调用不安全函数">调用不安全函数</h2><p>一些函数必须由程序员自己负责，因为这些程序（如指针必须指向有效的内存）。</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--21.测试</title>
      <link href="/post/abf7f2f0.html"/>
      <url>/post/abf7f2f0.html</url>
      
        <content type="html"><![CDATA[<h1 id="测试">测试</h1><div class="note info modern"><p>Rust自身支持测试，有三种风格：<br>单元测试<br>文档测试<br>集成测试<br>也可以在测试中指定额外的依赖</p></div><h2 id="单元测试">单元测试</h2><ul><li><p>单元测试基本上会被放在叫做tests，有着#[cfg(test)]属性的模块之中。测试要加上#[test]属性。</p></li><li><p>某些函数在特定状态下会产生panic，如果想要测试成功并且使用这种属性，添加<code>#[should_panic]</code>属性。同时可以指定panic状态值下的消息，通过<code>expect</code>指定。</p></li><li><p>可以运行特定的测试、可以运行被忽略的测试。</p></li></ul><h2 id="文档测试">文档测试</h2><ul><li>这种方法在你发布crate很有用，使用markdown语法，并且支持test</li></ul><h2 id="开发依赖">开发依赖</h2><p>如果仅仅需要在测试中使用的依赖，一般放在Cargo.toml里面的<code>[dev-dependencies]</code>之中。</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--20.标准库更多介绍</title>
      <link href="/post/766b32cb.html"/>
      <url>/post/766b32cb.html</url>
      
        <content type="html"><![CDATA[<h1 id="标准库更多介绍">标准库更多介绍</h1><div class="note info modern"><p>标准库提供了很多其他类型支持某些功能，如:<br>线程(Threads)<br>信道(Channels)<br>文件输入输出(File I/O)</p></div><h2 id="线程">线程</h2><ul><li>Rust通过<code>spawn</code>函数提供了创建本地操作系统的机制，该函数参数是通过值捕获变量的闭包</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> NTHREADS: <span class="type">i32</span> = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是主（`main`）线程</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 提供一个 vector 来存放所创建的子线程（children）。</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">children</span> = <span class="built_in">vec!</span>[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..NTHREADS &#123;</span><br><span class="line">        <span class="comment">// 启动（spin up）另一个线程</span></span><br><span class="line">        children.<span class="title function_ invoke__">push</span>(thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;this is thread number &#123;&#125;&quot;</span>, i)</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">child</span> <span class="keyword">in</span> children &#123;</span><br><span class="line">        <span class="comment">// 等待线程结束。返回一个结果。</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">_</span> = child.<span class="title function_ invoke__">join</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试实例：map-reduce">测试实例：map-reduce</h2><ul><li>Rust提供可以直接使用的线程类型。主要有XOR、Mutex、Channel这三种类型。</li></ul><h2 id="通道">通道</h2><ul><li>Rust为线程之间通信提供了异步的通道，通道允许两个端点之间信息单向流动：<code>Sender</code>(发送端)和<code>Receiver</code>(接收端)</li></ul><h2 id="路径">路径</h2><ul><li>Path结构体代表了底层文件系统的文件路径。分为两种：<br>类Unix系统： posix::Path<br>windows系统： windows:Path</li><li>Path在内部不是以UTF-8字符串表示，而是以若干字节vec<u8>这样的vector表示，所以将Path转换为&amp;str是有消耗的，并且可能失败，因此将其定义为一个<code>Option</code>。</li></ul><h2 id="文件输入输出-I-O">文件输入输出(I/O)</h2><ul><li>I/O在进行文件输入输出时可能会产生错误，因此<code>File</code>的所有方法均返回io::Result<T>类型，这是Result&lt;T,io::Error&gt;的别名。</li></ul><h3 id="打开文件open">打开文件open</h3><ul><li>open静态方法以只读模式打开文件</li><li>File会在自身被<code>drop</code>时关闭文件。</li></ul><h3 id="创建文件create">创建文件create</h3><ul><li>create以只写模式打开文件，如果文件存在，旧的内容会被销毁，否则创建一个新的文件。</li><li>还有其他方法类似<code>read+write</code>,在Rust标准库中可以查找到。</li></ul><h3 id="读取行">读取行</h3><ul><li>该文件必须在当前路径之中</li><li>处理大文件的时候对比String更加有效。</li></ul><h2 id="子进程">子进程</h2><ul><li>process::Output表示已经结束的子进程</li><li>process::Command表示是一个进程的创建者</li></ul><p>这些命令相当于是在命令行输入对应的命令。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::process::Command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">output</span> = Command::<span class="title function_ invoke__">new</span>(<span class="string">&quot;rustc&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;--version&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">output</span>().<span class="title function_ invoke__">unwrap_or_else</span>(|e| &#123;</span><br><span class="line">            <span class="built_in">panic!</span>(<span class="string">&quot;failed to execute process: &#123;&#125;&quot;</span>, e)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> output.status.<span class="title function_ invoke__">success</span>() &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from_utf8_lossy</span>(&amp;output.stdout);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;rustc succeeded and stdout was:\n&#123;&#125;&quot;</span>, s);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from_utf8_lossy</span>(&amp;output.stderr);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print!</span>(<span class="string">&quot;rustc failed and stderr was:\n&#123;&#125;&quot;</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="管道">管道</h3><ul><li>首先创建管道，接着写入管道，最后查看stdout的字段，必须解包，因为字段拥有Option<ChildStdout>类型。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::io::prelude::*;</span><br><span class="line"><span class="keyword">use</span> std::process::&#123;Command, Stdio&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> PANGRAM: &amp;<span class="symbol">&#x27;static</span> <span class="type">str</span> =</span><br><span class="line"><span class="string">&quot;the quick brown fox jumped over the lazy dog\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 启动 `wc` 命令</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">process</span> = <span class="keyword">match</span> Command::<span class="title function_ invoke__">new</span>(<span class="string">&quot;wc&quot;</span>)</span><br><span class="line">                                .<span class="title function_ invoke__">stdin</span>(Stdio::<span class="title function_ invoke__">piped</span>())</span><br><span class="line">                                .<span class="title function_ invoke__">stdout</span>(Stdio::<span class="title function_ invoke__">piped</span>())</span><br><span class="line">                                .<span class="title function_ invoke__">spawn</span>() &#123;</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(why) =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;couldn&#x27;t spawn wc: &#123;:?&#125;&quot;</span>, why),</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(process) =&gt; process,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将字符串写入 `wc` 的 `stdin`。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// `stdin` 拥有 `Option&lt;ChildStdin&gt;` 类型，不过我们已经知道这个实例不为空值，</span></span><br><span class="line">    <span class="comment">// 因而可以直接 `unwrap 它。</span></span><br><span class="line">    <span class="keyword">match</span> process.stdin.<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">write_all</span>(PANGRAM.<span class="title function_ invoke__">as_bytes</span>()) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(why) =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;couldn&#x27;t write to wc stdin: &#123;:?&#125;&quot;</span>, why),</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(_) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;sent pangram to wc&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为 `stdin` 在上面调用后就不再存活，所以它被 `drop` 了，管道也被关闭。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// 这点非常重要，因为否则 `wc` 就不会开始处理我们刚刚发送的输入。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// `stdout` 字段也拥有 `Option&lt;ChildStdout&gt;` 类型，所以必需解包。</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    <span class="keyword">match</span> process.stdout.<span class="title function_ invoke__">unwrap</span>().<span class="title function_ invoke__">read_to_string</span>(&amp;<span class="keyword">mut</span> s) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(why) =&gt; <span class="built_in">panic!</span>(<span class="string">&quot;couldn&#x27;t read wc stdout: &#123;:?&#125;&quot;</span>, why),</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(_) =&gt; <span class="built_in">print!</span>(<span class="string">&quot;wc responded with:\n&#123;&#125;&quot;</span>, s),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="等待">等待</h3><ul><li>调用<code>Child::wait</code>就可以等待<code>process::Child</code>完成，会返回一个<code>process::ExitStatus</code>。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::process::Command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">child</span> = Command::<span class="title function_ invoke__">new</span>(<span class="string">&quot;sleep&quot;</span>).<span class="title function_ invoke__">arg</span>(<span class="string">&quot;5&quot;</span>).<span class="title function_ invoke__">spawn</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">_result</span> = child.<span class="title function_ invoke__">wait</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;reached end of main&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="程序参数">程序参数</h2><ul><li>命令行参数使用<code>std::env::args</code>进行接收，返回一个迭代器，对每个参数举出一个字符串。使用模式匹配匹配对应的字符串，如果正确，就执行。</li></ul><h2 id="外部语言函数接口">外部语言函数接口</h2><ul><li>Rust提供了调用C语言的函数接口。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--19.标准库类型</title>
      <link href="/post/3a4443f0.html"/>
      <url>/post/3a4443f0.html</url>
      
        <content type="html"><![CDATA[<h1 id="标准库类型">标准库类型</h1><div class="note info modern"><p>rust标准库有许多自定义类型：</p><ul><li>可增长的 String（字符串），如: “hello world”</li><li>可增长的向量（vector）: [1, 2, 3]</li><li>选项类型（optional types）: Option<i32></li><li>错误处理类型（error handling types）: Result&lt;i32, i32&gt;</li><li>堆分配的指针（heap allocated pointers）: Box<i32></li></ul></div><h2 id="箱子、栈和堆">箱子、栈和堆</h2><ul><li>默认会在栈中分配，可以使用<code>Box&lt;T&gt;</code>将值<mark class="hl-label blue">装箱</mark> ，就能够在堆上分配空间了。</li><li>Box<T>是一个智能指针，指向堆分配的T类型的值，当离开时作用域，会自动调用析构函数，内部对象被销毁，堆上分配内存被释放。</li><li>使用<code>*</code>进行解引用，会移除一层装箱(这项当于C语言中的指针)</li><li>box的宽度就是指针的宽度。</li><li>使用<code>mem::size_of_val(&amp;T)</code>可以进行地址大小检测。</li><li>(不知道和C语言中是否一样满足struct的补齐原则)</li></ul><h2 id="动态数组vector">动态数组vector</h2><ul><li>vector和slice都是编译时大小未知，可以随时扩大或者缩小。</li><li>&amp;[T]是Vec<T>的全部或部分引用。</li><li>vector用三个值来描述：<br>指向vec的指针<br>vec的长度<br>vec的容量(也就是要分配在堆之上的容量)</li><li>使用push和pop进行添加和删除最后一个元素（命名方法和栈与堆的处理方法相同）</li><li>注意for和iter结合使用。</li></ul><h2 id="字符串">字符串</h2><ul><li>string是由堆分配，可增长的，不是0结尾。</li><li>string被存储为由字节组成的vec<u8>。<br>&amp;str是指向有效UTF-8序列的切片(&amp;[u8]),可以用来查看String的内容。</li><li>特殊的字符由反斜杠字符来转义，通常使用十六进制或者Unicode码位来表示。</li><li>使用#可以在字符串中写#和&quot;，使用原始字符串。(raw String)</li></ul><hr><ul><li>使用字节串可以使用非UTF-8字符串或者是大部分文本。</li><li>字节串没有实现Display，所以打印有些功能受限。</li><li>可以使用单字节的转义字符，但是不能使用unicode转义字符。</li><li>原始字节串和字符串写法相同，字节串转换成&amp;str有可能失败。</li><li>字节串如果不使用utf-8编码，在转换成&amp;str会失败。</li></ul><h2 id="选项Option">选项Option</h2><ul><li>Option<T>中的Some(value)元组结构体，封装了T类型的值value。</li><li>None绑定到变量需要类型标注。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">none</span>: <span class="type">Option</span>&lt;<span class="type">i32</span>&gt; = <span class="literal">None</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">_equivalent_none</span> = None::&lt;<span class="type">i32</span>&gt;;</span><br></pre></td></tr></table></figure><ul><li>解包使用unwrap，解包Some会取出其中的值，解包None会造成panic。</li></ul><h2 id="结果Result">结果Result</h2><ul><li>结果Result是Option的强化，它相对于Option，会指明为什么失败。</li><li>Result&lt;T,E&gt;:<br>Ok(value):操作成功，返回value的值，value是具有T类型的值<br>Err(why):操作失败，包装why（why能解释失败的原因，拥有<code>E</code>类型）</li></ul><h3 id="运算符">?运算符</h3><ul><li>?运算符能够用在Result表达式之后，这会让result不用使用那么多的match表达式。</li></ul><h2 id="panic">panic!</h2><ul><li>使用<code>panic!</code>宏会产生panic恐慌，开始回退(unwind)栈，同时运行释放线程所拥有的资源(通过调用该线程中所有对象的析构函数)</li></ul><h2 id="散列表HashMap">散列表HashMap</h2><ul><li>相较于vector通过整形下标来存储值，HashMap通过键(key)来存储值。使用HashMap键可以是布尔型、整型、字符串、或者是任意实现了Eq和Hash trait的其他类型(也就是说自定义类型要使用这个参数需要)</li><li>HashMap也是可以增长的，占据多余空间的同时会缩小自己。</li><li>使用<code>HashMap::with_capacity(unit)</code>或者是<code>HashMap::new()</code>可以创建带有默认初始容量的HashMap或者是自定义容量的HashMap。</li><li>使用(name).insert(“key”,12313)和(name).remove(&amp;(“key”))进行设置。</li><li>可以根据标签重新插入，使用(name).insert(“key”&quot;,12121)</li><li>hashmap有一个迭代器，会以任意顺序举出：</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&amp;<span class="symbol">&#x27;a</span> key, &amp;<span class="symbol">&#x27;a</span> value)</span><br></pre></td></tr></table></figure><h3 id="更改或者自定义关键字类型">更改或者自定义关键字类型</h3><ul><li>实现了<code>Eq</code>和<code>Hash</code> trait的类型都可以充当HashMap的键，有:<br>bool （当然这个用处不大，因为只有两个可能的键）<br>int，unit，以及其他整数类型<br>String 和 &amp;str（友情提示：如果使用 String 作为键来创建 HashMap，则可以 将 &amp;str 作为散列表的 .get() 方法的参数，以获取值）</li><li>对于所有的集合类，如果他们包含的类型分别都实现了Eq和Hash，那么这些集合也都实现了Eq和Hash。例如如果T实现了Hash，则Vec<T>也实现了。</li><li>对于自定义类型，可以添加:</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#[derive(PartialEq,Eq,Hash)]</span></span><br></pre></td></tr></table></figure><ul><li>就可以轻松实现HashMap前提条件。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Eq 要求你对此类型推导 PartiaEq。</span></span><br><span class="line"><span class="meta">#[derive(PartialEq, Eq, Hash)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Account</span>&lt;<span class="symbol">&#x27;a</span>&gt;&#123;</span><br><span class="line">    username: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,</span><br><span class="line">    password: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AccountInfo</span>&lt;<span class="symbol">&#x27;a</span>&gt;&#123;</span><br><span class="line">    name: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,</span><br><span class="line">    email: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Accounts</span>&lt;<span class="symbol">&#x27;a</span>&gt; = HashMap&lt;Account&lt;<span class="symbol">&#x27;a</span>&gt;, AccountInfo&lt;<span class="symbol">&#x27;a</span>&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">try_logon</span>&lt;<span class="symbol">&#x27;a</span>&gt;(accounts: &amp;Accounts&lt;<span class="symbol">&#x27;a</span>&gt;,</span><br><span class="line">        username: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>, password: &amp;<span class="symbol">&#x27;a</span> <span class="type">str</span>)&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Username: &#123;&#125;&quot;</span>, username);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Password: &#123;&#125;&quot;</span>, password);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Attempting logon...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">logon</span> = Account &#123;</span><br><span class="line">        username: username,</span><br><span class="line">        password: password,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">match</span> accounts.<span class="title function_ invoke__">get</span>(&amp;logon) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(account_info) =&gt; &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Successful logon!&quot;</span>);</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Name: &#123;&#125;&quot;</span>, account_info.name);</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Email: &#123;&#125;&quot;</span>, account_info.email);</span><br><span class="line">        &#125;,</span><br><span class="line">        _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Login failed!&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">accounts</span>: Accounts = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">account</span> = Account &#123;</span><br><span class="line">        username: <span class="string">&quot;j.everyman&quot;</span>,</span><br><span class="line">        password: <span class="string">&quot;password123&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">account_info</span> = AccountInfo &#123;</span><br><span class="line">        name: <span class="string">&quot;John Everyman&quot;</span>,</span><br><span class="line">        email: <span class="string">&quot;j.everyman@email.com&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    accounts.<span class="title function_ invoke__">insert</span>(account, account_info);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">try_logon</span>(&amp;accounts, <span class="string">&quot;j.everyman&quot;</span>, <span class="string">&quot;psasword123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">try_logon</span>(&amp;accounts, <span class="string">&quot;j.everyman&quot;</span>, <span class="string">&quot;password123&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="散列集HashSet">散列集HashSet</h3><ul><li><p>HashSet<T>是一个对HashMap&lt;T,()&gt;的封装。这样做的意义是只关心key而不关心其他值。</p></li><li><p>HashSet的优势是保证了不会出现重复数据。</p></li><li><p>插入的值已经存在，那么新插入的值会取代旧插入的值。<br>集合set可以做的事情：<br>union（并集）：获得两个集合中的所有元素（不含重复值）。</p><p>difference（差集）：获取属于第一个集合而不属于第二集合的所有元素。</p><p>intersection（交集）：获取同时属于两个集合的所有元素。</p><p>symmetric_difference（对称差）：获取所有只属于其中一个集合，而不同时属于 两个集合的所有元素。</p></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::collections::HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span>: HashSet&lt;<span class="type">i32</span>&gt; = <span class="built_in">vec!</span>(<span class="number">1i32</span>, <span class="number">2</span>, <span class="number">3</span>).<span class="title function_ invoke__">into_iter</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">b</span>: HashSet&lt;<span class="type">i32</span>&gt; = <span class="built_in">vec!</span>(<span class="number">2i32</span>, <span class="number">3</span>, <span class="number">4</span>).<span class="title function_ invoke__">into_iter</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">assert!</span>(a.<span class="title function_ invoke__">insert</span>(<span class="number">4</span>));</span><br><span class="line">    <span class="built_in">assert!</span>(a.<span class="title function_ invoke__">contains</span>(&amp;<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果值已经存在，那么 `HashSet::insert()` 返回 false。</span></span><br><span class="line">    <span class="comment">//assert!(b.insert(4), &quot;Value 4 is already in set B!&quot;);</span></span><br><span class="line">    <span class="comment">// 改正 ^ 将此行注释掉。</span></span><br><span class="line"></span><br><span class="line">    b.<span class="title function_ invoke__">insert</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若一个集合（collection）的元素类型实现了 `Debug`，那么该集合也就实现了 `Debug`。</span></span><br><span class="line">    <span class="comment">// 这通常将元素打印成这样的格式 `[elem1, elem2, ...]</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;A: &#123;:?&#125;&quot;</span>, a);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;B: &#123;:?&#125;&quot;</span>, b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 乱序打印 [1, 2, 3, 4, 5]。</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Union: &#123;:?&#125;&quot;</span>, a.<span class="title function_ invoke__">union</span>(&amp;b).collect::&lt;<span class="type">Vec</span>&lt;&amp;<span class="type">i32</span>&gt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这将会打印出 [1]</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Difference: &#123;:?&#125;&quot;</span>, a.<span class="title function_ invoke__">difference</span>(&amp;b).collect::&lt;<span class="type">Vec</span>&lt;&amp;<span class="type">i32</span>&gt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 乱序打印 [2, 3, 4]。</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Intersection: &#123;:?&#125;&quot;</span>, a.<span class="title function_ invoke__">intersection</span>(&amp;b).collect::&lt;<span class="type">Vec</span>&lt;&amp;<span class="type">i32</span>&gt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印 [1, 5]</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Symmetric Difference: &#123;:?&#125;&quot;</span>,</span><br><span class="line">             a.<span class="title function_ invoke__">symmetric_difference</span>(&amp;b).collect::&lt;<span class="type">Vec</span>&lt;&amp;<span class="type">i32</span>&gt;&gt;());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="引用计数Rc">引用计数Rc</h2><ul><li>需要获取多个所有权的时候使用Rc(引用计数)，Rc跟踪引用的数量相当于包裹在Rc值的所有者的数量。</li><li>Rc每多一个使用者，Rc值+1,当一个作用者被移出时，Rc值-1,当Rc值为0时，Rc和值都会被删除。</li><li>Rc克隆从不进行深拷贝，只创建一个指向包裹值的指针，并增加计数。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">rc</span>: Rc&lt;T&gt; = Rc::<span class="title function_ invoke__">new</span>(T)<span class="comment">//创建T类型的Rc引用计数</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;rc 的引用计数数量: &#123;&#125;&quot;</span>,Rc::<span class="title function_ invoke__">strong_count</span>(&amp;rc));</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::rc::Rc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">rc_examples</span> = <span class="string">&quot;Rc examples&quot;</span>.<span class="title function_ invoke__">to_string</span>();</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;--- rc_a is created ---&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">let</span> <span class="variable">rc_a</span>: Rc&lt;<span class="type">String</span>&gt; = Rc::<span class="title function_ invoke__">new</span>(rc_examples);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Reference Count of rc_a: &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;rc_a));</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;--- rc_a is cloned to rc_b ---&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">let</span> <span class="variable">rc_b</span>: Rc&lt;<span class="type">String</span>&gt; = Rc::<span class="title function_ invoke__">clone</span>(&amp;rc_a);</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Reference Count of rc_b: &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;rc_b));</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Reference Count of rc_a: &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;rc_a));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 如果两者内部的值相等的话，则两个 `Rc` 相等。</span></span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;rc_a and rc_b are equal: &#123;&#125;&quot;</span>, rc_a.<span class="title function_ invoke__">eq</span>(&amp;rc_b));</span><br><span class="line">                        </span><br><span class="line">            <span class="comment">// 我们可以直接使用值的方法</span></span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Length of the value inside rc_a: &#123;&#125;&quot;</span>, rc_a.<span class="title function_ invoke__">len</span>());</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;Value of rc_b: &#123;&#125;&quot;</span>, rc_b);</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;--- rc_b is dropped out of scope ---&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Reference Count of rc_a: &#123;&#125;&quot;</span>, Rc::<span class="title function_ invoke__">strong_count</span>(&amp;rc_a));</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;--- rc_a is dropped out of scope ---&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 报错！`rc_examples` 已经移入 `rc_a`。</span></span><br><span class="line">    <span class="comment">// 而且当 `rc_a` 被删时，`rc_examples` 也被一起删除。</span></span><br><span class="line">    <span class="comment">// println!(&quot;rc_examples: &#123;&#125;&quot;, rc_examples);</span></span><br><span class="line">    <span class="comment">// 试一试 ^ 注释掉此行代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="共享引用计数Arc">共享引用计数Arc</h2><ul><li>通过<code>Clone</code>可以为内存堆中某个位置创建一个引用指针，同时增加引用计数器。</li><li>由于在线程之间共享所有权，在指向某个值的最后一个引用指针退出作用域的时候该变量将被删除。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::sync::Arc;</span><br><span class="line"><span class="keyword">use</span> std::thread;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 这个变量声明用来指定其值的地方。</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">apple</span> = Arc::<span class="title function_ invoke__">new</span>(<span class="string">&quot;the same apple&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">10</span> &#123;</span><br><span class="line">        <span class="comment">// 这里没有数值说明，因为它是一个指向内存堆中引用的指针。</span></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">apple</span> = Arc::<span class="title function_ invoke__">clone</span>(&amp;apple);</span><br><span class="line"></span><br><span class="line">        thread::<span class="title function_ invoke__">spawn</span>(<span class="keyword">move</span> || &#123;</span><br><span class="line">            <span class="comment">// 由于使用了Arc，线程可以使用分配在 `Arc` 变量指针位置的值来生成。</span></span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, apple);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--18.错误处理</title>
      <link href="/post/85ff2eaf.html"/>
      <url>/post/85ff2eaf.html</url>
      
        <content type="html"><![CDATA[<h1 id="错误处理">错误处理</h1><h2 id="panic">panic</h2><ul><li>如果符合直接panic字符串并且退出。</li></ul><h2 id="Option和unwrap">Option和unwrap</h2><ul><li>option是一种可能遇到不存在的情况，它可能会遇到<code>Some(T)</code>和<code>None</code>两种情况。</li><li>option可以和<code>match</code>进行组合，或者是使用<code>unwrap</code>进行隐式处理(返回Some(T)或者panic)</li></ul><h3 id="使用？解开Option">使用？解开Option</h3><ul><li>首先使用Option嵌套struct，然后使用<code>?</code>进行嵌套。</li></ul><h3 id="组合算子：map">组合算子：map</h3><ul><li>遇到只有一种输入有效的情况之下，使用<mark class="hl-label blue">组合算子</mark> 来以模块化的风格管理控制流。</li><li>Option有一个内置方法<code>map</code>,用于<code>Some-Some</code>和<code>None-&gt;None</code>。多个map()调用串联，更加灵活。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![allow(dead_code)]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span> <span class="keyword">enum</span> <span class="title class_">Food</span> &#123; Apple, Carrot, Potato &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span> <span class="keyword">struct</span> <span class="title class_">Peeled</span>(Food);</span><br><span class="line"><span class="meta">#[derive(Debug)]</span> <span class="keyword">struct</span> <span class="title class_">Chopped</span>(Food);</span><br><span class="line"><span class="meta">#[derive(Debug)]</span> <span class="keyword">struct</span> <span class="title class_">Cooked</span>(Food);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 削皮。如果没有食物，就返回 `None`。否则返回削好皮的食物。</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">peel</span>(food: <span class="type">Option</span>&lt;Food&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;Peeled&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> food &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(food) =&gt; <span class="title function_ invoke__">Some</span>(<span class="title function_ invoke__">Peeled</span>(food)),</span><br><span class="line">        <span class="literal">None</span>       =&gt; <span class="literal">None</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 切食物。如果没有食物，就返回 `None`。否则返回切好的食物。</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">chop</span>(peeled: <span class="type">Option</span>&lt;Peeled&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;Chopped&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> peeled &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(<span class="title function_ invoke__">Peeled</span>(food)) =&gt; <span class="title function_ invoke__">Some</span>(<span class="title function_ invoke__">Chopped</span>(food)),</span><br><span class="line">        <span class="literal">None</span>               =&gt; <span class="literal">None</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 烹饪食物。这里，我们使用 `map()` 来替代 `match` 以处理各种情况。</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">cook</span>(chopped: <span class="type">Option</span>&lt;Chopped&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;Cooked&gt; &#123;</span><br><span class="line">    chopped.<span class="title function_ invoke__">map</span>(|<span class="title function_ invoke__">Chopped</span>(food)| <span class="title function_ invoke__">Cooked</span>(food))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个函数会完成削皮切块烹饪一条龙。我们把 `map()` 串起来，以简化代码。</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">process</span>(food: <span class="type">Option</span>&lt;Food&gt;) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;Cooked&gt; &#123;</span><br><span class="line">    food.<span class="title function_ invoke__">map</span>(|f| <span class="title function_ invoke__">Peeled</span>(f))</span><br><span class="line">        .<span class="title function_ invoke__">map</span>(|<span class="title function_ invoke__">Peeled</span>(f)| <span class="title function_ invoke__">Chopped</span>(f))</span><br><span class="line">        .<span class="title function_ invoke__">map</span>(|<span class="title function_ invoke__">Chopped</span>(f)| <span class="title function_ invoke__">Cooked</span>(f))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在尝试吃食物之前确认食物是否存在是非常重要的！</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">eat</span>(food: <span class="type">Option</span>&lt;Cooked&gt;) &#123;</span><br><span class="line">    <span class="keyword">match</span> food &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(food) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Mmm. I love &#123;:?&#125;&quot;</span>, food),</span><br><span class="line">        <span class="literal">None</span>       =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Oh no! It wasn&#x27;t edible.&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">apple</span> = <span class="title function_ invoke__">Some</span>(Food::Apple);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">carrot</span> = <span class="title function_ invoke__">Some</span>(Food::Carrot);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">potato</span> = <span class="literal">None</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">cooked_apple</span> = <span class="title function_ invoke__">cook</span>(<span class="title function_ invoke__">chop</span>(<span class="title function_ invoke__">peel</span>(apple)));</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">cooked_carrot</span> = <span class="title function_ invoke__">cook</span>(<span class="title function_ invoke__">chop</span>(<span class="title function_ invoke__">peel</span>(carrot)));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 现在让我们试试看起来更简单的 `process()`。</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">cooked_potato</span> = <span class="title function_ invoke__">process</span>(potato);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">eat</span>(cooked_apple);</span><br><span class="line">    <span class="title function_ invoke__">eat</span>(cooked_carrot);</span><br><span class="line">    <span class="title function_ invoke__">eat</span>(cooked_potato);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合算子：and-then">组合算子：and_then</h3><ul><li>由于使用map可能会出现多层<code>Option</code>导致混乱，所以有替代方法and_then()。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![allow(dead_code)]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span> <span class="keyword">enum</span> <span class="title class_">Food</span> &#123; CordonBleu, Steak, Sushi &#125;</span><br><span class="line"><span class="meta">#[derive(Debug)]</span> <span class="keyword">enum</span> <span class="title class_">Day</span> &#123; Monday, Tuesday, Wednesday &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们没有制作寿司所需的原材料（ingredient）（有其他的原材料）。</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">have_ingredients</span>(food: Food) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;Food&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> food &#123;</span><br><span class="line">        Food::Sushi =&gt; <span class="literal">None</span>,</span><br><span class="line">        _           =&gt; <span class="title function_ invoke__">Some</span>(food),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们拥有全部食物的食谱，除了法国蓝带猪排（Cordon Bleu）的。</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">have_recipe</span>(food: Food) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;Food&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> food &#123;</span><br><span class="line">        Food::CordonBleu =&gt; <span class="literal">None</span>,</span><br><span class="line">        _                =&gt; <span class="title function_ invoke__">Some</span>(food),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 要做一份好菜，我们需要原材料和食谱。</span></span><br><span class="line"><span class="comment">// 我们可以借助一系列 `match` 来表达这个逻辑：</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">cookable_v1</span>(food: Food) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;Food&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">have_ingredients</span>(food) &#123;</span><br><span class="line">        <span class="literal">None</span>       =&gt; <span class="literal">None</span>,</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(food) =&gt; <span class="keyword">match</span> <span class="title function_ invoke__">have_recipe</span>(food) &#123;</span><br><span class="line">            <span class="literal">None</span>       =&gt; <span class="literal">None</span>,</span><br><span class="line">            <span class="title function_ invoke__">Some</span>(food) =&gt; <span class="title function_ invoke__">Some</span>(food),</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以使用 `and_then()` 把上面的逻辑改写得更紧凑：</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">cookable_v2</span>(food: Food) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;Food&gt; &#123;</span><br><span class="line">    <span class="title function_ invoke__">have_ingredients</span>(food).<span class="title function_ invoke__">and_then</span>(have_recipe)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">eat</span>(food: Food, day: Day) &#123;</span><br><span class="line">    <span class="keyword">match</span> <span class="title function_ invoke__">cookable_v2</span>(food) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(food) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Yay! On &#123;:?&#125; we get to eat &#123;:?&#125;.&quot;</span>, day, food),</span><br><span class="line">        <span class="literal">None</span>       =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Oh no. We don&#x27;t get to eat on &#123;:?&#125;?&quot;</span>, day),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> (cordon_bleu, steak, sushi) = (Food::CordonBleu, Food::Steak, Food::Sushi);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">eat</span>(cordon_bleu, Day::Monday);</span><br><span class="line">    <span class="title function_ invoke__">eat</span>(steak, Day::Tuesday);</span><br><span class="line">    <span class="title function_ invoke__">eat</span>(sushi, Day::Wednesday);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结果Result">结果Result</h2><ul><li><code>Result</code>相当于<code>Option</code>的进化版本，可以有可能的<mark class="hl-label blue">错误</mark> 而不仅仅是<mark class="hl-label blue">不存在</mark> 。</li><li>他有两个结果：</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">Ok</span>&lt;T&gt;:找到T元素</span><br><span class="line"><span class="literal">Err</span>&lt;E&gt;:找到E元素，E元素是错误的类型。</span><br></pre></td></tr></table></figure><ul><li><code>Result</code>也有类似Option的方法，如unwrap(),也有类似的组合算子。</li><li><code>Result</code>有<code>parse()</code>方法，可以将字符串转换为想要的类型，但不一定总是成功，也可能失败。</li><li><code>parse()</code>方法通常和unwrap()连接，以来达到处理错误的过程。</li><li><code>parse()</code>使用<code>FromStr</code> trait实现。</li></ul><h3 id="Result-的-map">Result 的 map</h3><ul><li>使用间接地方法可以知道Result输入错误时知道parse<i32>或者其他类型的返回详情。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::num::ParseIntError;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 就像 `Option` 那样，我们可以使用 `map()` 之类的组合算子。</span></span><br><span class="line"><span class="comment">// 除去写法外，这个函数与上面那个完全一致，它的作用是：</span></span><br><span class="line"><span class="comment">// 如果值是合法的，计算其乘积，否则返回错误。</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">multiply</span>(first_number_str: &amp;<span class="type">str</span>, second_number_str: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">i32</span>, ParseIntError&gt; &#123;</span><br><span class="line">    first_number_str.parse::&lt;<span class="type">i32</span>&gt;().<span class="title function_ invoke__">and_then</span>(|first_number| &#123;</span><br><span class="line">        second_number_str.parse::&lt;<span class="type">i32</span>&gt;().<span class="title function_ invoke__">map</span>(|second_number| first_number * second_number)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">print</span>(result: <span class="type">Result</span>&lt;<span class="type">i32</span>, ParseIntError&gt;) &#123;</span><br><span class="line">    <span class="keyword">match</span> result &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(n)  =&gt; <span class="built_in">println!</span>(<span class="string">&quot;n is &#123;&#125;&quot;</span>, n),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Error: &#123;&#125;&quot;</span>, e),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 这种情况下仍然会给出正确的答案。</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">twenty</span> = <span class="title function_ invoke__">multiply</span>(<span class="string">&quot;10&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">print</span>(twenty);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这种情况下就会提供一条更有用的错误信息。</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">tt</span> = <span class="title function_ invoke__">multiply</span>(<span class="string">&quot;t&quot;</span>, <span class="string">&quot;2&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">print</span>(tt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="给Result起别名">给Result起别名</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 为带有错误类型 `ParseIntError` 的 `Result` 定义一个泛型别名。</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">AliasedResult</span>&lt;T&gt; = <span class="type">Result</span>&lt;T, ParseIntError&gt;;</span><br></pre></td></tr></table></figure><h3 id="提前返回">提前返回</h3><ul><li>使用match控制流和提前返回也可以改善处理错误的方法。</li><li>具体的方法是使用result返回Err即可。</li></ul><h3 id="引入">引入?</h3><ul><li>遇到只想返回Err而不想返回panic的情况之下，使用<code>?</code>效果较好。</li></ul><h3 id="try-宏">try! 宏</h3><ul><li>旧的Rust代码中使用try!语句，它的作用和<code>?</code>相同。</li></ul><h2 id="处理多种错误类型">处理多种错误类型</h2><ul><li>当多种不同的错误类型需要进行交互时,如Option和Result，不同的Result之间进行交互。</li></ul><h3 id="从Option中取出Result">从Option中取出Result</h3><ul><li>让Option和Result相互包含，如Option中嵌套Result：</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Option</span>&lt;<span class="type">Result</span>&lt;<span class="type">i32</span>,ParseIntError&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>或者使用组合算子进行交换<code>Result</code>和<code>Option</code>,这通常出现在<code>?</code>输出错误的时候继续处理。</li><li>组合算子可以在Rust标准库中学习使用。</li></ul><h2 id="自定义错误类型">自定义错误类型</h2><ul><li>实现Error trait和Display。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::error;</span><br><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span>&lt;T&gt; = std::result::<span class="type">Result</span>&lt;T, DoubleError&gt;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug, Clone)]</span></span><br><span class="line"><span class="comment">// 定义我们的错误类型，这种类型可以根据错误处理的实际情况定制。</span></span><br><span class="line"><span class="comment">// 我们可以完全自定义错误类型，也可以在类型中完全采用底层的错误实现，</span></span><br><span class="line"><span class="comment">// 也可以介于二者之间。</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">DoubleError</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的生成与它如何显示是完全没关系的。没有必要担心复杂的逻辑会导致混乱的显示。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// 注意我们没有储存关于错误的任何额外信息，也就是说，如果不修改我们的错误类型定义的话，</span></span><br><span class="line"><span class="comment">// 就无法指明是哪个字符串解析失败了。</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">DoubleError</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">&quot;invalid first item to double&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 `DoubleError` 实现 `Error` trait，这样其他错误可以包裹这个错误类型。</span></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">error</span>::Error <span class="keyword">for</span> <span class="title class_">DoubleError</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">source</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;&amp;(<span class="keyword">dyn</span> error::Error + <span class="symbol">&#x27;static</span>)&gt; &#123;</span><br><span class="line">        <span class="comment">// 泛型错误，没有记录其内部原因。</span></span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">double_first</span>(vec: <span class="type">Vec</span>&lt;&amp;<span class="type">str</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">    vec.<span class="title function_ invoke__">first</span>()</span><br><span class="line">       <span class="comment">// 把错误换成我们的新类型。</span></span><br><span class="line">       .<span class="title function_ invoke__">ok_or</span>(DoubleError)</span><br><span class="line">       .<span class="title function_ invoke__">and_then</span>(|s| &#123;</span><br><span class="line">            s.parse::&lt;<span class="type">i32</span>&gt;()</span><br><span class="line">                <span class="comment">// 这里也换成新类型。</span></span><br><span class="line">                .<span class="title function_ invoke__">map_err</span>(|_| DoubleError)</span><br><span class="line">                .<span class="title function_ invoke__">map</span>(|i| <span class="number">2</span> * i)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">print</span>(result: <span class="type">Result</span>&lt;<span class="type">i32</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">match</span> result &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(n)  =&gt; <span class="built_in">println!</span>(<span class="string">&quot;The first doubled is &#123;&#125;&quot;</span>, n),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Error: &#123;&#125;&quot;</span>, e),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">numbers</span> = <span class="built_in">vec!</span>[<span class="string">&quot;42&quot;</span>, <span class="string">&quot;93&quot;</span>, <span class="string">&quot;18&quot;</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">empty</span> = <span class="built_in">vec!</span>[];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">strings</span> = <span class="built_in">vec!</span>[<span class="string">&quot;tofu&quot;</span>, <span class="string">&quot;93&quot;</span>, <span class="string">&quot;18&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">print</span>(<span class="title function_ invoke__">double_first</span>(numbers));</span><br><span class="line">    <span class="title function_ invoke__">print</span>(<span class="title function_ invoke__">double_first</span>(empty));</span><br><span class="line">    <span class="title function_ invoke__">print</span>(<span class="title function_ invoke__">double_first</span>(strings));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="把错误装箱">把错误装箱</h3><ul><li>这种方法可以分辨错误类型，但是只有在函数运行过程了解，而不能静态判别。</li><li>标准库通过from实现了Box到Box<Error>的转换。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::error;</span><br><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 `Box&lt;error::Error&gt;` 取别名。</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span>&lt;T&gt; = std::result::<span class="type">Result</span>&lt;T, <span class="type">Box</span>&lt;<span class="keyword">dyn</span> error::Error&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug, Clone)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EmptyVec</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">EmptyVec</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">&quot;invalid first item to double&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">error</span>::Error <span class="keyword">for</span> <span class="title class_">EmptyVec</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">description</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> &amp;<span class="type">str</span> &#123;</span><br><span class="line">        <span class="string">&quot;invalid first item to double&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">cause</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">Option</span>&lt;&amp;<span class="keyword">dyn</span> error::Error&gt; &#123;</span><br><span class="line">        <span class="comment">// 泛型错误。没有记录其内部原因。</span></span><br><span class="line">        <span class="literal">None</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">double_first</span>(vec: <span class="type">Vec</span>&lt;&amp;<span class="type">str</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">    vec.<span class="title function_ invoke__">first</span>()</span><br><span class="line">       .<span class="title function_ invoke__">ok_or_else</span>(|| EmptyVec.<span class="title function_ invoke__">into</span>())  <span class="comment">// 装箱</span></span><br><span class="line">       .<span class="title function_ invoke__">and_then</span>(|s| &#123;</span><br><span class="line">            s.parse::&lt;<span class="type">i32</span>&gt;()</span><br><span class="line">                .<span class="title function_ invoke__">map_err</span>(|e| e.<span class="title function_ invoke__">into</span>())  <span class="comment">// 装箱</span></span><br><span class="line">                .<span class="title function_ invoke__">map</span>(|i| <span class="number">2</span> * i)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">print</span>(result: <span class="type">Result</span>&lt;<span class="type">i32</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">match</span> result &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(n)  =&gt; <span class="built_in">println!</span>(<span class="string">&quot;The first doubled is &#123;&#125;&quot;</span>, n),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Error: &#123;&#125;&quot;</span>, e),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">numbers</span> = <span class="built_in">vec!</span>[<span class="string">&quot;42&quot;</span>, <span class="string">&quot;93&quot;</span>, <span class="string">&quot;18&quot;</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">empty</span> = <span class="built_in">vec!</span>[];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">strings</span> = <span class="built_in">vec!</span>[<span class="string">&quot;tofu&quot;</span>, <span class="string">&quot;93&quot;</span>, <span class="string">&quot;18&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">print</span>(<span class="title function_ invoke__">double_first</span>(numbers));</span><br><span class="line">    <span class="title function_ invoke__">print</span>(<span class="title function_ invoke__">double_first</span>(empty));</span><br><span class="line">    <span class="title function_ invoke__">print</span>(<span class="title function_ invoke__">double_first</span>(strings));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="的其他用法">?的其他用法</h2><ul><li>?不仅仅是<code>unwrap</code>和<code>return Err(err)</code>,实际上是<code>unwrap</code>或者<code>return Err(From::from(err))</code>，也就是说如果错误可以转换成返回类型地方使用<code>?</code>，会自动转换成返回类型。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::error;</span><br><span class="line"><span class="keyword">use</span> std::fmt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 `Box&lt;error::Error&gt;` 取别名。</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Result</span>&lt;T&gt; = std::result::<span class="type">Result</span>&lt;T, <span class="type">Box</span>&lt;<span class="keyword">dyn</span> error::Error&gt;&gt;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EmptyVec</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">fmt</span>::Display <span class="keyword">for</span> <span class="title class_">EmptyVec</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">fmt</span>(&amp;<span class="keyword">self</span>, f: &amp;<span class="keyword">mut</span> fmt::Formatter) <span class="punctuation">-&gt;</span> fmt::<span class="type">Result</span> &#123;</span><br><span class="line">        <span class="built_in">write!</span>(f, <span class="string">&quot;invalid first item to double&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">error</span>::Error <span class="keyword">for</span> <span class="title class_">EmptyVec</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里的结构和之前一样，但是这次没有把所有的 `Result` 和 `Option` 串起来，</span></span><br><span class="line"><span class="comment">// 而是使用 `?` 立即得到内部值。</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">double_first</span>(vec: <span class="type">Vec</span>&lt;&amp;<span class="type">str</span>&gt;) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">i32</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">first</span> = vec.<span class="title function_ invoke__">first</span>().<span class="title function_ invoke__">ok_or</span>(EmptyVec)?;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">parsed</span> = first.parse::&lt;<span class="type">i32</span>&gt;()?;</span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(<span class="number">2</span> * parsed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">print</span>(result: <span class="type">Result</span>&lt;<span class="type">i32</span>&gt;) &#123;</span><br><span class="line">    <span class="keyword">match</span> result &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(n)  =&gt; <span class="built_in">println!</span>(<span class="string">&quot;The first doubled is &#123;&#125;&quot;</span>, n),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;Error: &#123;&#125;&quot;</span>, e),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">numbers</span> = <span class="built_in">vec!</span>[<span class="string">&quot;42&quot;</span>, <span class="string">&quot;93&quot;</span>, <span class="string">&quot;18&quot;</span>];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">empty</span> = <span class="built_in">vec!</span>[];</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">strings</span> = <span class="built_in">vec!</span>[<span class="string">&quot;tofu&quot;</span>, <span class="string">&quot;93&quot;</span>, <span class="string">&quot;18&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">print</span>(<span class="title function_ invoke__">double_first</span>(numbers));</span><br><span class="line">    <span class="title function_ invoke__">print</span>(<span class="title function_ invoke__">double_first</span>(empty));</span><br><span class="line">    <span class="title function_ invoke__">print</span>(<span class="title function_ invoke__">double_first</span>(strings));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="包裹错误">包裹错误</h3><ul><li>将错误装箱改成包裹到自己的错误类型之中。</li><li>首先定义一个enum枚举中有两个结构体。</li><li>然后采用内部各变量对<code>Error trait</code>的实现不同的方法再进行输出错误信息。</li></ul><h2 id="遍历Result">遍历Result</h2><ul><li>使用filter_map()忽略失败的项</li><li>使用collect()使整个操作失败</li><li>使用Partiton()收集所有合法的值和错误</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--17.使用macro_rules!创建宏</title>
      <link href="/post/61064021.html"/>
      <url>/post/61064021.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用macro-rules-创建宏">使用macro_rules!创建宏</h1><ul><li>Rust中宏系统可以让其进行元编程，宏的定义和函数的区别在于有没有!。宏不会产生调用，会被编译成源码和其他部分一起编译。</li><li>宏定义的最后一个分支可以不使用分号作为结束。</li><li>参数使用<code>$</code>进行标注，参数类型如果是expression，使用<code>:expr</code>标注;参数名标注使用<code>:ident</code>;运算符和标记使用<code>tt</code>标记。</li><li>多个参数根据实际情况，如果是<code>&gt;=1</code>使用<code>+</code>;<code>&gt;=0</code>使用<code>*</code>。</li></ul><h2 id="DRY（不重复写代码）">DRY（不重复写代码）</h2><ul><li>没咋看明白。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--16.trait</title>
      <link href="/post/b53db51e.html"/>
      <url>/post/b53db51e.html</url>
      
        <content type="html"><![CDATA[<h1 id="特质trait">特质trait</h1><div class="note info modern"><p>对未定义的Self定义的方法集，定义trait之后将其作用于impl块中。<br>对任何数据类型都可以实现trait。</p></div><h2 id="派生">派生</h2><ul><li>通过<code>#[derive]</code>属性，编译器提供某些trait基本实现。更复杂的行为可以手动实现所需要的<code>trait</code>。</li></ul><div class="tabs" id="test"><ul class="nav-tabs"></ul><div class="tab-contents"></div></div><h2 id="使用dyn返回trait">使用dyn返回trait</h2><div class="note info modern"><ul><li>Rust编译器决定了每个函数返回值需要多少空间，这意味着每个函数都必须返回一个具体类型。因此trait不能做为函数的返回值来使用，因为不同的实现造成了trait需要不同的内存量。</li><li>因此使用<code>Box</code>返回包含一些trait的引用更为方便，因为引用的大小是已知的，使用引用指向已分配堆中的trait,这样就能返回trait了。</li></ul></div><ul><li>返回指向堆的trait指针，需要使用关键字<code>dyn</code>来定义，如<code>Box&lt;dyn Animal&gt;</code>。</li></ul><h2 id="运算符重载">运算符重载</h2><ul><li>Rust中很多运算符通过trait来重载。</li></ul><h2 id="Drop">Drop</h2><ul><li>Drop trait只有一个方法:<code>drop</code>,它会在对向离开作用域的时候自动调用该方法，它的作用是释放实现者的实例拥有的资源。</li><li>Box，Vec，String，File，以及 Process 是一些实现了 Drop trait 来释放 资源的类型。Drop trait 也可以为任何自定义数据类型手动实现。</li><li>实现drop的类型可以自动销毁，你也可以手动调用drop函数将其销毁。</li></ul><h2 id="Iterator">Iterator</h2><ul><li>用来对集合(数组之类)实现迭代，只需要定义返回<code>next</code>元素的方法，可以手动在impl或者自动定义。</li><li>for结构使用<code>.into_iter()</code>方法将一些集合类型转换为迭代器。</li><li>iter中还有很多方法，具体可以查看cargo.io查看。</li></ul><h2 id="impl-trait">impl trait</h2><p>impl trait在作为返回值使用的过程之中，可以简化函数定义，前提是一定要有已经分配好堆的trait,即这个trait已经被实现了。</p><h2 id="Clone-trait">Clone trait</h2><ul><li>clone trait会定义<code>.clone()</code>方法以供使用(在对于结构体等类型没有实现clone是无法使用的，结构体使用的格式是:<code>#[derive(Clone)]</code>)</li><li>相较于move方法，clone方法使用过程中能够更好的处理一些问题。</li></ul><h2 id="父trait">父trait</h2><ul><li>可以为一个trait定义它的父trait，这样，在子trait中就可以使用父trait中的方法。</li></ul><div class="note info modern"><p>记得使用dyn方法进行描述。</p></div><h2 id="消除重叠trait">消除重叠trait</h2><ul><li>相较于之前的介绍，如果不同的trait在同一个结构体中有相同的实现方法，这样就必须使用如下的方法进行区分：</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">trait</span> <span class="title class_">UsernameWidget</span> &#123;</span><br><span class="line">    <span class="comment">// 从这个 widget 中获取选定的用户名</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">trait</span> <span class="title class_">AgeWidget</span> &#123;</span><br><span class="line">    <span class="comment">// 从这个 widget 中获取选定的年龄</span></span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同时具有 UsernameWidget 和 AgeWidget 的表单</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Form</span> &#123;</span><br><span class="line">    username: <span class="type">String</span>,</span><br><span class="line">    age: <span class="type">u8</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">UsernameWidget</span> <span class="keyword">for</span> <span class="title class_">Form</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">String</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.username.<span class="title function_ invoke__">clone</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> <span class="title class_">AgeWidget</span> <span class="keyword">for</span> <span class="title class_">Form</span> &#123;</span><br><span class="line">    <span class="keyword">fn</span> <span class="title function_">get</span>(&amp;<span class="keyword">self</span>) <span class="punctuation">-&gt;</span> <span class="type">u8</span> &#123;</span><br><span class="line">        <span class="keyword">self</span>.age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">form</span> = Form&#123;</span><br><span class="line">        username: <span class="string">&quot;rustacean&quot;</span>.<span class="title function_ invoke__">to_owned</span>(),</span><br><span class="line">        age: <span class="number">28</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果取消注释此行，则会收到一条错误消息，提示 “multiple `get` found”（找到了多个`get`）。</span></span><br><span class="line">    <span class="comment">// 因为毕竟有多个名为 `get` 的方法。</span></span><br><span class="line">    <span class="comment">// println!(&quot;&#123;&#125;&quot;, form.get());</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">username</span> = &lt;Form <span class="keyword">as</span> UsernameWidget&gt;::<span class="title function_ invoke__">get</span>(&amp;form);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="string">&quot;rustacean&quot;</span>.<span class="title function_ invoke__">to_owned</span>(), username);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">age</span> = &lt;Form <span class="keyword">as</span> AgeWidget&gt;::<span class="title function_ invoke__">get</span>(&amp;form);</span><br><span class="line">    <span class="built_in">assert_eq!</span>(<span class="number">28</span>, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--15.作用域规则</title>
      <link href="/post/204e3a91.html"/>
      <url>/post/204e3a91.html</url>
      
        <content type="html"><![CDATA[<h1 id="作用域规则">作用域规则</h1><div class="note info modern"><p>主要是针对所有权、借用、生命周期规范</p></div><h2 id="RAII">RAII</h2><ul><li>Rust中强制进行RAII<mark class="hl-label blue">资源获取即初始化</mark> ，在任何对象离开作用域的时候会调用它的析构函数，因此不需要手动释放内存，避免了<mark class="hl-label blue">资源泄露</mark> 。</li><li>析构函数通过<mark class="hl-label trait">Drop</mark> 提供,自定义的类型需要自己实现drop trait，其余的自动实现了这种trait。</li></ul><h2 id="所有权和移动">所有权和移动</h2><ul><li>因为变量要进习释放所用有的资源，因此只有一个所有者，因此就有了<mark class="hl-label green">引用</mark> 这种方法。</li><li>指针指向堆地址，如果进行移动，这个时候之前的指针会失去作用，新的指针会拥有原来堆上的内存<mark class="hl-label blue">原来指针会失效</mark> ，手动执行释放后，新的指针也不能访问。</li><li>而对于变量的移动，让两个变量拥有相同的值，两个变量是都可以访问的。</li></ul><h3 id="可变性">可变性</h3><ul><li>可变指针可以进行修改指针指向的内容，但是不可变指针不行。<mark class="hl-label blue">所有权</mark> 转移：由不可变指针-&gt;可变指针，会得到这样的结果。</li></ul><h3 id="部分移动">部分移动</h3><ul><li>在对结构体进行解构的过程中，可以使用<code>ref</code>关键字进行绑定，绑定过<code>ref</code>的参数属于是引用的参数。而没有标注的则是<code>move</code>模式。</li></ul><h2 id="借用">借用</h2><ul><li>借用<code>&amp;T</code>的存在巧妙解决了所有权<code>T</code>和使用中的问题。</li><li>编译器通过借用检查，保证了引用总是指向有效的对象，</li></ul><div class="note warning modern"><p>存在引用指向对象的过程中，该对象不能够进行销毁</p></div><h3 id="可变性-2">可变性</h3><ul><li>借用有两种形式:<code>&amp;mut T</code>(可以允许读、写数据)，<code>&amp;T</code>只能够读不能够写数据。</li><li>不能够可变的借用不可变对象，如果需要，先创建一个可变拷贝。</li></ul><h3 id="别名使用">别名使用</h3><div class="note warning modern"><p>数据允许多次不可变借用，但是有不可变借用的同时，不能使用可变借用<br>同一时间只允许有一次可变借用，当最后一次可变借用使用过后(通常是使用过<code>println!</code>之后)，才可以再次借用</p></div><h3 id="ref模式">ref模式</h3><ul><li><code>ref</code>相当于<code>&amp;</code>,不同点是<code>ref</code>在左边，<code>&amp;</code>在右边,而在参数中基本相同。</li></ul><h2 id="生命周期">生命周期</h2><ul><li>生命周期和作用域是不同的概念。</li><li>生命周期在结束的时候必须要保证它的引用已经结束，这部分由编译器检查。</li></ul><h3 id="显式标注">显式标注</h3><ul><li>生命周期函数在使用的过程中：</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">foo&lt;<span class="symbol">&#x27;a</span>, <span class="symbol">&#x27;b</span>&gt;</span><br><span class="line"><span class="comment">// `foo` 带有生命周期参数 `&#x27;a` 和 `&#x27;b`</span></span><br></pre></td></tr></table></figure><ul><li>像是这种生命周期参数，则<code>foo</code>不能超出a、b中间任意一个生命周期</li><li>同样的，如果函数体内部有局部变量，这种局部变量的生命周期小于函数体，则不可将短生命周期的局部变量转换为长生命周期。</li></ul><h3 id="函数">函数</h3><ul><li>生命周期有省略的情况，在这种情况之外：</li></ul><div class="note info modern"><ul><li>任何引用都必须要有标注好的生命周期</li><li>任何被返回的引用要有和它输入量相同或者是静态类型的生命周期</li><li>引用的生命周期要大于函数体本身，不然没法返回(类似于上一句，但是一定要大于函数体本身，不然会产生悬空指针，是指引用输入的变量，而在形参上和函数体保持一致)</li></ul></div><ul><li>不能将局部变量返回，因为它的生命周期短于函数体本身:</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">invalid_output</span>&lt;<span class="symbol">&#x27;a</span>&gt;() <span class="punctuation">-&gt;</span> &amp;<span class="symbol">&#x27;a</span> <span class="type">String</span> &#123; &amp;<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;foo&quot;</span>) &#125;</span><br><span class="line"><span class="comment">// 上面代码是无效的：`&#x27;a` 存活的时间必须比函数的长。</span></span><br><span class="line"><span class="comment">// 这里的 `&amp;String::from(&quot;foo&quot;)` 将会创建一个 `String` 类型，然后对它取引用。</span></span><br><span class="line"><span class="comment">// 数据在离开作用域时删掉，返回一个指向无效数据的引用。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="方法">方法</h3><ul><li>方法标注和函数体类似。</li></ul><h3 id="trait">trait</h3><ul><li><code>impl</code>块可能也有生命周期的标注</li></ul><h3 id="约束">约束</h3><ul><li>泛型和生命周期相同，都可以使用约束。<code>:</code>字符意义为:<br>T: 'a：在 T 中的所有引用都必须比生命周期 'a 活得更长。<br>T: Trait + 'a：T 类型必须实现 Trait trait，并且在 T 中的所有引用都必须比 'a 活得更长。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> std::fmt::<span class="built_in">Debug</span>; <span class="comment">// 用于约束的 trait。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Debug)]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Ref</span>&lt;<span class="symbol">&#x27;a</span>, T: <span class="symbol">&#x27;a</span>&gt;(&amp;<span class="symbol">&#x27;a</span> T);</span><br><span class="line"><span class="comment">// `Ref` 包含一个指向泛型类型 `T` 的引用，其中 `T` 拥有一个未知的生命周期</span></span><br><span class="line"><span class="comment">// `&#x27;a`。`T` 拥有生命周期限制， `T` 中的任何*引用*都必须比 `&#x27;a` 活得更长。另外</span></span><br><span class="line"><span class="comment">// `Ref` 的生命周期也不能超出 `&#x27;a`。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一个泛型函数，使用 `Debug` trait 来打印内容。</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">print</span>&lt;T&gt;(t: T) <span class="keyword">where</span></span><br><span class="line">    T: <span class="built_in">Debug</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;`print`: t is &#123;:?&#125;&quot;</span>, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里接受一个指向 `T` 的引用，其中 `T` 实现了 `Debug` trait，并且在 `T` 中的</span></span><br><span class="line"><span class="comment">// 所有*引用*都必须比 `&#x27;a&#x27;` 存活时间更长。另外，`&#x27;a` 也要比函数活得更长。</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">print_ref</span>&lt;<span class="symbol">&#x27;a</span>, T&gt;(t: &amp;<span class="symbol">&#x27;a</span> T) <span class="keyword">where</span></span><br><span class="line">    T: <span class="built_in">Debug</span> + <span class="symbol">&#x27;a</span> &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;`print_ref`: t is &#123;:?&#125;&quot;</span>, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">ref_x</span> = <span class="title function_ invoke__">Ref</span>(&amp;x);</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">print_ref</span>(&amp;ref_x);</span><br><span class="line">    <span class="title function_ invoke__">print</span>(ref_x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="强制转换">强制转换</h3><ul><li>强制转换可以由编译器隐式推导，也可以通过声明不同生命周期的形式实现。</li><li>通常情况之下是由较长的生命周期转换为较短的生命周期。</li></ul><h3 id="static">static</h3><ul><li>'static是生命周期中最长的，它能够在整个程序运行过程中存在。它也可以被强制转换为一个更短的生命周期。</li></ul><div class="note info modern"><p>static生命周期的变量被保存在可执行文件的只读内存区。实现方法:</p><ul><li>使用static声明常量</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> NUM: <span class="type">i32</span> = <span class="number">18</span>;<span class="comment">//函数体之外</span></span><br></pre></td></tr></table></figure><ul><li>产生拥有&amp;'static str类型的string字面量</li></ul></div><h3 id="省略">省略</h3><ul><li>在某些普遍的状态之下rust可以省略生命周期的写法。可以在《Rust程序设计语言》中找到相关的解释。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--14.泛型</title>
      <link href="/post/3149cbec.html"/>
      <url>/post/3149cbec.html</url>
      
        <content type="html"><![CDATA[<h1 id="泛型">泛型</h1><div class="note info modern"><p>泛型的命名方式是以大驼峰进行命名的。任何用泛型参数表示的类型都是泛型，其他的都是非泛型类型。</p></div><h2 id="函数">函数</h2><ul><li>使用某个类型之前使用<T>,T就在后面使用过程之中变成泛型。</li><li>泛型类型的命名方式有显式命名和隐式命名，显式命名较为具体，隐式命名也可完成显式命名的任务。</li></ul><h2 id="实现">实现</h2><ul><li><code>impl</code>块实现泛型，和函数类似。</li></ul><h2 id="trait">trait</h2><ul><li><code>trait</code>也可是泛型</li></ul><h2 id="约束">约束</h2><ul><li>对某些泛型进行设置约束，如<mark class="hl-label red">Display打印</mark> 等一些trait约束。</li></ul><h3 id="测试实例：空约束">测试实例：空约束</h3><h2 id="多重约束">多重约束</h2><ul><li>使用➕号连接</li><li>也可以使用多个约束，分别命名为其他的类型即可。</li></ul><h2 id="where从句">where从句</h2><ul><li>使用where从句可以简化约束的写法。</li></ul><h2 id="关联类型">关联类型</h2><ul><li>关联类型相当于是一种<code>trait</code>的嵌套，这样做的方法能够简化代码。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--13.属性</title>
      <link href="/post/14d9fe6c.html"/>
      <url>/post/14d9fe6c.html</url>
      
        <content type="html"><![CDATA[<h1 id="属性">属性</h1><div class="note info modern"><p>属性作用于模块、crate、项的元数据。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#![crate_attribute]</span> <span class="comment">//作用于整个crate</span></span><br><span class="line"><span class="meta">#[item_attribute]</span> <span class="comment">//作用于模块或者项</span></span><br></pre></td></tr></table></figure></div><ul><li>属性可以接收参数，可以有多个参数，分开放到多行之中。</li></ul><h2 id="死代码">死代码</h2><ul><li><mark class="hl-label blue">dead_code</mark> 死代码，又叫做无效代码(lint)，在<mark class="hl-label orange">rust</mark> 之中,可以禁用lint,来达到去除死代码警告的作用。</li></ul><h2 id="crate">crate</h2><ul><li><code>crate_type</code>告知编译器crate是一个二进制文件还是一个库。<code>crate_name</code>告知编译器crate的名称。</li></ul><div class="note warning modern"><ul><li>使用cargo的时候这两种类型都没有作用。</li></ul></div><h2 id="cfg">cfg</h2><ul><li>条件编译可通过两种不同的操作符实现。</li><li>具体的方法有cfg宏和cfg属性两种方法。</li></ul><h3 id="自定义条件">自定义条件</h3><div class="note warning modern"><p><code>target_os</code>等等一些方法是由<code>rustc</code>自动提供的，自定义的条件必须使用<code>--cfg标记</code>。</p></div>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--12.cargo</title>
      <link href="/post/11c241f.html"/>
      <url>/post/11c241f.html</url>
      
        <content type="html"><![CDATA[<h1 id="cargo">cargo</h1><ul><li>上一章的rustc在实际操作中很麻烦，所以需要使用cargo包管理器。cargo可以妥善处理第三方库的问题，这也造就了cargo在Rust中具有独特的优势。</li></ul><h2 id="依赖">依赖</h2><ul><li>相对于上一部分使用rustc，使用cargo创建新的项目会更简单</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo new foo</span><br><span class="line">cargo new --lib foo</span><br></pre></td></tr></table></figure><ul><li>所有的配置文件在<code>Cargo.toml</code>之中：</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[package]</span><br><span class="line">name = <span class="string">&quot;foo&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line">authors = [<span class="string">&quot;mark&quot;</span>]</span><br><span class="line"></span><br><span class="line">[dependencies]</span><br><span class="line">clap = <span class="string">&quot;2.27.1&quot;</span> # 来自 crates.io</span><br><span class="line">rand = &#123; git = <span class="string">&quot;https://github.com/rust-lang-nursery/rand&quot;</span> &#125; # 来自网上的仓库</span><br><span class="line">bar = &#123; path = <span class="string">&quot;../bar&quot;</span> &#125; # 来自本地文件系统的路径</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="约定规范">约定规范</h2><ul><li>可以在bin文件夹中添加更多个二进制可执行文件。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">foo</span><br><span class="line">├── Cargo.toml</span><br><span class="line">└── src</span><br><span class="line"><span class="code">    ├── main.rs</span></span><br><span class="line"><span class="code">    └── bin</span></span><br><span class="line"><span class="code">        └── my_other_bin.rs</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure><h2 id="测试">测试</h2><ul><li>单个测试放在指定文件夹中，多个测试模块需要放在test目录之下。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo</span><br><span class="line">├── Cargo.toml</span><br><span class="line">├── src</span><br><span class="line">│   └── main.rs</span><br><span class="line">└── tests</span><br><span class="line"><span class="code">    ├── my_test.rs</span></span><br><span class="line"><span class="code">    └── my_other_test.rs</span></span><br><span class="line"><span class="code"></span></span><br></pre></td></tr></table></figure><ul><li>运行测试的方法是:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo tests</span><br></pre></td></tr></table></figure><ul><li>测试单个模块使用:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo test test1</span><br></pre></td></tr></table></figure><h2 id="构建脚本">构建脚本</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[package]</span><br><span class="line">...</span><br><span class="line">build = &quot;build.rs&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>这个时候，cargo会优先在项目目录中查找build.rs文件。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust--11.crate库</title>
      <link href="/post/53fd950b.html"/>
      <url>/post/53fd950b.html</url>
      
        <content type="html"><![CDATA[<h1 id="crate">crate</h1><div class="note info modern"><p>crate是Rust中真正编译的单元，而模块不是。调用some.rs之中，some.rs被当作crate文件，如果这个文件中有mod声明(<mark class="hl-label blue">只需要有声明，可以没有定义</mark> )，这个mod中的内容会在编译之前被插入到相应的位置。</p></div><ul><li>模块不会被单独编译，只有crate才可以。</li></ul><h2 id="库">库</h2><ul><li>注意库的命名方式，需要首先限制<code>crate-type</code>。</li></ul><h2 id="使用库">使用库</h2><p>这一部分主要是使用rustc语句。</p>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过例子学习Rust———10.模块</title>
      <link href="/post/bbd57c9a.html"/>
      <url>/post/bbd57c9a.html</url>
      
        <content type="html"><![CDATA[<h1 id="通过例子学习Rust-10-模块">通过例子学习Rust-10.模块</h1><h2 id="可见性">可见性</h2><p>主模块可以直接访问其中的共有项，但是对于私有项来说是不能够直接访问的。<br>模块是可以嵌套的，嵌套内部的模块需要标注其内部的公有和私有属性，在模块之外只有共有的项可以访问。</p><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">pub(in crate::my_mod)</button></li><li class="tab"><button type="button" data-href="#test-2">pub(self)</button></li><li class="tab"><button type="button" data-href="#test-3">pub(super)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p><strong>只能在my_mod模块中访问，在主函数体中无法访问</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p><strong>只能在自己内部访问，相当于是私有项</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p><strong>只能在父模块中访问</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note warning modern"><p>嵌套内部的模块需要标注其内部的公有和私有属性</p></div><h2 id="结构体的可见性">结构体的可见性</h2><ul><li>结构体可见性的作用是为了隐藏信息，在结构体之外访问的时候这个可见性才会产生作用。</li><li>带有私有字段的公有结构体不能访问其私有字段。</li></ul><h2 id="use声明">use声明</h2><ul><li>use声明可以使用某个模块中的某个函数，或者整个模块。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> deeply::nested::function <span class="keyword">as</span> function</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">function</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;called function()&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>这时<code>deeply</code>中的<code>function</code>会覆盖原来的<code>function</code>。</li></ul><h2 id="super-和-self">super 和 self</h2><ul><li><code>super</code>（父级）和<code>self</code>（自身）能够在访问的时候消除歧义</li><li>使用方法:</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">super::my::function;</span><br><span class="line">self::function;</span><br></pre></td></tr></table></figure><h2 id="文件分层">文件分层</h2><ul><li>文件分层主要用在多个函数的情况之下。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Rust </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rust </tag>
            
            <tag> Rust模块 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo美化</title>
      <link href="/post/cf4e5bc2.html"/>
      <url>/post/cf4e5bc2.html</url>
      
        <content type="html"><![CDATA[<h1 id="hexo-博客优化">hexo 博客优化</h1><h2 id="参考文献">参考文献:</h2><p><a href="http://haiyong.site/">两个小人、星空背景、流星</a><br><a href="https://imszz.com/p/1b825486/">添加标签云</a><br><a href="https://chuchendjs.github.io/posts/clustrmaps/">添加访客地图</a><br><a href="https://blog.csdn.net/u012208219/article/details/106883012">添加阿里巴巴矢量图标</a><br><a href="https://chenlinkai.com/2022/01/05/Hexo_bottom_add_recordinfo/">icp备案</a><br><a href="butterfly.js.org">butterfly官方教程</a><br><a href="https://zfe.space/post/hexo-butterfly-article-double-row.html">配置双栏</a><br><a href="https://cnhuazhu.gitee.io/2021/07/05/Hexo%E9%AD%94%E6%94%B9/Hexo%E9%BC%A0%E6%A0%87%E6%A0%B7%E5%BC%8F%E4%BF%AE%E6%94%B9/">鼠标样式</a><br><a href="https://zfe.space/post/hexo-butterfly-article-double-row.html">配置双栏</a><br><a href="https://zfe.space/">hexo-magnet、hexo-history等</a></p><h2 id="hexo博客使用butterfly主题">hexo博客使用butterfly主题</h2><h3 id="初期配置">初期配置</h3><p>进入博客目录下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><p>然后在_config.yml之下使用这个主题:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><p>安装渲染插件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><p>之后在主界面之下创建一个新的文件，命名为{ % label _config.butterfly.yml blue % }</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi _config.butterfly.yml</span><br></pre></td></tr></table></figure><p>将themes/butterfly/_config.yml中的内容全部copy进刚才创建的文件中，这个文件相当于用户自定义的文件，配置覆盖原来的配置</p><h3 id="创建博客唯一链接：">创建博客唯一链接：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>然后进入_config.yml:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">#修改为</span><br><span class="line">  permalink: post/:abbrlink.html # post为自定义前缀</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32   #算法： crc16(default) and crc32</span><br><span class="line">  rep: hex     #进制： dec(default) and hex</span><br></pre></td></tr></table></figure><div class="note warning modern"><p>注意对齐格式为空格对齐，不能混用空格和tab，否则会报错</p></div><h2 id="公告两个小人">公告两个小人</h2><p>两个小人，在`themes/butterfly/layout/includes/widget/card_announcement.pug’之中添加如下代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> .xpand(style=&#x27;height:200px;&#x27;)</span><br><span class="line">  canvas.illo(width=&#x27;800&#x27; height=&#x27;800&#x27; style=&#x27;max-width: 200px; max-height: 200px; touch-action: none; width: 640px; height: 640px;&#x27;)</span><br><span class="line">script(src=&#x27;https://fastly.jsdelivr.net/gh/xiaopengand/blogCdn@latest/xzxr/twopeople1.js&#x27;)</span><br><span class="line">script(src=&#x27;https://fastly.jsdelivr.net/gh/xiaopengand/blogCdn@latest/xzxr/zdog.dist.js&#x27;)</span><br><span class="line">script#rendered-js(src=&#x27;https://fastly.jsdelivr.net/gh/xiaopengand/blogCdn@latest/xzxr/twopeople.js&#x27;)</span><br><span class="line">style.</span><br><span class="line">  .card-widget.card-announcement &#123;</span><br><span class="line">  margin: 0;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line">  canvas &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  cursor: move;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="星空背景、流星动态，不可和樱花特效共存">星空背景、流星动态，不可和樱花特效共存</h2><p>在<code>themes/butterfly/source/js</code>下新建<code>universe.js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">function dark() &#123;window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById(&quot;universe&quot;),o=!0,a=&quot;180,184,240&quot;,r=&quot;226,225,142&quot;,d=&quot;226,225,224&quot;,c=[];function f()&#123;n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute(&quot;width&quot;,n),s.setAttribute(&quot;height&quot;,e)&#125;function u()&#123;h.clearRect(0,0,n,e);for(var t=c.length,i=0;i&lt;t;i++)&#123;var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()&#125;&#125;function y()&#123;this.reset=function()&#123;this.giant=m(3),this.comet=!this.giant&amp;&amp;!o&amp;&amp;m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)&#125;,this.fadeIn=function()&#123;this.fadingIn&amp;&amp;(this.fadingIn=!(this.opacity&gt;this.opacityTresh),this.opacity+=this.do)&#125;,this.fadeOut=function()&#123;this.fadingOut&amp;&amp;(this.fadingOut=!(this.opacity&lt;0),this.opacity-=this.do/2,(this.x&gt;n||this.y&lt;0)&amp;&amp;(this.fadingOut=!1,this.reset()))&#125;,this.draw=function()&#123;if(h.beginPath(),this.giant)h.fillStyle=&quot;rgba(&quot;+a+&quot;,&quot;+this.opacity+&quot;)&quot;,h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet)&#123;h.fillStyle=&quot;rgba(&quot;+d+&quot;,&quot;+this.opacity+&quot;)&quot;,h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t&lt;30;t++)h.fillStyle=&quot;rgba(&quot;+d+&quot;,&quot;+(this.opacity-this.opacity/20*t)+&quot;)&quot;,h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()&#125;else h.fillStyle=&quot;rgba(&quot;+r+&quot;,&quot;+this.opacity+&quot;)&quot;,h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()&#125;,this.move=function()&#123;this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&amp;&amp;this.reset(),(this.x&gt;n-n/4||this.y&lt;0)&amp;&amp;(this.fadingOut=!0)&#125;,setTimeout(function()&#123;o=!1&#125;,50)&#125;function m(t)&#123;return Math.floor(1e3*Math.random())+1&lt;10*t&#125;function l(t,i)&#123;return Math.random()*(i-t)+t&#125;f(),window.addEventListener(&quot;resize&quot;,f,!1),function()&#123;h=s.getContext(&quot;2d&quot;);for(var t=0;t&lt;i;t++)c[t]=new y,c[t].reset();u()&#125;(),function t()&#123;document.getElementsByTagName(&#x27;html&#x27;)[0].getAttribute(&#x27;data-theme&#x27;)==&#x27;dark&#x27;&amp;&amp;u(),window.requestAnimationFrame(t)&#125;()&#125;;</span><br><span class="line">dark()</span><br></pre></td></tr></table></figure><p>在<code>themes/butterfly/source/css</code>中新建<code>universe.css</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">/* 背景宇宙星光  */</span><br><span class="line">#universe&#123;</span><br><span class="line">  display: block;</span><br><span class="line">  position: fixed;</span><br><span class="line">  margin: 0;</span><br><span class="line">  padding: 0;</span><br><span class="line">  border: 0;</span><br><span class="line">  outline: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  pointer-events: none;</span><br><span class="line">  z-index: -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在根目录的_config.butterfly.yml中inject中配置bottom和head中添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">inject: </span><br><span class="line">  bottom:</span><br><span class="line">    # 星空背景</span><br><span class="line">    - &lt;canvas id=&quot;universe&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">    - &lt;script defer src=&quot;/js/universe.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">  head:</span><br><span class="line">    #星空背景</span><br><span class="line">    - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/universe.css&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="昼夜转换动画">昼夜转换动画:</h2><p>新建themes/butterfly/layout/includes/custom/sun_moon.pug</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir custom</span><br><span class="line">cd custom</span><br><span class="line">vi sum_moon.pug</span><br></pre></td></tr></table></figure><p>添加代码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">svg(aria-hidden=&#x27;true&#x27;, style=&#x27;position:absolute; overflow:hidden; width:0; height:0&#x27;)</span><br><span class="line">  symbol#icon-sun(viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">    path(d=&#x27;M960 512l-128 128v192h-192l-128 128-128-128H192v-192l-128-128 128-128V192h192l128-128 128 128h192v192z&#x27;, fill=&#x27;#FFD878&#x27;, p-id=&#x27;8420&#x27;)</span><br><span class="line">    path(d=&#x27;M736 512a224 224 0 1 0-448 0 224 224 0 1 0 448 0z&#x27;, fill=&#x27;#FFE4A9&#x27;, p-id=&#x27;8421&#x27;)</span><br><span class="line">    path(d=&#x27;M512 109.248L626.752 224H800v173.248L914.752 512 800 626.752V800h-173.248L512 914.752 397.248 800H224v-173.248L109.248 512 224 397.248V224h173.248L512 109.248M512 64l-128 128H192v192l-128 128 128 128v192h192l128 128 128-128h192v-192l128-128-128-128V192h-192l-128-128z&#x27;, fill=&#x27;#4D5152&#x27;, p-id=&#x27;8422&#x27;)</span><br><span class="line">    path(d=&#x27;M512 320c105.888 0 192 86.112 192 192s-86.112 192-192 192-192-86.112-192-192 86.112-192 192-192m0-32a224 224 0 1 0 0 448 224 224 0 0 0 0-448z&#x27;, fill=&#x27;#4D5152&#x27;, p-id=&#x27;8423&#x27;)</span><br><span class="line">  symbol#icon-moon(viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">    path(d=&#x27;M611.370667 167.082667a445.013333 445.013333 0 0 1-38.4 161.834666 477.824 477.824 0 0 1-244.736 244.394667 445.141333 445.141333 0 0 1-161.109334 38.058667 85.077333 85.077333 0 0 0-65.066666 135.722666A462.08 462.08 0 1 0 747.093333 102.058667a85.077333 85.077333 0 0 0-135.722666 65.024z&#x27;, fill=&#x27;#FFB531&#x27;, p-id=&#x27;11345&#x27;)</span><br><span class="line">    path(d=&#x27;M329.728 274.133333l35.157333-35.157333a21.333333 21.333333 0 1 0-30.165333-30.165333l-35.157333 35.157333-35.114667-35.157333a21.333333 21.333333 0 0 0-30.165333 30.165333l35.114666 35.157333-35.114666 35.157334a21.333333 21.333333 0 1 0 30.165333 30.165333l35.114667-35.157333 35.157333 35.157333a21.333333 21.333333 0 1 0 30.165333-30.165333z&#x27;, fill=&#x27;#030835&#x27;, p-id=&#x27;11346&#x27;)</span><br></pre></td></tr></table></figure><p>新建<code>/themes/butterfly/source/css/layout/sun_moon.styl</code>:</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.Cuteen_DarkSky</span>,</span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span><span class="selector-pseudo">:before</span></span><br><span class="line">  <span class="attribute">content</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">right</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">top</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">bottom</span> <span class="number">0</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">88888888</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">  <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(<span class="number">#feb8b0</span>, <span class="number">#fef9db</span>)</span><br><span class="line">  <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">    <span class="attribute">transition</span> <span class="number">2s</span> ease all</span><br><span class="line">    <span class="attribute">opacity</span> <span class="number">0</span></span><br><span class="line">    <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(<span class="number">#4c3f6d</span>, <span class="number">#6c62bb</span>, <span class="number">#93b1ed</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.DarkMode</span></span><br><span class="line">  <span class="selector-class">.Cuteen_DarkSky</span></span><br><span class="line">    <span class="selector-pseudo">&amp;:before</span></span><br><span class="line">      <span class="attribute">opacity</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line">  <span class="attribute">z-index</span> <span class="number">99999999</span></span><br><span class="line">  <span class="attribute">position</span> fixed</span><br><span class="line">  <span class="attribute">left</span> -<span class="number">50%</span></span><br><span class="line">  <span class="attribute">top</span> -<span class="number">50%</span></span><br><span class="line">  <span class="attribute">width</span> <span class="number">200%</span></span><br><span class="line">  <span class="attribute">height</span> <span class="number">200%</span></span><br><span class="line">  -webkit-<span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="attribute">animation</span> CuteenPlanetMove <span class="number">2s</span> <span class="built_in">cubic-bezier</span>(<span class="number">0.7</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  <span class="attribute">transform-origin</span> center bottom</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> CuteenPlanetMove &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  to &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.Cuteen_DarkPlanet</span></span><br><span class="line">  <span class="selector-pseudo">&amp;:after</span></span><br><span class="line">    <span class="attribute">position</span> absolute</span><br><span class="line">    <span class="attribute">left</span> <span class="number">35%</span></span><br><span class="line">    <span class="attribute">top</span> <span class="number">40%</span></span><br><span class="line">    <span class="attribute">width</span> <span class="number">9.375rem</span></span><br><span class="line">    <span class="attribute">height</span> <span class="number">9.375rem</span></span><br><span class="line">    <span class="attribute">border-radius</span> <span class="number">50%</span></span><br><span class="line">    <span class="attribute">content</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attribute">background</span> <span class="built_in">linear-gradient</span>(<span class="number">#fefefe</span>, <span class="number">#fffbe8</span>)</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.search</span></span><br><span class="line">  <span class="selector-tag">span</span></span><br><span class="line">    <span class="attribute">display</span> none</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.menus_item</span></span><br><span class="line">  <span class="selector-tag">a</span></span><br><span class="line">    <span class="attribute">text-decoration</span> none<span class="meta">!important</span></span><br><span class="line"><span class="comment">//按钮相关，对侧栏按钮做过魔改的可以调整这里的数值</span></span><br><span class="line"><span class="selector-class">.icon-V</span></span><br><span class="line">  <span class="attribute">padding</span> <span class="number">5px</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建<code>themes/butterfly/source/js/sun_moon.js</code>,</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function switchNightMode() &#123;</span><br><span class="line">  document.querySelector(&#x27;body&#x27;).insertAdjacentHTML(&#x27;beforeend&#x27;, &#x27;&lt;div class=&quot;Cuteen_DarkSky&quot;&gt;&lt;div class=&quot;Cuteen_DarkPlanet&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;),</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">      document.querySelector(&#x27;body&#x27;).classList.contains(&#x27;DarkMode&#x27;) ? (document.querySelector(&#x27;body&#x27;).classList.remove(&#x27;DarkMode&#x27;), localStorage.setItem(&#x27;isDark&#x27;, &#x27;0&#x27;), document.getElementById(&#x27;modeicon&#x27;).setAttribute(&#x27;xlink:href&#x27;, &#x27;#icon-moon&#x27;)) : (document.querySelector(&#x27;body&#x27;).classList.add(&#x27;DarkMode&#x27;), localStorage.setItem(&#x27;isDark&#x27;, &#x27;1&#x27;), document.getElementById(&#x27;modeicon&#x27;).setAttribute(&#x27;xlink:href&#x27;, &#x27;#icon-sun&#x27;)),</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">          document.getElementsByClassName(&#x27;Cuteen_DarkSky&#x27;)[0].style.transition = &#x27;opacity 3s&#x27;;</span><br><span class="line">          document.getElementsByClassName(&#x27;Cuteen_DarkSky&#x27;)[0].style.opacity = &#x27;0&#x27;;</span><br><span class="line">          setTimeout(function() &#123;</span><br><span class="line">            document.getElementsByClassName(&#x27;Cuteen_DarkSky&#x27;)[0].remove();</span><br><span class="line">          &#125;, 1e3);</span><br><span class="line">        &#125;, 2e3)</span><br><span class="line">    &#125;)</span><br><span class="line">  const nowMode = document.documentElement.getAttribute(&#x27;data-theme&#x27;) === &#x27;dark&#x27; ? &#x27;dark&#x27; : &#x27;light&#x27;</span><br><span class="line">  if (nowMode === &#x27;light&#x27;) &#123;</span><br><span class="line">    activateDarkMode()</span><br><span class="line">    saveToLocal.set(&#x27;theme&#x27;, &#x27;dark&#x27;, 2)</span><br><span class="line">    GLOBAL_CONFIG.Snackbar !== undefined &amp;&amp; btf.snackbarShow(GLOBAL_CONFIG.Snackbar.day_to_night)</span><br><span class="line">    document.getElementById(&#x27;modeicon&#x27;).setAttribute(&#x27;xlink:href&#x27;, &#x27;#icon-sun&#x27;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    activateLightMode()</span><br><span class="line">    saveToLocal.set(&#x27;theme&#x27;, &#x27;light&#x27;, 2)</span><br><span class="line">    document.querySelector(&#x27;body&#x27;).classList.add(&#x27;DarkMode&#x27;), document.getElementById(&#x27;modeicon&#x27;).setAttribute(&#x27;xlink:href&#x27;, &#x27;#icon-moon&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  // handle some cases</span><br><span class="line">  typeof utterancesTheme === &#x27;function&#x27; &amp;&amp; utterancesTheme()</span><br><span class="line">  typeof FB === &#x27;object&#x27; &amp;&amp; window.loadFBComment()</span><br><span class="line">  window.DISQUS &amp;&amp; document.getElementById(&#x27;disqus_thread&#x27;).children.length &amp;&amp; setTimeout(() =&gt; window.disqusReset(), 200)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>themes/butterfly/layout/includes/head.pug</code>添加一行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//- global config</span><br><span class="line">!=partial(&#x27;includes/head/config&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"></span><br><span class="line">include ./head/config_site.pug</span><br><span class="line">include ./head/noscript.pug</span><br><span class="line"></span><br><span class="line">!=fragment_cache(&#x27;injectHeadJs&#x27;, function()&#123;return inject_head_js()&#125;)</span><br><span class="line"></span><br><span class="line">!=fragment_cache(&#x27;injectHead&#x27;, function()&#123;return injectHtml(theme.inject.head)&#125;)</span><br><span class="line">+ include ./custom/sun_moon.pug</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>themes/butterfly/layout/includes/rightside.pug</code>,替换原来的昼夜替换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">when &#x27;translate&#x27;</span><br><span class="line">  if translate.enable</span><br><span class="line">    button#translateLink(type=&quot;button&quot; title=_p(&#x27;rightside.translate_title&#x27;))= translate.default</span><br><span class="line">when &#x27;darkmode&#x27;</span><br><span class="line">  if darkmode.enable &amp;&amp; darkmode.button</span><br><span class="line">     a.icon-V.hidden(onclick=&#x27;switchNightMode()&#x27;,  title=_p(&#x27;rightside.night_mode_title&#x27;))</span><br><span class="line">       svg(width=&#x27;25&#x27;, height=&#x27;25&#x27;, viewBox=&#x27;0 0 1024 1024&#x27;)</span><br><span class="line">         use#modeicon(xlink:href=&#x27;#icon-moon&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改_config.butterfly.yml</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  bottome:</span><br><span class="line">    - &lt;script src=&quot;/js/sun_moon.js&quot; async&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="引入Aplayer播放器">引入Aplayer播放器:</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-aplayer --save</span><br></pre></td></tr></table></figure><p>站点配置文件中_config.yml中添加新的配置项:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># APlayer</span><br><span class="line"># https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md</span><br><span class="line">aplayer:</span><br><span class="line">  meting: true</span><br><span class="line">  asset_inject: false</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改主题配置文件_config.butterfly.yml中配置内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Inject the css and script (aplayer/meting)</span><br><span class="line">aplayerInject:</span><br><span class="line">  enable: true</span><br><span class="line">  per_page: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在主题配置文件中添加容器:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  bottom:</span><br><span class="line">    - &lt;div class=&quot;aplayer no-destroy&quot; data-id=&quot;5183531430&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-fixed=&quot;true&quot; data-mini=&quot;true&quot; data-listFolded=&quot;false&quot; data-order=&quot;random&quot; data-preload=&quot;none&quot; data-autoplay=&quot;false&quot; muted&gt;&lt;/div&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="note warning modern"><p>找寻歌单，对应网站对应的data-id和其他数据：</p></div><p><img src="/myimg/qqm1.png" alt=""></p><ul><li>data-server =&gt; 平台名称。netease：网易；tencent：腾讯；xiami：虾米；kugou：酷狗；baidu：百度</li><li>data-type=&gt;类型。playlist：歌单；song：单曲；专辑：album；关键词：search；歌手：artist</li><li>data-id =&gt;音乐页面链接上的id号<br>之后添加aplayer自动缩进隐藏,在’themes/butterfly/source/css/custom.css’中添加:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body &#123;</span><br><span class="line">  left: -66px !important;</span><br><span class="line">  /* 默认情况下缩进左侧66px，只留一点箭头部分 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover &#123;</span><br><span class="line">  left: 0 !important;</span><br><span class="line">  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="阿里云矢量图标库">阿里云矢量图标库:</h2><p>首先注册阿里云矢量图标库,添加喜欢的图标到购物车，最后点击添加到项目(没有项目先添加项目)<br>最后在我的项目中:<br><img src="/myimg/icon1.png" alt=""><br>最后点击我的项目，点击fontclass版本之下的cdn链接，在打开的文件中复制所有的文件到<code>themes/butterfly/source/css/</code>之下，新建命名为<code>iconfont.css</code><br><img src="/myimg/icon2.png" alt=""><br><img src="/myimg/icon3.png" alt=""></p><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconfont icon-neovim #类似原来的fa fa-sda之类的</span><br></pre></td></tr></table></figure><p>对iconfont可以修改，在iconfont.css中添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">.iconfont &#123;</span><br><span class="line">  font-family: &quot;iconfont&quot; !important;</span><br><span class="line">  font-size: 16px; //整体大小</span><br><span class="line">  font-style: normal;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.icon-SAG:before &#123;</span><br><span class="line">  content: &quot;\e622&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.icon-wendang:before &#123;</span><br><span class="line">  content: &quot;\e603&quot;;</span><br><span class="line">  color:deepskyblue; //颜色</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="网站副标题">网站副标题:</h2><p>在_config.butterfly.yml中直接修改,具体可看butterfly官方文档</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line">title: Hexo</span><br><span class="line">subtitle:</span><br><span class="line">  enable: true</span><br><span class="line">  # Typewriter Effect (打字效果)</span><br><span class="line">  effect: true</span><br><span class="line">  # loop (循環打字)</span><br><span class="line">  loop: true</span><br><span class="line">  # source 調用第三方服務</span><br><span class="line">  # source: false 關閉調用</span><br><span class="line">  # source: 1  調用一言網的一句話（簡體） https://hitokoto.cn/</span><br><span class="line">  # source: 2  調用一句網（簡體） http://yijuzhan.com/</span><br><span class="line">  # source: 3  調用今日詩詞（簡體） https://www.jinrishici.com/</span><br><span class="line">  # subtitle 會先顯示 source , 再顯示 sub 的內容</span><br><span class="line">  # source: 3</span><br><span class="line">  # 如果關閉打字效果，subtitle 只會顯示 sub 的第一行文字</span><br><span class="line">  sub:</span><br><span class="line">    - 我双手合十的愿望里永远有你。</span><br><span class="line">    - 穿越人海，只为与你相拥。</span><br><span class="line">    - 手握日月摘 ♥ 陈。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="侧边栏设置">侧边栏设置:</h2><p>在_config.butterfly.yml中进行设置,还是看官方文档</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">aside:</span></span><br><span class="line">xxxx</span><br></pre></td></tr></table></figure><h2 id="访问人数、运行时间、字数统计">访问人数、运行时间、字数统计</h2><p>均在_config.butterfly.yml之中<br>访问人数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">busuanzi:</span><br><span class="line">  site_uv: true</span><br><span class="line">  site_pv: true</span><br><span class="line">  page_pv: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行时间:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">runtimeshow:</span><br><span class="line">  enable: true</span><br><span class="line">  publish_date: 6/7/2018 00:00:00  </span><br><span class="line">  ##网页开通时间</span><br><span class="line">  #格式: 月/日/年 时间</span><br><span class="line">  #也可以写成 年/月/日 时间</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>字数统计</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="侧边栏时钟">侧边栏时钟</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-butterfly-clock --save</span><br></pre></td></tr></table></figure><p>然后在_config.yml中添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># electric_clock</span><br><span class="line"># see https://akilar.top/posts/4e39cf4a/</span><br><span class="line">electric_clock:</span><br><span class="line">  enable: true # 开关</span><br><span class="line">  priority: 5 #过滤器优先权</span><br><span class="line">  enable_page: all # 应用页面</span><br><span class="line">  exclude:</span><br><span class="line">    # - /posts/</span><br><span class="line">    # - /about/</span><br><span class="line">  layout: # 挂载容器类型</span><br><span class="line">    type: class</span><br><span class="line">    name: sticky_layout</span><br><span class="line">    index: 0</span><br><span class="line">  loading: https://npm.elemecdn.com/hexo-butterfly-clock/lib/loading.gif #加载动画自定义</span><br><span class="line">  clock_css: https://npm.elemecdn.com/hexo-butterfly-clock/lib/clock.min.css</span><br><span class="line">  clock_js: https://npm.elemecdn.com/hexo-butterfly-clock/lib/clock.min.js</span><br><span class="line">  ip_api: https://pv.sohu.com/cityjson?ie=utf-8</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="live2d看板娘">live2d看板娘:</h2><p>首先克隆原作者的到本地butterfly/sources之下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/stevenjoezhang/live2d-widget.git  </span><br></pre></td></tr></table></figure><p>进入live2d文件夹中，修改两处：<br>修改路径为第二行路径，将第一个注释掉</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// live2d_path 参数建议使用绝对路径</span><br><span class="line">//const live2d_path = &quot;https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/&quot;;</span><br><span class="line">const live2d_path = &quot;/live2d-widget/&quot;;</span><br></pre></td></tr></table></figure><p>将cdnPath注释掉，使用apiPath</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 加载 waifu.css live2d.min.js waifu-tips.js</span><br><span class="line"><span class="keyword">if</span> (screen.width &gt;= 768) &#123;</span><br><span class="line">Promise.all([</span><br><span class="line">loadExternalResource(live2d_path + <span class="string">&quot;waifu.css&quot;</span>, <span class="string">&quot;css&quot;</span>),</span><br><span class="line">loadExternalResource(live2d_path + <span class="string">&quot;live2d.min.js&quot;</span>, <span class="string">&quot;js&quot;</span>),</span><br><span class="line">loadExternalResource(live2d_path + <span class="string">&quot;waifu-tips.js&quot;</span>, <span class="string">&quot;js&quot;</span>)</span><br><span class="line">]).<span class="keyword">then</span>(() =&gt; &#123;</span><br><span class="line">// 配置选项的具体用法见 README.md</span><br><span class="line">initWidget(&#123;</span><br><span class="line">waifuPath: live2d_path + &quot;waifu-tips.json&quot;,</span><br><span class="line">apiPath: &quot;https://live2d.fghrsh.net/api/&quot;,</span><br><span class="line">//cdnPath: &quot;https://fastly.jsdelivr.net/gh/fghrsh/live2d_api/&quot;,</span><br><span class="line">tools: [&quot;hitokoto&quot;, &quot;asteroids&quot;, &quot;switch-model&quot;, &quot;switch-texture&quot;, &quot;photo&quot;, &quot;info&quot;, &quot;quit&quot;]</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用inject添加三个参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">head:</span><br><span class="line">- &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;&gt;</span><br><span class="line">- &lt;script src=&quot;/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">bottom:</span><br><span class="line">- &lt;script src=&quot;https://cdn.jsdelivr.net/gh/weilain/cdn-photo/js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在_config.butterfly.yml之中添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">live2d:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h2 id="搜索系统">搜索系统</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save   </span><br></pre></td></tr></table></figure><p>然后_config.butterfly.yml之中添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  preload: true</span><br><span class="line">  CDN:</span><br><span class="line"></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: all</span><br><span class="line">  content: true</span><br><span class="line">  template: ./search.xml</span><br></pre></td></tr></table></figure><h2 id="标签云">标签云</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-tag-cloud --save</span><br></pre></td></tr></table></figure><p>然后添加文字到butterfly/layout/include/widget/card_tags.pug</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if site.tags.length</span><br><span class="line">  .card-widget.card-tags</span><br><span class="line">    .card-content</span><br><span class="line">      .item-headline</span><br><span class="line">        i.fa.fa-tags(aria-hidden=&quot;true&quot;)</span><br><span class="line">        span= _p(&#x27;aside.card_tags&#x27;)</span><br><span class="line">        script(type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcloud.js&quot;)</span><br><span class="line">        script(type=&quot;text/javascript&quot; charset=&quot;utf-8&quot; src=&quot;/js/tagcanvas.js&quot;)</span><br><span class="line">        #myCanvasContainer.widget.tagcloud(align=&#x27;center&#x27;)</span><br><span class="line">          canvas#resCanvas(width=&#x27;200&#x27;, height=&#x27;200&#x27;, style=&#x27;width=100%&#x27;)</span><br><span class="line">            != tagcloud()</span><br><span class="line">          != tagcloud(&#123;min_font: 16, max_font: 24, amount: 50, color: true, start_color: &#x27;#999&#x27;, end_color: &#x27;#99a9bf&#x27;&#125;)</span><br></pre></td></tr></table></figure><h2 id="添加访客地图">添加访客地图</h2><p>在此之前得有个 clustrmaps 账号，前往 clustrmaps 网站注册一个帐号<br>找到 Free Tools 下面的 Website Widget, 点击 Get Map Widget,输入你的博客网址<br>点击 Next<br>根据你自己的喜好选择样式 Map widget 或 Globe Widget（建议选第二个）<br>找到如下代码，记住 src (** 的部分):</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> id=<span class="string">&quot;clstr_globe&quot;</span> src=<span class="string">&quot;**********************&quot;</span>&gt;</span><br></pre></td></tr></table></figure><p>添加和修改模版:<br>在 <code>themes\Butterfly\layout\includes\widget</code>文件夹新建card_map.pug 文件，文件内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.card-widget.card-map</span><br><span class="line">  .card-content</span><br><span class="line">    .item-headline</span><br><span class="line">      i.fa.fa-globe-asia(aria-hidden=&quot;true&quot;)</span><br><span class="line">      span= _p(&#x27;aside.card_map&#x27;)</span><br><span class="line">    script#clstr_globe(type=&quot;text/javascript&quot; defer=&quot;defer&quot; src=&quot;此处填入你自己的代码&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改<code>themes\Butterfly\layout\includes\widget\index.pug</code> 文件，在你想要显示的位置插入以下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if theme.aside.card_map</span><br><span class="line">        !=partial(&#x27;includes/widget/card_map&#x27;, &#123;&#125;, &#123;cache:theme.fragment_cache&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 butterfly.yml 文件，找到 card_webinfo 下面添加一行card_map: true<br>编辑 themes\Butterfly\languages\zh-CN.yml 文件 (根据你的网站语言选择)，找到 card_announcement: 公告 , 在下面添加一行 card_map: 访客地图 (后面的文本可自定义)<br>如果不想显示，直接把 butterfly.yml 文件的card_map: true 改为 card_map: false 即可</p><h2 id="icp备案">icp备案</h2><p>在_config.butterfly.yml之中添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Footer:</span><br><span class="line">ICP:</span><br><span class="line">  enable: true  # 是否启用ICP</span><br><span class="line">  url: https://beian.miit.gov.cn/  # 点击后的链接地址</span><br><span class="line">  text: 粤ICP备2021177866号 # 更改成自己的备案号</span><br><span class="line">  icon:    # 图标</span><br></pre></td></tr></table></figure><p>放置图标到<code>/themes/butterfly/source/img</code>之中(图标可以在任一一个已经备案的网站中找到)<br>在<code>themes/butterfly/layout/includes/footer.pug</code>中添加:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> theme.<span class="property">ICP</span>.<span class="property">enable</span></span><br><span class="line">  .<span class="property">icp</span></span><br><span class="line">    <span class="title function_">a</span>(href=theme.<span class="property">ICP</span>.<span class="property">url</span>)</span><br><span class="line">      <span class="keyword">if</span> theme.<span class="property">ICP</span>.<span class="property">icon</span></span><br><span class="line">        img.<span class="property">icp</span>-<span class="title function_">icon</span>(src=<span class="title function_">url_for</span>(theme.<span class="property">ICP</span>.<span class="property">icon</span>))</span><br><span class="line">      span=theme.<span class="property">ICP</span>.<span class="property">text</span></span><br><span class="line">  <span class="keyword">if</span> theme.<span class="property">NSP</span>.<span class="property">enable</span></span><br><span class="line">  .<span class="property">icp</span></span><br><span class="line">    <span class="title function_">a</span>(href=theme.<span class="property">NSP</span>.<span class="property">url</span>)</span><br><span class="line">      <span class="keyword">if</span> theme.<span class="property">NSP</span>.<span class="property">icon</span></span><br><span class="line">        img.<span class="property">icp</span>-<span class="title function_">icon</span>(src=<span class="title function_">url_for</span>(theme.<span class="property">NSP</span>.<span class="property">icon</span>))</span><br><span class="line">      span=theme.<span class="property">NSP</span>.<span class="property">text</span></span><br><span class="line">  <span class="keyword">if</span> theme.<span class="property">footer</span>.<span class="property">custom_text</span></span><br><span class="line">    .<span class="property">footer_custom_text</span>!=<span class="string">`<span class="subst">$&#123;theme.footer.custom_text&#125;</span>`</span></span><br></pre></td></tr></table></figure><h2 id="鼠标样式修改">鼠标样式修改:</h2><p>在themes\butterfly\source\css中新建mouse.css文件:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/default.cur</span>),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">cursor</span>: <span class="built_in">url</span>(<span class="string">https://cdn.jsdelivr.net/gh/sviptzk/HexoStaticFile@latest/Hexo/img/pointer.cur</span>),</span><br><span class="line">        default;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在_config.butterfly.yml中inject注入:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  - &lt;link rel=&quot;stylesheet&quot; href=&quot;/css/mouse.css&quot;&gt;</span><br></pre></td></tr></table></figure><h2 id="twikoo评论">twikoo评论</h2><p><a href="http://haiyong.site/post/17c68aa7.html">twikoo</a></p><h2 id="post子目录"><a href="https://www.xmeta.love/archives/hexo/series.html">post子目录</a></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">// themes\Butterfly\layout\post.pug</span><br><span class="line">// 注意直接在文件开始添加</span><br><span class="line">extends includes/layout.pug</span><br><span class="line"></span><br><span class="line">block content</span><br><span class="line">  #post</span><br><span class="line">    if top_img === false</span><br><span class="line">      include includes/header/post-info.pug</span><br><span class="line"></span><br><span class="line">    //- 添加二級目錄 start</span><br><span class="line">    if page.series</span><br><span class="line">      div.post-series</span><br><span class="line">        h3 #&#123;page.series&#125;-系列：</span><br><span class="line">        - let list = site.posts.sort(&#x27;date&#x27;, -1)</span><br><span class="line">        - list.each(function(article)&#123;</span><br><span class="line">          if article.series == page.series</span><br><span class="line">            - let link = article.link || article.path</span><br><span class="line">            - let title = article.title || _p(&#x27;no_title&#x27;)</span><br><span class="line">            li</span><br><span class="line">              a.title(href=url_for(link) title=title)= title</span><br><span class="line">        - &#125;)</span><br><span class="line">    //- 添加二級目錄 end</span><br><span class="line"></span><br><span class="line">    article#article-container.post-content!=page.content</span><br></pre></td></tr></table></figure><p>这样设置能够自动添加series</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// scaffolds\post.md</span><br><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">series: </span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>最后在post中添加相同的series即可。</p><h2 id="hexo-swiper文章置顶插件">hexo-swiper文章置顶插件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-swiper-bar --save</span><br></pre></td></tr></table></figure><ul><li>在_config.yml下添加配置项</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">swiper:</span><br><span class="line">  enable: true</span><br><span class="line">  priority: 2</span><br><span class="line">  enable_page: /</span><br><span class="line">  layout:</span><br><span class="line">    type: id</span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  temple_html: &#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;height: auto;width: 100%&quot;&gt;&lt;div class=&quot;blog-slider swiper-container-fade swiper-container-horizontal&quot; id=&quot;swiper_container&quot;&gt;$&#123;temple_html_item&#125;&lt;/div&gt;&lt;/div&gt;&#x27;</span><br><span class="line">  plus_style: &quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用方法:<br>在Front-matter参数下添加，index越靠前，显示越前</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">swiper<span class="emphasis">_index: 8</span></span><br><span class="line"><span class="emphasis">swiper_</span>desc: 简单好用的 hexo 博客文章置顶插件！</span><br><span class="line">swiper<span class="emphasis">_cover: /images/letter/p.png</span></span><br></pre></td></tr></table></figure><h2 id="hexo-history-calender历史上的今天">hexo-history-calender历史上的今天</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-history-calendar --save</span><br></pre></td></tr></table></figure><p>在_config.yml中添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">history_calendar:</span><br><span class="line">  priority: 4</span><br><span class="line">  enable: true</span><br><span class="line">  enable_page: all</span><br><span class="line">  layout:</span><br><span class="line">    type: class</span><br><span class="line">    name: sticky_layout</span><br><span class="line">    index: 0</span><br><span class="line">  temple_html: &#x27;&lt;div class=&quot;card-widget card-history&quot;&gt;&lt;div class=&quot;card-content&quot;&gt;&lt;div class=&quot;item-headline&quot;&gt;&lt;i class=&quot;fas fa-clock fa-spin&quot;&gt;&lt;/i&gt;&lt;span&gt;那年今日&lt;/span&gt;&lt;/div&gt;&lt;div id=&quot;history-baidu&quot; style=&quot;height: 100px;overflow: hidden&quot;&gt;&lt;div class=&quot;history_swiper-container&quot; id=&quot;history-container&quot; style=&quot;width: 100%;height: 100%&quot;&gt;&lt;div class=&quot;swiper-wrapper&quot; id=&quot;history_container_wrapper&quot; style=&quot;height:20px&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hexo-magnet插件1-0">hexo-magnet插件1.0</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-magnet --save</span><br></pre></td></tr></table></figure><p>在根目录的_config.yml中添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">magnet:</span><br><span class="line">  enable: true</span><br><span class="line">  priority: 1</span><br><span class="line">  enable_page: /</span><br><span class="line">  type: categories</span><br><span class="line">  devide: 2</span><br><span class="line">  display:</span><br><span class="line">    - name: hexo</span><br><span class="line">      display_name: 写一个Hexo博客</span><br><span class="line">      icon: 📚</span><br><span class="line">    - name: linux</span><br><span class="line">      display_name: Linux安装和学习</span><br><span class="line">      icon: iconfont icon-linux</span><br><span class="line">    - name: neovim</span><br><span class="line">      display_name: neovim学习</span><br><span class="line">      icon: iconfont icon-neovim</span><br><span class="line">  color_setting:</span><br><span class="line">    text_color: black</span><br><span class="line">    text_hover_color: white</span><br><span class="line">    background_color: &quot;#f2f2f2&quot;</span><br><span class="line">    background_hover_color: &quot;#b30070&quot;</span><br><span class="line">  layout:</span><br><span class="line">    type: id</span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  temple_html: &#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height: auto&quot;&gt;&lt;div id=&quot;catalog_magnet&quot;&gt;$&#123;temple_html_item&#125;&lt;/div&gt;&lt;/div&gt;&#x27;</span><br><span class="line">  plus_style: &quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hexo-githubcalendar">hexo-githubcalendar</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-magnet --save</span><br></pre></td></tr></table></figure><p>接着在_config.yml中进行编写:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Ice Kano Plus_in</span><br><span class="line"># Hexo Github Canlendar</span><br><span class="line"># Author: Ice Kano</span><br><span class="line"># Modify: Lete乐特</span><br><span class="line">githubcalendar:</span><br><span class="line">  enable: true</span><br><span class="line">  priority: 3</span><br><span class="line">  enable_page: /</span><br><span class="line">  user: zfour #使用github就改为自己Github用户名，我使用的阿里云，对我是没有用的。</span><br><span class="line">  layout:</span><br><span class="line">    type: id</span><br><span class="line">    name: recent-posts</span><br><span class="line">    index: 0</span><br><span class="line">  githubcalendar_html: &#x27;&lt;div class=&quot;recent-post-item&quot; style=&quot;width:100%;height:auto;padding:10px;&quot;&gt;&lt;div id=&quot;github_loading&quot; style=&quot;width:10%;height:100%;margin:0 auto;display: block&quot;&gt;&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; xmlns:xlink=&quot;http://www.w3.org/1999/xlink&quot;  viewBox=&quot;0 0 50 50&quot; style=&quot;enable-background:new 0 0 50 50&quot; xml:space=&quot;preserve&quot;&gt;&lt;path fill=&quot;#d0d0d0&quot; d=&quot;M25.251,6.461c-10.318,0-18.683,8.365-18.683,18.683h4.068c0-8.071,6.543-14.615,14.615-14.615V6.461z&quot; transform=&quot;rotate(275.098 25 25)&quot;&gt;&lt;animateTransform attributeType=&quot;xml&quot; attributeName=&quot;transform&quot; type=&quot;rotate&quot; from=&quot;0 25 25&quot; to=&quot;360 25 25&quot; dur=&quot;0.6s&quot; repeatCount=&quot;indefinite&quot;&gt;&lt;/animateTransform&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div id=&quot;github_container&quot;&gt;&lt;/div&gt;&lt;/div&gt;&#x27;</span><br><span class="line">  pc_minheight: 280px</span><br><span class="line">  mobile_minheight: 0px</span><br><span class="line">  color: &quot;[&#x27;#ebedf0&#x27;, &#x27;#fdcdec&#x27;, &#x27;#fc9bd9&#x27;, &#x27;#fa6ac5&#x27;, &#x27;#f838b2&#x27;, &#x27;#f5089f&#x27;, &#x27;#c4067e&#x27;, &#x27;#92055e&#x27;, &#x27;#540336&#x27;, &#x27;#48022f&#x27;, &#x27;#30021f&#x27;]&quot;</span><br><span class="line">  api: https://gitcalendar.zfe.space/api</span><br><span class="line">  # api: https://python-gitee-calendar-api.vercel.app/api</span><br><span class="line">  calendar_js: https://cdn.jsdelivr.net/gh/Zfour/hexo-github-calendar@1.21/hexo_githubcalendar.js</span><br><span class="line">  plus_style: &quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于公共api被墙，所以采用备用api。具体可以查看<a href="https://github.com/Zfour/python_github_calendar_api">作者的议题</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arch Linux下hexo博客搭建和阿里云服务器配置</title>
      <link href="/post/fba42b22.html"/>
      <url>/post/fba42b22.html</url>
      
        <content type="html"><![CDATA[<h1 id="Arch-Linux下hexo博客的搭建与阿里云服务器">Arch Linux下hexo博客的搭建与阿里云服务器</h1><div class="note info modern"><p>提示</p></div><p>与其说是一个教程，其实是搜集过来的一些文章。</p><h2 id="前提条件">前提条件</h2><ol><li>安装必须的依赖文件</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S npm nodejs git</span><br></pre></td></tr></table></figure><p>使用<code>node -v</code>和<code>npm -v</code>检查是否安装成功<br>2. 使用npm安装hexo:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line"># hexo-cli 是 hexo的指令集。</span><br><span class="line">hexo -v</span><br></pre></td></tr></table></figure><ol start="3"><li>初始化hexo博客</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir blog</span><br><span class="line">cd blog</span><br><span class="line">hexo init #初始化hexo博客</span><br><span class="line">hexo g # hexo博客本地编译</span><br><span class="line">hexo s # hexo本地端口预览</span><br></pre></td></tr></table></figure><div class="note info modern"><p>如果本地端口占用，使用hexo s -p 4567或任意端口进行即可</p></div><h2 id="阿里云服务器">阿里云服务器</h2><ol><li>购买阿里云服务器，如果是新人或者是学生，可以薅羊毛，买个轻量云服务器，一年下来也就40来块钱，是叫做飞天计划</li></ol><div class="note info modern"><p>阿里云对于学生优惠还是很大的，抓紧薅羊毛</p></div><ol start="2"><li><p>我这里购买的是轻量应用服务器,进入阿里云首页，点击控制台，然后添加自己的服务器类型:<br><img src="/myimg/aliyun1.png" alt=""></p></li><li><p>点击进入服务器，然后记住服务器的公网IP,在<mark class="hl-label blue">服务器运维</mark> 中选择远程连接，设置自己的root密码。<br>轻量云服务器需要选择centos7系列，这个系列最容易配置,具体是在图片右边重置系统选择centos7系列里面的即可。<br><img src="/myimg/aliyun2.png" alt=""></p></li><li><p>通过ssh远程连接:</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ssh # 另外的可以根据电脑类型选择合适的安装方法,这个是arch</span><br><span class="line">ssh-keygen -t rsa # 生成公钥，现在还用不到</span><br><span class="line">ssh root@xx.xx.xx.xx   #公网IP，不是内网IP</span><br></pre></td></tr></table></figure><ol start="5"><li><p>通过ssh远程连接之后，出现welcome to aliyun之类的字符串，就算是成功连接了。</p></li><li><p>安装并创建git用户</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install git </span><br><span class="line">adduser git </span><br></pre></td></tr></table></figure><ol start="7"><li>添加账户权限</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>进入之后查找:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## Allow root to run any commands anywhere</span><br><span class="line">root    ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p>在这段话之后添加:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git   ALL=(ALL)     ALL</span><br></pre></td></tr></table></figure><p>保存退出<code>:wq</code>,然后修改权限:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/sudoers</span><br></pre></td></tr></table></figure><p>设置git账户密码:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo passwd git</span><br></pre></td></tr></table></figure><p>切换至git用户,创建~/.ssh文件夹和~/.ssh/authorized_keys文件，并且赋予权限：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su git</span><br><span class="line">mkdir ~/.ssh</span><br><span class="line">vim ~/.ssh/authorized_keys</span><br><span class="line"># 然后将arch中生成的id_rsa.pub文件中的公钥复制到authorized_keys,这一部分是在本地的~/.ssh之中。</span><br><span class="line">chmod 600 /home/git/.ssh/authorized_keys</span><br><span class="line">chmod 700 /home/git/.ssh</span><br></pre></td></tr></table></figure><p>然后使用:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -v git@SERVER</span><br></pre></td></tr></table></figure><p>创建目录:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#repo作为为Git仓库目录</span><br><span class="line">mkdir /var/repo</span><br><span class="line">chown -R git:git /var/repo</span><br><span class="line">chmod -R 755 /var/repo</span><br><span class="line">#hexo作为网站根目录</span><br><span class="line">mkdir /var/www/</span><br><span class="line">mkdir /var/www/hexo</span><br><span class="line">chown -R git:git /var/www/hexo</span><br><span class="line">chmod -R 755 /var/www/hexo</span><br></pre></td></tr></table></figure><p>创建裸git仓库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /var/repo</span><br><span class="line">git init --bare hexoBlog.git</span><br></pre></td></tr></table></figure><p>创建一个新的 Git 钩子，用于自动部署 在 /var/repo/hexoBlog.git 下，有一个自动生成的 hooks 文件夹。我们需要在里边新建一个新的钩子文件 post-receive。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/repo/hexoBlog.git/hooks/post-receive</span><br></pre></td></tr></table></figure><p>按 i 键进入文件的编辑模式，在该文件中添加两行代码（将下边的代码粘贴进去)，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">git --work-tree=/var/www/hexo --git-dir=/var/repo/hexoBlog.git checkout -f</span><br></pre></td></tr></table></figure><p>之后保存退出<code>:wq</code><br>到这个时候就搭建完成了。<br>7. 云服务器配置Nginx<br>用宝塔面板来一键部署Nginx Linux面板6.0安装命令(暂时仅兼容Centos7.x，其它系统版本请安装5.9稳定版)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; bash install.sh</span><br></pre></td></tr></table></figure><p>升级linux面板6.0</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://download.bt.cn/install/update6.sh|bash</span><br></pre></td></tr></table></figure><p>安装完成后会显示面板后台地址·账号·密码。打开面板后台地址登陆面板，在应用里面搜索Nginx，静静等待部署。</p><p>部署完成，点击网站-添加站点-输入域名(没有域名的输入自己的IP地址)-底部的PHP版本选择”纯静态”-提交。</p><p>网站创建完成之后，点击Nginx的配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">  # server_name 填写自己的域名</span><br><span class="line">    server_name luckyzmj.cn blog.luckyzmj.cn;</span><br><span class="line">    index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">  # 这里root填写自己的网站根目录，修改为/var/www/hexo</span><br><span class="line">    root /var/www/hexo;</span><br><span class="line">    # 定义错误页面码，如果出现相应的错误页面码，转发到那里。</span><br><span class="line">    error_page  404 403 500 502 503 504  /404.html;</span><br><span class="line">    # 承接上面的location。</span><br><span class="line">    location = /404.html &#123;</span><br><span class="line">    # 放错误页面的目录路径。当然默认可以在网站目录下，也可以定义放置错误页面的位置。</span><br><span class="line">        root   /usr/404.html; #网上搜索404模版，写进这个文件即可</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/wjw1014/p/9096485.html">404页面配置</a></p><p>之后保存退出，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service bt restart</span><br></pre></td></tr></table></figure><ol start="8"><li>设置权限：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R git:git /var/repo/</span><br><span class="line">chown -R git:git /var/www/hexo</span><br></pre></td></tr></table></figure><ol start="9"><li>退出云端</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 因为是git用户，使用两次exit,root 只需要一次</span><br><span class="line">exit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h2 id="本地配置">本地配置</h2><ol><li>git全局配置</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#定义邮箱(更换为你的邮箱地址就行)</span><br><span class="line">git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">#定义名称(更换自定义一个名称就行)</span><br><span class="line">git config --global user.name &quot;Your Name&quot;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置_config.yml<br>进入博客目录</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br></pre></td></tr></table></figure><p>配置_config.yml,找到deploy</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  #server改为你的服务IP地址或解析后的域名</span><br><span class="line">  #例如我改为repo: git@luckyzmj.cn:/var/repo/hexoBlog.git</span><br><span class="line">  repo: git@server:/var/repo/hexoBlog.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>保存，然后hexo一键三联</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp; hexo g &amp; hexo d</span><br></pre></td></tr></table></figure><p>在你的IP地址之下查看…</p><h2 id="hexo添加DCDN全站加速">hexo添加DCDN全站加速</h2><ul><li>将DCDN设置解析地址为全球，然后设置IP为服务器的IP，域名为&quot;<em>.supbjt.top&quot;,同样的，在云解析dns中CNAME解析也要设置为</em>.supbjt.top.<br><a href="http://www.luckysec.cn/posts/19d2a4e6.html">参考文献</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux学习</title>
      <link href="/post/9211474f.html"/>
      <url>/post/9211474f.html</url>
      
        <content type="html"><![CDATA[<h1 id="linux的安装">linux的安装</h1><h2 id="swig￼7"><div class="note info simple"><p>注意事项</p></div></h2><ul><li>linux使用过程中要及时添加<mark class="hl-label blue">timeshift(快照)</mark> </li></ul><h2 id="镜像的下载">镜像的下载</h2><ol><li>选择适合你自己的linux发行版本，下载对应的iso镜像。这里使用的是Arch Linux.</li></ol><ul><li>因为不同版本的linux发行版本，其稳定性，系统简洁程度均不同，如果注重稳定，可以选择debian发行版本之下的ubuntu、国产的deepin等等…</li></ul><div class="flink"><div class="flink-name">linux发行版本</div><div class="flink-desc">列出一部分linux版本</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://archlinux.org/" title="ArchLinux" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://ts2.cn.mm.bing.net/th?id=ODLS.adf1d790-68d6-4942-a2cc-f8fc58ca33f5&w=16&h=16&o=6&pid=1.2" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="ArchLinux" />              </div>              <div class="flink-item-name">ArchLinux</div>               <div class="flink-item-desc" title="自定义程度高，有接近完美的archwiki。记得添加timeshift">自定义程度高，有接近完美的archwiki。记得添加timeshift</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://manjaro.org/" title="Majaro" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://manjaro.org/static/img/block-logo.8b852d3e739c.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Majaro" />              </div>              <div class="flink-item-name">Majaro</div>               <div class="flink-item-desc" title="arch发行版本，相较于arch易于上手">arch发行版本，相较于arch易于上手</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://cn.ubuntu.com/" title="Ubuntu" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://ts2.cn.mm.bing.net/th?id=ODLS.cdad98e9-bec7-47eb-97ef-43845aac6ae7&w=16&h=16&o=6&pid=1.2" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="Ubuntu" />              </div>              <div class="flink-item-name">Ubuntu</div>               <div class="flink-item-desc" title="方便使用，显卡配置简单，预装较多，系统繁琐">方便使用，显卡配置简单，预装较多，系统繁琐</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.opensuse.org/" title="opensuse" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://ts1.cn.mm.bing.net/th?id=OIP.aEh5IV0M8BqVKgqTbETr5wHaHa&w=110&h=110&c=7&rs=1&qlt=80&pcl=f9f9f9&o=6&cdv=1&pid=18.2" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="opensuse" />              </div>              <div class="flink-item-name">opensuse</div>               <div class="flink-item-desc" title="便捷的打包，还有更新较快的的tumbleweed">便捷的打包，还有更新较快的的tumbleweed</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.deepin.org/index/zh" title="deepin" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://bbs.deepin.org/assets/image/pc/deepin-logo.svg" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="deepin" />              </div>              <div class="flink-item-name">deepin</div>               <div class="flink-item-desc" title="办公性能在国内媲美windows，继承了ubuntu的特点">办公性能在国内媲美windows，继承了ubuntu的特点</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.centos.org/" title="centos" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://ts2.cn.mm.bing.net/th?id=ODLS.4c21f23e-b7f5-4bd8-bd23-bf7dc58e6727&w=16&h=16&o=6&pid=1.2" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="centos" />              </div>              <div class="flink-item-name">centos</div>               <div class="flink-item-desc" title="服务器首选,至今仍然广泛应用的centos7系列">服务器首选,至今仍然广泛应用的centos7系列</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.debian.org/index.zh-cn.html" title="debian" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://ts1.cn.mm.bing.net/th?id=ODLS.e58bc2f3-d9ad-43d4-98c7-afca838fba4a&w=16&h=16&o=6&pid=1.2" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="debian" />              </div>              <div class="flink-item-name">debian</div>               <div class="flink-item-desc" title="丐帮元老，衍生出ubuntu、kali、Mx linux等众多版本，稳定耐用">丐帮元老，衍生出ubuntu、kali、Mx linux等众多版本，稳定耐用</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.redhat.com/zh" title="RedHat" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://ts4.cn.mm.bing.net/th?id=ODLS.3bf70a33-9065-4c8a-9206-2abcf391e9e1&w=16&h=16&o=6&pid=1.2" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="RedHat" />              </div>              <div class="flink-item-name">RedHat</div>               <div class="flink-item-desc" title="企业应用较为广泛，稳定">企业应用较为广泛，稳定</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.gentoo.org/" title="gentoo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://ts1.cn.mm.bing.net/th?id=ODLS.84a5b24c-e62f-41c2-852a-d124bf63a97e&w=16&h=16&o=6&pid=1.2" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="gentoo" />              </div>              <div class="flink-item-name">gentoo</div>               <div class="flink-item-desc" title="自定义程度极高，系统精简，记得添加timeshift。">自定义程度极高，系统精简，记得添加timeshift。</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.linuxfromscratch.org/" title="linux for scratch" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://www.linuxfromscratch.org/images/lfs-logo.png" onerror='this.onerror=null;this.src="/img/friend_404.gif"' alt="linux for scratch" />              </div>              <div class="flink-item-name">linux for scratch</div>               <div class="flink-item-desc" title="更像是一本书，体验linux的搭建过程。">更像是一本书，体验linux的搭建过程。</div>            </a>          </div></div></div><ol start="2"><li>点击需要的镜像版本，红色标示的即可。</li></ol><ul><li><img src="/myimg/linuxan.png" alt=""></li></ul><ol start="3"><li>archlinux按照<a href="https://blog.linioi.com/posts/18/">大佬的博客</a>安装即可。</li></ol><div class="note warning modern"><p>注意:</p></div><ul><li>了解基本的fdisk、cfdisk、lsblk的用法。</li><li>了解linux的基本分区系统:不同的分区类型<mark class="hl-label blue">UEFI</mark> 和<mark class="hl-label red">Btrfs</mark> 。</li><li>如果是笔记本电脑双系统安装，需要在安装之前一定要在另一个系统打开wifi，蓝牙，即便你在使用有线连接，否则，在安装完成之后会看不到无线连接。</li></ul><h2 id="archlinux的美化">archlinux的美化:</h2><ul><li>美化过程可以参照<a href="https://arch.icekylin.online/">Arch简明指南</a></li></ul><h3 id="动态壁纸插件">动态壁纸插件:</h3><ul><li>在kde-store中<a href="https://store.kde.org/p/1316299/">下载</a>安装包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gst-libav gst-plugins-bad gst-plugins-base gst-plugins-good gst-plugins-ugly</span><br><span class="line">kpackagetool5 -t Plasma/Wallpaper -i smartvideowallpaper.tar.gz </span><br></pre></td></tr></table></figure><ul><li>安装完成，在桌面-配置桌面和壁纸-布局选择桌面，壁纸类型选择Smart Video Wallpaper<br><img src="/myimg/pzzm.png" alt=""></li></ul><h2 id="显卡问题">显卡问题</h2><p>参照arch简明教程，注意安装bbswitch</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S bbswitch</span><br></pre></td></tr></table></figure><h2 id="matlab的安装">matlab的安装</h2><ol><li>arch中缺少源文件libxcrypt,这个文件可以在<a href="https://pkgs.org/">这里</a>找到</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Syu libxcrypt-compat</span><br></pre></td></tr></table></figure><ol start="2"><li>之后参照<a href="https://blog.csdn.net/weixin_43935696/article/details/107732029">这篇文章</a>即可。</li><li>可以安装matlab-support,以图标方式打开matlab</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S matlab-support</span><br></pre></td></tr></table></figure><h2 id="clash">clash</h2><ul><li>因为要在终端使用github的缘故，所以要下载clash。</li><li>建议使用clash for windows的linux发行版本。</li></ul><h3 id="配置过程">配置过程:</h3><ul><li>首先安装clash,在github上面下载需要的<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">软件包</a>，解压之后打开cfw。<br><img src="/myimg/clash.jpeg" alt=""><br><img src="/myimg/%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86.png" alt=""><br><img src="/myimg/firefox.png" alt=""></li></ul><h3 id="终端设置代理">终端设置代理:</h3><ul><li>建议打开一个终端设置一次，而不是默认设置所有终端:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export http_proxy=http://127.0.0.1:7890</span><br><span class="line">export https_proxy=http://127.0.0.1:7890</span><br></pre></td></tr></table></figure><h3 id="问题解决">问题解决</h3><ul><li>出现问题查看clash的日志。</li></ul><h2 id="Simple-Monitor">Simple Monitor</h2><ul><li>plasma 自带了一款monitor检测器，虽然不能像conky自由化程度那么高，但也是足够使用了，并且安装方便。</li><li><a href="https://github.com/dhabyx/plasma-simpleMonitor">github源地址</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S cmake</span><br><span class="line">git clone https://github.com/dhabyx/plasma-simpleMonitor.git plasma-simpleMonitor</span><br><span class="line">cd plasma-simpleMonitor</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">cmake -DCMAKE_INSTALL_PREFIX=$(kf5-config --prefix) -DCMAKE_BUILD_TYPE=Release  -DKDE_INSTALL_USE_QT_SYS_PATHS=ON ../</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><ul><li>安装完成之后就会得到一个类似我这样的:<br><img src="/myimg/logo.png" alt=""></li></ul><h2 id="思维导图">思维导图</h2><p>minder思维导图是一种轻量简单实用的思维导图，使用这种思维导图能够更好的帮助你记笔记</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S minder</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> clash </tag>
            
            <tag> matlab </tag>
            
            <tag> kde </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvim配置系列(一)：基础语法介绍</title>
      <link href="/post/2dfd86c5.html"/>
      <url>/post/2dfd86c5.html</url>
      
        <content type="html"><![CDATA[<h1 id="neovim系列-一-操作命令">neovim系列(一) 操作命令</h1><a class="btn-beautify orange block right outline larger" href="/categories/neovim/"   title="当前neovim系列，neovim的配置"><i class="far fa-hand-point-right"></i><span>当前neovim系列，neovim的配置</span></a><h2 id="neovim插件设置的命令">neovim插件设置的命令</h2><table><thead><tr><th>命令</th><th>意思</th></tr></thead><tbody><tr><td>TAB</td><td>补全代码，借助coc-vim插件</td></tr><tr><td>Shift+TAB</td><td>在最小化，关闭之间切换</td></tr><tr><td>ctrl+l</td><td>打开coc-vim补全</td></tr><tr><td>enter</td><td>对补全进行确定</td></tr><tr><td>“g[“和”[g”</td><td>对错误行进行切换</td></tr><tr><td>gd</td><td>查找函数的定义</td></tr><tr><td>ctrl+o</td><td>对查找过的函数返回查找地方</td></tr><tr><td>‘\’+r</td><td>对函数进行重定义，这个命令在之后会和vim-visual-multi配合使用</td></tr><tr><td>‘’+h</td><td>对函数参考文档查看</td></tr></tbody></table><hr><h2 id="插入模式">插入模式</h2><table><thead><tr><th>按键</th><th>含义</th></tr></thead><tbody><tr><td>i</td><td>在光标的前边进入插入模式</td></tr><tr><td>I</td><td>在光标所在行的行首进入插入模式</td></tr><tr><td>a</td><td>在光标的后边进入插入模式</td></tr><tr><td>A</td><td>在光标所在行的行尾进入插入模式</td></tr><tr><td>o</td><td>在光标所在行的下方插入空行并进入插入模式</td></tr><tr><td>O</td><td>在光标所在行的上方插入空行并进入插入模式</td></tr><tr><td>s</td><td>删除光标指定的字符并进入插入模式</td></tr><tr><td>S</td><td>将光标所在行清除并进入插入模式</td></tr></tbody></table><ul><li><p>以前我所使用的方法仅仅是i,a,没有系统学习，在这里我觉得常用的方法是使用I在所在行首行，他对应的A在行尾进行插入，这两个命令则可以和对应的小写比较，大写对应着行，小写对应着字。</p></li><li></li><li><p>s和S和这些类似，因为s对应着自己的字删除，S对应着行的删除。</p></li><li><p>最后是o和O,这个命令和下面的其他模式有类似的意思，但是这个命令o是向下插入空行，O是向上插入空行。</p></li><li><p><strong>退出命令</strong>：</p></li></ul><table><thead><tr><th>命令</th><th>意义</th></tr></thead><tbody><tr><td>:wq</td><td>保存退出</td></tr><tr><td>shift+zz</td><td>保存退出</td></tr><tr><td>:q</td><td>不修改退出</td></tr><tr><td>:q!</td><td>强制退出</td></tr><tr><td>:wq!</td><td>强制保存退出</td></tr></tbody></table><ul><li><p>在修改文件要注意查看文件是否为管理员权限的文件，如果是，使用sudo进入，不然无法修改。</p></li><li><p><strong>删除</strong></p></li><li><p>在insert模式之中使用Backspace或者Delete删除，但是建议不要，因为这样不如直接使用vscode。</p></li></ul><hr><h2 id="普通模式">普通模式</h2><ul><li><strong>光标移动命令</strong></li><li>特殊命令，使用x进行删除光标所在的位置字符</li></ul><table><thead><tr><th>按键</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td>(大写)将光标定位到行首的位置</td></tr><tr><td>^</td><td>同上</td></tr><tr><td>$</td><td>将光标定位到行尾的位置</td></tr><tr><td>b</td><td>将光标定位到光标所在单词的起始处</td></tr><tr><td>e</td><td>将光标定位到光标所在单词的结尾处</td></tr><tr><td>w</td><td>将光标定位到下一个单词的起始处（注意，是光标所在单词的下一个单词噢^_^）</td></tr><tr><td>gg</td><td>将光标定位到文件的开头</td></tr><tr><td>G</td><td>将光标定位到文件的末尾</td></tr><tr><td>h</td><td>向左移动一格光标</td></tr><tr><td>3h是向前三个格子，类似有j,k,l的命令。</td><td></td></tr></tbody></table><ul><li><strong>更多删除命令</strong><ul><li>删除一般使用d命令</li></ul></li></ul><table><thead><tr><th>按键</th><th>含义</th></tr></thead><tbody><tr><td>d0</td><td>删除光标从当前位置（不包含）到该行行首的所有字符</td></tr><tr><td>d^</td><td>同上</td></tr><tr><td>d$</td><td>删除从光标当前位置（包含）到该行行尾的所有字符</td></tr><tr><td>db</td><td>删除从光标当前位置（不包含）到单词起始处的所有字符</td></tr><tr><td>de</td><td>删除从光标当前位置（包含）到单词结尾处的所有字符</td></tr><tr><td>dw</td><td>删除从光标当前位置（包含）到下个单词起始处的所有字符</td></tr><tr><td>dh</td><td>删除光标前面一个字符</td></tr><tr><td>dl</td><td>删除光标指定的字符</td></tr><tr><td>dj</td><td>删除光标所在行以及下一行的所有字符</td></tr><tr><td>dk</td><td>删除光标所在行以及上一行的所有字符</td></tr><tr><td>dd</td><td>删除光标所在行的所有字符</td></tr><tr><td>dgg</td><td>删除光标所在行（包含）到文件开头的所有字符</td></tr><tr><td>dG</td><td>删除光标所在行（包含）到文件末尾的所有字符</td></tr><tr><td>jdd</td><td>删除下一行</td></tr></tbody></table><ul><li><p>使用d3h删除前三个格子中内容，如此有jkl等其他方法。</p></li><li><p><strong>撤销命令</strong></p><ul><li>小写u是撤销最后一次命令，而大写U是撤销所有命令。</li><li>撤销撤销的命令，类似于套娃，ctrl+r。</li></ul></li></ul><hr><ul><li><strong>粘贴命令</strong><ul><li>p命令将==最后一次删除的内容粘贴==，和之前的其他命令类似，小写是光标之后，大写则是光标之前。</li><li>p命令如果粘贴整行，会在光标下一行开始，如果是部分，则是光标之后。</li></ul></li></ul><hr><ul><li><strong>拷贝命令</strong><ul><li>拷贝命令是使用y进行拷贝，3yy表示拷贝三行，y$表示从光标所在位置拷贝到行尾的所有字符，yG表示从光标所在行拷贝到文件末尾航的所有字符。完成之后直接使用p命令粘贴。</li><li>y命令和d命令相同，都有对应的motion，可以参照d命令来查看y命令的motion。</li></ul></li></ul><hr><ul><li><strong>替换命令</strong><ul><li>r命令是在光标所指的位置进行插入</li><li>r命令无需进入插入模式，同时r命令可以在命令中使用<strong>数字+r</strong>进行更改。</li><li><strong>替换模式</strong><ul><li>进入R</li><li>在替换模式中backspace被设置为如果左边内容被替换过，恢复到原来样子，若未替换，则简单向左移动。</li></ul></li></ul></li></ul><hr><ul><li><strong>修改命令</strong><ul><li>c进入，会自动进入插入模式</li><li>格式为c[number]motion</li><li>motion和数字是可选择的</li></ul></li></ul><table><thead><tr><th>按键</th><th>含义</th></tr></thead><tbody><tr><td>c0</td><td>删除光标从当前位置（不包含）到该行行首的所有字符，并进入插入模式</td></tr><tr><td>c^</td><td>同上</td></tr><tr><td>c$</td><td>删除从光标当前位置（包含）到该行行尾的所有字符，并进入插入模式</td></tr><tr><td>cb</td><td>删除从光标当前位置（不包含）到单词起始处的所有字符，并进入插入模式</td></tr><tr><td>ce</td><td>删除从光标当前位置（包含）到单词结尾处的所有字符，并进入插入模式</td></tr><tr><td>cw</td><td>删除从光标当前位置（包含）到下个单词起始处的所有字符，并进入插入模式</td></tr><tr><td>ch</td><td>删除光标前边一个字符，并进入插入模式</td></tr><tr><td>cl</td><td>删除光标指定的字符，并进入插入模式</td></tr><tr><td>cj</td><td>删除光标所在行以及下一行的所有字符，并在光标下一行进入插入模式</td></tr><tr><td>ck</td><td>删除光标所在行以及上一行的所有字符，并在光标下一行进入插入模式</td></tr><tr><td>cc</td><td>删除光标所在行的字符，并进入插入模式</td></tr></tbody></table><hr><h2 id="文件信息、跳转、定位括号和缩进">文件信息、跳转、定位括号和缩进</h2><ul><li><strong>文件信息</strong>：<ul><li>crtl+g快速解决，在有nvim插件情况之下可以不使用</li></ul></li></ul><hr><ul><li><strong>跳转</strong></li><li>跳转常用的命令是<code>行号+G</code>或者是<code>:行号</code></li></ul><hr><ul><li><strong>定位括号</strong></li><li>在任意一半括号之上使用%进行跳转。</li></ul><hr><ul><li><strong>代码缩进</strong></li><li>我设置了nvim插件coc-nvim中的coc-rust-analyzer缩进，他会在文件保存进行自动缩进，但是使用vim就必须要学会手动缩进</li><li>VIM 可以使用尖括号（&lt; 或 &gt;）来控制缩进，我们常用的就是两个同方向的尖括号表示将光标所在的语句进行缩进和反缩进操作。很明显 &gt;&gt; 表示缩进，而 &lt;&lt; 则表示反缩进。</li><li>进入可视化(v)然后选中进行缩进，这只需要一个&lt;或者是&gt;。</li></ul><hr><h2 id="搜索命令">搜索命令</h2><ul><li><p>使用<code>/</code>或者<code>?</code>进入搜索模式，这时下方会出现<code>(:)</code>，你可以进行搜索。</p></li><li><p>搜索之后，然后使用n或者N进行切换上一个和下一个搜索。</p></li><li><p>/从光标位置向后，?从光标位置向前</p></li></ul><table><thead><tr><th>搜索方向</th><th>/</th></tr></thead><tbody><tr><td>n</td><td>向后搜索下一个</td></tr><tr><td>N</td><td>向前搜索下一个</td></tr></tbody></table><table><thead><tr><th>搜索方向</th><th>？</th></tr></thead><tbody><tr><td>n</td><td>向前搜索下一个</td></tr><tr><td>N</td><td>向后搜索下一个</td></tr></tbody></table><ul><li>在搜索命令中，<strong>.、*、[、]、^、%、/、?、~</strong> 和 <strong>$</strong> 这 10 个字符有着特殊意义，所以在使用这些字符的时候要在前面加上一个反斜杠**（\）**，比如你要搜索问号，则输入 <strong>/?</strong>。</li><li>退出搜索模式高亮：使用<code>:nohl</code></li></ul><h2 id="替换命令">替换命令</h2><ul><li>需要和搜索命令相结合</li><li>通过搜索功能，我们将光标定位到目标位置，如果你确定这个目标是可恶的，需要被替换的，你可以输入 <strong><code>:s/old/new</code></strong>，这样即可将光标所在行的第一个 old 替换为 new；你如果输入的是 <strong><code>:s/old/new/g</code></strong>，则表示将光标所在行的所有 old 替换为 new。</li><li>输入 <strong>:%s/old/new/g</strong>表示替换整个文件中每个匹配的字符串。</li><li>输入 <strong>:%s/old/new/gc</strong>替换的时候进行询问。<ul><li>这个时候会提示 <code>(y/n/a/q/l/^E/^Y)</code>，需要判断<ul><li>y 表示替换</li><li>n 表示不替换</li><li>a 表示替换所有</li><li>q 表示放弃替换<br>l-  表示替换第一个并进入插入模式</li><li>^E 表示用 Ctrl+e 来滚动屏幕</li><li>^Y 表示用 Ctrl+y 来滚动屏幕</li></ul></li></ul></li><li>替换某几行的，如5：13行的：<br>-  <code>:5,13s/old/new/g</code></li></ul><hr><h2 id="和shell相互结合">和shell相互结合</h2><ul><li>vim允许和shell相互结合使用，因为vim有<code>!</code>。</li><li>在输入冒号（:）进入命令行模式，输入感叹号（!），在其后便可以加上 shell 命令。此后 VIM 将临时跳转回 shell，并执行命令。再次按下 Enter 键回到 VIM。</li></ul><hr><ul><li><strong>文件另存为</strong><ul><li>使用 <code>:w test2</code>将现有的test文件转换为test2保存。</li><li><strong>可视模式局部文件内容另存为</strong><ul><li>使用V进入，然后使用hjkl进行选中，最后用<code>:w test2</code>保存</li></ul></li></ul></li></ul><hr><ul><li><strong>合并文件</strong><ul><li>使用<code>:</code>，然后输入r 文件名，就可以将文件内的内容复制到光标的下一行之中</li></ul></li></ul><hr><ul><li><p><strong>打开多个文件</strong></p></li><li><p>使用-o或者是-O进行选择，-o是垂直排列，-O是水平排列</p></li><li><p><code>vim -o test1.c tst2.c</code></p></li><li><p>使用 ctrl + w + w 将光标切换到下一个文件；或者使用 ctrl + w + 方向（方向键或 h、j、k、l）。</p><ul><li>对于垂直并排的文件：使用 ctrl + w + 上、下方向，表示上、下切换文件；</li><li>对于水平并排的文件：使用 ctrl + w + 左、右方向，表示左、右切换文件。</li></ul></li><li><p>退出使用标准退出如<code>:q</code>或者其他</p></li><li><p>其他方法，直接退出所有文件：</p><ul><li>只需在原来退出命令的后边加上小写 a，则表示退出动作是针对所有的（ALL）：qa、qa!、wqa</li></ul></li></ul><hr><h2 id="关于vim使用插件markdown">关于vim使用插件markdown</h2><ul><li>安装的插件为：instant-markdown</li><li>需要的插件为npm nodejs,这些在arch linux的官方库中存在。</li><li>安装方法，使用:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Plug <span class="string">&#x27;instant-markdown/vim-instant-markdown&#x27;</span>, &#123;<span class="string">&#x27;for&#x27;</span>: <span class="string">&#x27;markdown&#x27;</span>, <span class="string">&#x27;do&#x27;</span>: <span class="string">&#x27;yarn install&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><ul><li>然后使用npm安装插件<code>instant-markdwon-d</code>,:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sudo] npm -g install instant-markdown-d</span><br></pre></td></tr></table></figure><ul><li>最后使用的是配置文件，添加到init.vim即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;configure the markdown&#x27;</span></span><br><span class="line"><span class="string">&quot;</span>configure the script to run</span><br><span class="line"><span class="built_in">let</span> g:instant_markdown_allow_unsafe_content = 1</span><br><span class="line"><span class="string">&quot;configure the latex math to the markdown</span></span><br><span class="line"><span class="string">let g:instant_markdown_mathjax = 1</span></span><br></pre></td></tr></table></figure><ul><li>最后将他添加到配置文件中即可。</li></ul><a class="btn-beautify green block right outline larger" href="/post/cec58763.html"   title="下一章，neovim的配置"><i class="far fa-hand-point-right"></i><span>下一章，neovim的配置</span></a>]]></content>
      
      
      <categories>
          
          <category> neovim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
